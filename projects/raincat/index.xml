<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Raincat on dromara(Open source organization)</title><link>/projects/raincat/</link><description>Recent content in Raincat on dromara(Open source organization)</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><atom:link href="/projects/raincat/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>/projects/raincat/admin-starter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/raincat/admin-starter/</guid><description>title kewords description Bootstrap raincat-admin raincat-admin Bootstrap raincat-admin raincat-admin bootstrap Prerequisite of bootstrap: The distributed transaction has been deployed and in running. You can choose RPC framework whatever you want.
Dubbo user Springcloud user Bootstrap method Package and deploy by yourself First of all, the JDK version must be 1.8+ and Git and Maven are installed locally, then execute the following commands.</description></item><item><title/><link>/projects/raincat/config/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/raincat/config/</guid><description>Configuration TxManager configuration application.properties is the configuration file that can be used to configure the http port of tmManager, Redis and Netty related configuration. Notice: Due to tmManage register itself, the port of http(server.port) should be consistent with Eureka port. server.port=8761 // port of txManager tx.manager.netty.port=9998 //Tcp port exposed to business part tx.manager.netty.serialize=kryo //Serialization of Netty, need to be consistent with business part. The bootstrap.yml is mainly configure the properities of Eureka, like renew time, registed address.</description></item><item><title/><link>/projects/raincat/configuration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/raincat/configuration/</guid><description>Configuration TxManager configuration application.properties is the configuration file that can be used to configure the http port of tmManager, Redis and Netty related configuration. Notice: Due to tmManage register itself, the port of http(server.port) should be consistent with Eureka port. server.port=8761 // port of txManager tx.manager.netty.port=9998 //Tcp port exposed to business part tx.manager.netty.serialize=kryo //Serialization of Netty, need to be consistent with business part. The bootstrap.yml is mainly configure the properities of Eureka, like renew time, registed address.</description></item><item><title/><link>/projects/raincat/dubbo-user/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/raincat/dubbo-user/</guid><description>title keywords description dubbo user guide dubbo dubbo user guide Dubbo user configuration Firstly, you should bootstrap raincat-manager, please refer to how to start up TxManager. Then, please add dependency in maven at your Dubbo service, and add @TxTransaction annotation in distributed transaction method.
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;raincat-dubbo&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.0.0-RELEASE&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Congigure TxTransactionBootstrap by Spring XML &amp;lt;context:component-scan base-package=&amp;quot;org.dromara.*&amp;quot;/&amp;gt; &amp;lt;aop:aspectj-autoproxy expose-proxy=&amp;quot;true&amp;quot;/&amp;gt; &amp;lt;bean id=&amp;quot;txTransactionBootstrap&amp;quot; class=&amp;quot;org.</description></item><item><title/><link>/projects/raincat/motan-user/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/raincat/motan-user/</guid><description>title keywords description motan user guide Motan motan user guide Motan user configuration Firstly, you should bootstrap raincat-manager, please refer to how to start up TxManager. Then, please add dependency in maven at your Dubbo service, and add @TxTransaction annotation in distributed transaction method.
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;raincat-dubbo&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.0.0-RELEASE&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Configure TxTransactionBootstrap by Spring XML &amp;lt;context:component-scan base-package=&amp;quot;org.dromara.*&amp;quot;/&amp;gt; &amp;lt;aop:aspectj-autoproxy expose-proxy=&amp;quot;true&amp;quot;/&amp;gt; &amp;lt;bean id=&amp;quot;txTransactionBootstrap&amp;quot; class=&amp;quot;org.</description></item><item><title/><link>/projects/raincat/quick-start-dubbo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/raincat/quick-start-dubbo/</guid><description>title keywords description dubbo quick start dubbo Dubbo quick start Dubbo quick start Environment JDK1.8
Maven 3.2.x
Git
Redis
Mysql
Pull the code &amp;gt; git clone https://github.com/yu199195/Raincat.git &amp;gt; cd Raincat &amp;gt; mvn -DskipTests clean install -U Prepare the database Execute the SQL statement in demo.
SQL statement
Configuration Please open the project in IDEA or Eclipse, and modify the Redis configuration in application.</description></item><item><title/><link>/projects/raincat/quick-start-springcloud/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/raincat/quick-start-springcloud/</guid><description>title keywords description springcloud quick start springcloud springcloud quick start Dubbo quick start Environment JDK1.8
Maven 3.2.x
Git
Redis
Mysql
Pull the code &amp;gt; git clone https://github.com/yu199195/Raincat.git &amp;gt; cd Raincat &amp;gt; mvn -DskipTests clean install -U Prepare the database Execute the SQL statement in demo.
SQL statement
Configuration Please open the project in IDEA or Eclipse, and modify the Redis configuration in application.</description></item><item><title/><link>/projects/raincat/raincat-manager-starter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/raincat/raincat-manager-starter/</guid><description>title keywords description Bootstrap raincat-manager raincat-manager Bootstrap raincat-manager Raincat manager starter There are two kinds of way to bootstrap the raincat-manager.
Pull the code and compile it yourself: https://github.com/yu199195/Raincat Modify the Redis configuration in application.yml. transactionWaitMaxTime: 500 redisSaveMaxTime: 3000 tx: manager: netty : port: 9998 serialize: kryo maxConnection: 100 maxThreads : 16 delayTime : 5 heartTime : 20 redis : cluster : false hostName : 192.</description></item><item><title/><link>/projects/raincat/springcloud-user/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/raincat/springcloud-user/</guid><description>title keywords description springcloud user guide springcloud springcloud user guide Dubbo user configuration Firstly, you should bootstrap raincat-manager, please refer to how to start up TxManager. Then, please add dependency in maven at your Dubbo service, and add @TxTransaction annotation in distributed transaction method.
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;raincat-dubbo&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.0.0-RELEASE&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Congigure TxTransactionBootstrap by Spring XML &amp;lt;context:component-scan base-package=&amp;quot;org.dromara.*&amp;quot;/&amp;gt; &amp;lt;aop:aspectj-autoproxy expose-proxy=&amp;quot;true&amp;quot;/&amp;gt; &amp;lt;bean id=&amp;quot;txTransactionBootstrap&amp;quot; class=&amp;quot;org.</description></item><item><title>Raincat Introduction</title><link>/projects/raincat/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/raincat/overview/</guid><description>Raincat Strongly consistent distributed transactions are implemented based on two-phase commit + local transaction compensation mechanism. Principle and it is based on Java language (JDK1.8), supports dubbo, motan, springcloud for distributed transactions. Because the file name is too long, you can executes git config --global core.longpaths true when pulling the code. Features Frame features Seamlessly integrate spring or spring boot. Support dubbo, motan, springcloud, and other RPC frameworks for distributed</description></item></channel></rss>