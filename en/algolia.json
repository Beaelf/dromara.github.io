[{"author":null,"categories":["SOFAStack"],"content":"\nSOFAStack™ (Scalable Open Financial Architecture Stack) is a collection of cloud native middleware components, which are designed to build distributed systems with high performance and reliability, and have been fully validated by mission-critical financial business scenarios.\nLinks Home Page: https://www.sofastack.tech\nSource Code: https://github.com/sofastack\nProjects  SOFABoot is a development framework open sourced by Ant Financial which is based on Spring Boot, provides capabilities such as Readiness Check, class isolation, log space isolation and asynchronous initialization of bean. SOFARPC is a high-performance, high-extensibility, production-level Java RPC framework. SOFAMesh SOFAMesh is a large-scale implementation solution for Service Mesh which is improved and extended based on Istio. SOFAMosn SOFAMosn(Modular Observable Smart Network) is a powerful proxy acting as Service Mesh\u0026amp;rsquo;s data plane written in Go. SOFATracer SOFATracer is a distributed link tracing system based onOpenTracing specification. SOFALookout SOFALookout is a lightweight and open source middleware service that solves the metrics and monitoring issues of the system. SOFABolt SOFABolt is a network communication framework implemented based on Netty. SOFAArk SOFAArk is a light-weight, java based classloader isolation framework. SOFAJarslink Is a dynamic modules and merged deployments solution based on SOFAArk. SOFAActs ACTS (AntCoreTest) is a white-box testing framework that is based on the accumulation of testing practices for financial-grade distributed architectures. SOFAJraft SOFAJRaft is a production-grade, high-performance Java implementation based on the RAFT consensus algorithm. SOFARegistry SOFARegistry is a production ready, high efficient, highly available service registry. SOFADashboard Is a one-stop console of SOFAStack.  More projects in: github/sofastack\nCommunity   Github\n  WeChat\n  Official Account：Antfin_SOFA is a technology exchange platform dedicated to building first-class distributed technologies in financial scenario applications, focusing on the most cutting-edge, reference-oriented technical solutions and implementation routes in the financial technology industry.\n  WeChat Groups：We have ten groups and more than four thousand developers, Add ant-techfin02 as your friend, and reply SOFA will invite to joining into the group.\n    DingTalk\n  DingTalk Group:\n 「SOFAStack 1」 No: 23127468 Group is Full 「SOFAStack 2」 No: 23195297 Group is Full 「SOFAStack 3」 No: 23390449 Group is Full 「SOFAStack 4」 No: 23372465 Group is Full 「SOFAStack 5」 No: 30315793    DingTalk Group:「SOFAStack Online service」, If you have used any SOFAStack related components in a production environment, please let us know, and we will invite you to join this group for faster communication and more efficient use of problem support online.\n    Weibo\n  SegmentFault\n  juejin.im\n  ","date":1524135415,"description":"Say hello to SOFAStack!","dir":"blog/hello-sofastack/","fuzzywordcount":400,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"26e249e6b2d0e482eb4404b76dabaec4","permalink":"/en/blog/hello-sofastack/","publishdate":"2018-04-19T11:56:55+01:00","readingtime":2,"relpermalink":"/en/blog/hello-sofastack/","summary":"SOFAStack™ (Scalable Open Financial Architecture Stack) is a collection of cloud native middleware components, which are designed to build distributed systems with high performance and reliability, and have been fully validated by mission-critical financial business scenarios.\nLinks Home Page: https://www.sofastack.tech\nSource Code: https://github.com/sofastack\nProjects  SOFABoot is a development framework open sourced by Ant Financial which is based on Spring Boot, provides capabilities such as Readiness Check, class isolation, log space isolation and asynchronous initialization of bean.","tags":["SOFAStack"],"title":"Hello SOFAStack!","type":"blog","url":"/en/blog/hello-sofastack/","wordcount":383},{"author":"SOFA 团队","categories":"SOFA Weekly","content":"","date":1610694000,"description":"SOFA WEEKLY | Occlum 发布新版本，Seata QA 整理","dir":"blog/sofa-weekly-20210115/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"48d18f44f20f4b6d5f8b219e383bfa51","permalink":"/blog/sofa-weekly-20210115/","publishdate":"2021-01-15T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-weekly-20210115/","summary":"","tags":["SOFA Weekly"],"title":"SOFA Weekly | Occlum 发布新版本，Seata QA 整理","type":"blog","url":"/blog/sofa-weekly-20210115/","wordcount":0},{"author":"SOFA 团队","categories":"SOFA Weekly","content":"","date":1610089200,"description":"SOFA WEEKLY | 每周精选，筛选每周精华问答，同步开源进展，欢迎留言互动。","dir":"blog/sofa-weekly-20210108/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"86ee4a89adc2c475c6f406d2774743c8","permalink":"/blog/sofa-weekly-20210108/","publishdate":"2021-01-08T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-weekly-20210108/","summary":"","tags":["SOFA Weekly"],"title":"SOFA Weekly | MOSN 发布新版本，QA 整理","type":"blog","url":"/blog/sofa-weekly-20210108/","wordcount":0},{"author":"SOFA 团队","categories":"SOFA Weekly","content":"","date":1609398000,"description":"SOFA WEEKLY | 每周精选，筛选每周精华问答，同步开源进展，欢迎留言互动。","dir":"blog/sofa-weekly-20201231/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"ca60ed7c9ac011477c8861c0f5650629","permalink":"/blog/sofa-weekly-20201231/","publishdate":"2020-12-31T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-weekly-20201231/","summary":"","tags":["SOFA Weekly"],"title":"SOFA Weekly | SOFA 社区元旦快乐，MOSN 荣获 2020 中国优秀开源项目","type":"blog","url":"/blog/sofa-weekly-20201231/","wordcount":0},{"author":"SOFA 团队","categories":"SOFA Weekly","content":"","date":1608879600,"description":"SOFA WEEKLY | 每周精选，筛选每周精华问答，同步开源进展，欢迎留言互动。","dir":"blog/sofa-weekly-20201225/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"59bc2ae2a6b06f7ca356aeb61a6c78fd","permalink":"/blog/sofa-weekly-20201225/","publishdate":"2020-12-25T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-weekly-20201225/","summary":"","tags":["SOFA Weekly"],"title":"SOFA Weekly | SOFA-Common-Tools 发布新版本， QA 整理","type":"blog","url":"/blog/sofa-weekly-20201225/","wordcount":0},{"author":"SOFA 团队","categories":"SOFA Weekly","content":"","date":1608274800,"description":"SOFA WEEKLY | 每周精选，筛选每周精华问答，同步开源进展，欢迎留言互动。","dir":"blog/sofa-weekly-20201218/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"712d560758c60f16cc7d2651bb781e65","permalink":"/blog/sofa-weekly-20201218/","publishdate":"2020-12-18T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-weekly-20201218/","summary":"","tags":["SOFA Weekly"],"title":"SOFA Weekly | 线上直播合辑整理，QA 整理","type":"blog","url":"/blog/sofa-weekly-20201218/","wordcount":0},{"author":"SOFA 团队","categories":"SOFA Weekly","content":"","date":1607670000,"description":"SOFA WEEKLY | 每周精选，筛选每周精华问答，同步开源进展，欢迎留言互动。","dir":"blog/sofa-weekly-20201211/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"dc10639aea7c443d918ac8f8355ed64c","permalink":"/blog/sofa-weekly-20201211/","publishdate":"2020-12-11T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-weekly-20201211/","summary":"","tags":["SOFA Weekly"],"title":"SOFA Weekly | Seata 发布新版本， QA 整理","type":"blog","url":"/blog/sofa-weekly-20201211/","wordcount":0},{"author":"SOFA 团队","categories":"SOFA Weekly","content":"","date":1607065200,"description":"SOFA WEEKLY | 【11/30 - 12/04】每周精选，筛选每周精华问答，同步开源进展，欢迎留言互动。","dir":"blog/sofa-weekly-20201204/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"4123f0805fdf3799cbafcc143f8d6bac","permalink":"/blog/sofa-weekly-20201204/","publishdate":"2020-12-04T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-weekly-20201204/","summary":"","tags":["SOFA Weekly"],"title":"SOFA Weekly | MOSN 发布新版本、 Seata QA 整理","type":"blog","url":"/blog/sofa-weekly-20201204/","wordcount":0},{"author":"SOFA 团队","categories":"SOFA Weekly","content":"","date":1606460400,"description":"SOFA WEEKLY | 每周精选，筛选每周精华问答，同步开源进展，欢迎留言互动。","dir":"blog/sofa-weekly-20201127/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"f379c4483cff2807f5cfe8c6bbab5d8c","permalink":"/blog/sofa-weekly-20201127/","publishdate":"2020-11-27T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-weekly-20201127/","summary":"","tags":["SOFA Weekly"],"title":"SOFA Weekly | 每周精选【11/23 - 11/27】SOFA Weekly | SOFAJRaft 、SOFABoot发布新版本，SOFAStack 获优秀 Gitee 组织奖","type":"blog","url":"/blog/sofa-weekly-20201127/","wordcount":0},{"author":"SOFA 团队","categories":"SOFA Weekly","content":"","date":1605855600,"description":"SOFA WEEKLY | 每周精选，筛选每周精华问答，同步开源进展，欢迎留言互动。","dir":"blog/sofa-weekly-20201120/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"a81d6649eb11649a90e54eef8a5a57e2","permalink":"/blog/sofa-weekly-20201120/","publishdate":"2020-11-20T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-weekly-20201120/","summary":"","tags":["SOFA Weekly"],"title":"SOFA Weekly | 每周精选【11/16 - 11/20】SOFA-Common-Tools 项目发布新版本、Seata、MOSN 相关 QA 整理","type":"blog","url":"/blog/sofa-weekly-20201120/","wordcount":0},{"author":"SOFA 团队","categories":"SOFA Weekly","content":"","date":1605254400,"description":"【11/9-11/13】| 每周精选，筛选每周精华问答，同步开源进展，欢迎留言互动。","dir":"blog/sofa-weekly-20201113/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"59cb50e2977d5e0b3ad675ca234c2b0f","permalink":"/blog/sofa-weekly-20201113/","publishdate":"2020-11-13T16:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-weekly-20201113/","summary":"","tags":["SOFA Weekly"],"title":"SOFA Weekly | Service Mesh 相关阅读合集、SOFABoot 以及 Seata QA 整理","type":"blog","url":"/blog/sofa-weekly-20201113/","wordcount":0},{"author":"SOFA 团队","categories":"SOFA Weekly","content":"","date":1604646000,"description":"SOFA WEEKLY | 每周精选，筛选每周精华问答，同步开源进展，欢迎留言互动。","dir":"blog/sofa-weekly-20201106/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"dc199415476133ea6f6ee6adf2bf91fa","permalink":"/blog/sofa-weekly-20201106/","publishdate":"2020-11-06T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-weekly-20201106/","summary":"","tags":["SOFA Weekly"],"title":"SOFA Weekly | MOSN、Seata 发布新版本、MOSN 相关阅读整理","type":"blog","url":"/blog/sofa-weekly-20201106/","wordcount":0},{"author":"SOFA 团队","categories":"SOFA Weekly","content":"","date":1604041200,"description":"【10/26-10/30】 | 每周精选，筛选每周精华问答，同步开源进展，欢迎留言互动。","dir":"blog/sofa-weekly-20201030/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"a67a4e194b658ba2f0427011c0b56dba","permalink":"/blog/sofa-weekly-20201030/","publishdate":"2020-10-30T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-weekly-20201030/","summary":"","tags":["SOFA Weekly"],"title":"SOFA Weekly | MOSN 项目更新及直播预告","type":"blog","url":"/blog/sofa-weekly-20201030/","wordcount":0},{"author":"SOFA 团队","categories":"SOFA Weekly","content":"","date":1603436400,"description":"【10/19-10/23】 | 每周精选，筛选每周精华问答，同步开源进展，欢迎留言互动。","dir":"blog/sofa-weekly-20201023/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"cf0c4a06a60155202353fe19c3185072","permalink":"/blog/sofa-weekly-20201023/","publishdate":"2020-10-23T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-weekly-20201023/","summary":"","tags":["SOFA Weekly"],"title":"SOFA Weekly | SOFAArk、SOFABoot 发版、10月28日线上直播预告","type":"blog","url":"/blog/sofa-weekly-20201023/","wordcount":0},{"author":"SOFA 团队","categories":"SOFA Weekly","content":"","date":1602831600,"description":"【10/12-10/16】 | 每周精选，筛选每周精华问答，同步开源进展，欢迎留言互动。","dir":"blog/sofa-weekly-20201016/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"a7a2f16f7c62d777b8aff0f90a85ba7b","permalink":"/blog/sofa-weekly-20201016/","publishdate":"2020-10-16T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-weekly-20201016/","summary":"","tags":["SOFA Weekly"],"title":"SOFA Weekly | SOFAJRaft 发布、SOFAJRaft 源码解析文章合集","type":"blog","url":"/blog/sofa-weekly-20201016/","wordcount":0},{"author":"SOFA 团队","categories":"SOFA Weekly","content":"","date":1602226800,"description":"【10/05-10/09】 | 每周精选，筛选每周精华问答，同步开源进展，欢迎留言互动。","dir":"blog/sofa-weekly-20201009/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"a83b0d192a605f994a1379ab41578403","permalink":"/blog/sofa-weekly-20201009/","publishdate":"2020-10-09T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-weekly-20201009/","summary":"","tags":["SOFA Weekly"],"title":"SOFA Weekly | MOSN QA 整理、SOFAChannel 线上直播合集","type":"blog","url":"/blog/sofa-weekly-20201009/","wordcount":0},{"author":"SOFA 团队","categories":"SOFA Weekly","content":"","date":1601622000,"description":"【09/28-10/02】 | 每周精选，筛选每周精华问答，同步开源进展，欢迎留言互动。","dir":"blog/sofa-weekly-20201002/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"bc9b38b8088d82138a46a8318e944840","permalink":"/blog/sofa-weekly-20201002/","publishdate":"2020-10-02T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-weekly-20201002/","summary":"","tags":["SOFA Weekly"],"title":" SOFA Weekly | MOSN、SOFARPC 发版、Seata QA 整理","type":"blog","url":"/blog/sofa-weekly-20201002/","wordcount":0},{"author":"SOFA 团队","categories":"SOFA Weekly","content":"","date":1601017200,"description":"SOFA WEEKLY | 每周精选，筛选每周精华问答，同步开源进展，欢迎留言互动。","dir":"blog/sofa-weekly-20200925/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"c7562a535d9b34b23d0b559dd756ef6a","permalink":"/blog/sofa-weekly-20200925/","publishdate":"2020-09-25T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-weekly-20200925/","summary":"","tags":["SOFA Weekly"],"title":"SOFA Weekly | SOFABolt 源码解析合辑、CSDI summit 活动预告","type":"blog","url":"/blog/sofa-weekly-20200925/","wordcount":0},{"author":"SOFA 团队","categories":"SOFA Weekly","content":"","date":1600412400,"description":"SOFA WEEKLY | 每周精选，筛选每周精华问答，同步开源进展，欢迎留言互动。","dir":"blog/sofa-weekly-20200918/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"d3e2feb22ec7504b5fc6648eeba4769f","permalink":"/blog/sofa-weekly-20200918/","publishdate":"2020-09-18T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-weekly-20200918/","summary":"","tags":["SOFA Weekly"],"title":"SOFAWeekly｜MOSN 支持 Istio、SOFAJRaft 发布、本周日您有一条待办日程","type":"blog","url":"/blog/sofa-weekly-20200918/","wordcount":0},{"author":"SOFA 团队","categories":"SOFA Weekly","content":"","date":1599807600,"description":"SOFA WEEKLY | 每周精选，筛选每周精华问答，同步开源进展，欢迎留言互动。","dir":"blog/sofa-weekly-20200911/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"25ab3501e7db2cd836d05f86bb6c17ef","permalink":"/blog/sofa-weekly-20200911/","publishdate":"2020-09-11T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-weekly-20200911/","summary":"","tags":["SOFA Weekly"],"title":"SOFA Weekly | SOFABoot、SOFAArk 发布、9/20 上海线下活动推荐","type":"blog","url":"/blog/sofa-weekly-20200911/","wordcount":0},{"author":"王发康（毅松）","categories":"MOSN","content":"","date":1599022800,"description":"MOSN 在蚂蚁集团的 Service Mesh 大规模落地后，通过对接 UDPA 打造为 Istio 的数据面之一，本文就其在演进过程中遇到的问题及思考进行展开。","dir":"blog/cloud-native-network proxy-mosn-evolutionary-path/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"080e78e9d0103daed414ee3a8b5b7996","permalink":"/blog/cloud-native-network-proxy-mosn-evolutionary-path/","publishdate":"2020-09-02T13:00:00+08:00","readingtime":0,"relpermalink":"/blog/cloud-native-network-proxy-mosn-evolutionary-path/","summary":"","tags":["MOSN","Service Mesh"],"title":"云原生网络代理 MOSN 的进化之路","type":"blog","url":"/blog/cloud-native-network-proxy-mosn-evolutionary-path/","wordcount":0},{"author":"SOFA 团队","categories":"SOFA Weekly","content":"","date":1598598000,"description":"SOFA WEEKLY | 每周精选，筛选每周精华问答，同步开源进展，欢迎留言互动。","dir":"blog/sofa-weekly-20200828/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"474484cd88c8a1971016217eb9c1438d","permalink":"/blog/sofa-weekly-20200828/","publishdate":"2020-08-28T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-weekly-20200828/","summary":"","tags":["SOFA Weekly"],"title":"SOFA Weekly | sofa-common-tools 发布、组件解析合辑、云原生活动推荐","type":"blog","url":"/blog/sofa-weekly-20200828/","wordcount":0},{"author":"SOFA 团队","categories":"SOFA Weekly","content":"","date":1597993200,"description":"SOFA WEEKLY | 每周精选，筛选每周精华问答，同步开源进展，欢迎留言互动。","dir":"blog/sofa-weekly-20200821/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"34ac475f8a4ec2435b62a9bf4d520e2a","permalink":"/blog/sofa-weekly-20200821/","publishdate":"2020-08-21T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-weekly-20200821/","summary":"","tags":["SOFA Weekly"],"title":"SOFA Weekly | 线上直播合辑整理、Seata QA 整理","type":"blog","url":"/blog/sofa-weekly-20200821/","wordcount":0},{"author":"樱桃","categories":"Occlum","content":"","date":1597906800,"description":"本文分享如何使用 Occlum 的轻松开发机密计算应用以及 Occlum 技术架构和特色。","dir":"blog/sofa-channel-18-retrospect/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"a1d55e5deb00aa8cde8d14f250569013","permalink":"/blog/sofa-channel-18-retrospect/","publishdate":"2020-08-20T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-channel-18-retrospect/","summary":"","tags":["Occlum","SOFAchannel"],"title":"人人都可以“机密计算”：Occlum 使用入门和技术揭秘 | SOFAChannel#18 直播回顾","type":"blog","url":"/blog/sofa-channel-18-retrospect/","wordcount":0},{"author":"田晓旭","categories":"Kubernetes","content":"","date":1597820400,"description":"随着 Kubernetes 逐渐成为云计算的标准，企业中的 Kubernetes 应用正成为主流。本文分享蚂蚁集团的 SLO 体系是如何建立的。","dir":"blog/antgroup-kubernetes-high-slo/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"f15367978d8b820ec3fcddf3ab6d7779","permalink":"/blog/antgroup-kubernetes-high-slo/","publishdate":"2020-08-19T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/antgroup-kubernetes-high-slo/","summary":"","tags":["Kubernetes"],"title":"蚂蚁集团如何在大规模 Kubernetes 集群上实现高 SLO？","type":"blog","url":"/blog/antgroup-kubernetes-high-slo/","wordcount":0},{"author":"SOFA 团队","categories":"SOFA Weekly","content":"","date":1597388400,"description":"SOFA WEEKLY | 每周精选，筛选每周精华问答，同步开源进展，欢迎留言互动。","dir":"blog/sofa-weekly-20200814/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"68d4b22d401ef51b62f39c8680895b36","permalink":"/blog/sofa-weekly-20200814/","publishdate":"2020-08-14T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-weekly-20200814/","summary":"","tags":["SOFA Weekly"],"title":"SOFA Weekly | SOFABoot 发布、SOFAJRaft 以及 SOFARPC 内容合辑、MOSN 活动报名","type":"blog","url":"/blog/sofa-weekly-20200814/","wordcount":0},{"author":"万佳","categories":"Kubernetes","content":"","date":1597215600,"description":"K8s Secret 面临着哪些安全问题？这些安全问题会带来什么影响？社区提供的解决方案存在哪些不足？","dir":"blog/antgroup-k8s-security-protection-of-cluster-sensitive-information/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"39e435e749635a88bce9e36771e5b2e2","permalink":"/blog/antgroup-k8s-security-protection-of-cluster-sensitive-information/","publishdate":"2020-08-12T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/antgroup-k8s-security-protection-of-cluster-sensitive-information/","summary":"","tags":["Kubernetes"],"title":"蚂蚁是如何改进 K8s 集群敏感信息的安全防护的？","type":"blog","url":"/blog/antgroup-k8s-security-protection-of-cluster-sensitive-information/","wordcount":0},{"author":"SOFA 团队","categories":"SOFAStack","content":"","date":1597042800,"description":"从初试锋芒到大展拳脚，从无人区的前哨到数字化转型的领航员，云上自有江湖，欢迎加入云上江湖","dir":"blog/antgroup-sofastack-rivers-and-lakes-on-the-cloud/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"dc1065f8e3a2e016a6fc8750bbfab2c2","permalink":"/blog/antgroup-sofastack-rivers-and-lakes-on-the-cloud/","publishdate":"2020-08-10T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/antgroup-sofastack-rivers-and-lakes-on-the-cloud/","summary":"","tags":["SOFAStack"],"title":"蚂蚁 SOFAStack：云上自有江湖","type":"blog","url":"/blog/antgroup-sofastack-rivers-and-lakes-on-the-cloud/","wordcount":0},{"author":"SOFA 团队","categories":"SOFA Weekly","content":"","date":1596783600,"description":"SOFA WEEKLY | 每周精选，筛选每周精华问答，同步开源进展，欢迎留言互动。","dir":"blog/sofa-weekly-20200807/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"3ae77ff6536d0104b38d51679b7f078b","permalink":"/blog/sofa-weekly-20200807/","publishdate":"2020-08-07T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-weekly-20200807/","summary":"","tags":["SOFA Weekly"],"title":"SOFA Weekly | MOSN \u0026 SOFARPC 发布、MOSN 社区活动报名","type":"blog","url":"/blog/sofa-weekly-20200807/","wordcount":0},{"author":"陈伟荣","categories":"智能监控","content":"","date":1596438000,"description":"坐在光明顶的少年。","dir":"blog/five-years-to-ali-p8/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"80f2d7c63c3dfb1ee561e79745630a68","permalink":"/blog/five-years-to-ali-p8/","publishdate":"2020-08-03T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/five-years-to-ali-p8/","summary":"","tags":["智能监控"],"title":"少年五年升阿里 P8，他如何从低谷登上“光明顶”？","type":"blog","url":"/blog/five-years-to-ali-p8/","wordcount":0},{"author":"SOFA 团队","categories":"SOFA Weekly","content":"","date":1596178800,"description":"SOFA WEEKLY | 每周精选，筛选每周精华问答，同步开源进展，欢迎留言互动。","dir":"blog/sofa-weekly-20200731/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"ba067c1a03b386adff832962bb27dd52","permalink":"/blog/sofa-weekly-20200731/","publishdate":"2020-07-31T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-weekly-20200731/","summary":"","tags":["SOFA Weekly"],"title":"SOFA Weekly | SOFAJRaft 以及 SOFABoot 发布、MOSN 社区活动预告","type":"blog","url":"/blog/sofa-weekly-20200731/","wordcount":0},{"author":"李昊阳","categories":"Kata Containers","content":"","date":1595919600,"description":"Kata Containers 项目的奋进之路","dir":"blog/kata-container-2.0-road-to-attack/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"2eaaa668460266fb66b2b44f5611c472","permalink":"/blog/kata-container-2.0-road-to-attack/","publishdate":"2020-07-28T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/kata-container-2.0-road-to-attack/","summary":"","tags":["Kata Containers"],"title":"Kata Containers 2.0 的进击之路","type":"blog","url":"/blog/kata-container-2.0-road-to-attack/","wordcount":0},{"author":"SOFA 团队","categories":"SOFA Weekly","content":"","date":1595574000,"description":"SOFA WEEKLY | 每周精选，筛选每周精华问答，同步开源进展，欢迎留言互动。","dir":"blog/sofa-weekly-20200724/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"6efe8af3dfb578bdfd495367e78b60e4","permalink":"/blog/sofa-weekly-20200724/","publishdate":"2020-07-24T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-weekly-20200724/","summary":"","tags":["SOFA Weekly"],"title":"SOFA Weekly | SOFABolt 发布新版本、MOSN 相关文章整理","type":"blog","url":"/blog/sofa-weekly-20200724/","wordcount":0},{"author":"姚昌宇","categories":"Service Mesh","content":"","date":1595498400,"description":"SOFA WEEKLY | 每周精选，筛选每周精华问答，同步开源进展，欢迎留言互动。","dir":"blog/mosn-istio-service-mesh/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"03b066886bc7e069eca5654ee35e4782","permalink":"/blog/mosn-istio-service-mesh/","publishdate":"2020-07-23T18:00:00+08:00","readingtime":0,"relpermalink":"/blog/mosn-istio-service-mesh/","summary":"","tags":["Service Mesh","MOSN"],"title":"基于 MOSN 和 Istio Service Mesh 的服务治理实践","type":"blog","url":"/blog/mosn-istio-service-mesh/","wordcount":0},{"author":"SOFA 团队","categories":"SOFA Weekly","content":"","date":1594969200,"description":"SOFA WEEKLY | 每周精选，筛选每周精华问答，同步开源进展，欢迎留言互动。","dir":"blog/sofa-weekly-20200717/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"54ea1b69911fe82c9674739a421a0ce5","permalink":"/blog/sofa-weekly-20200717/","publishdate":"2020-07-17T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-weekly-20200717/","summary":"","tags":["SOFA Weekly"],"title":"SOFA Weekly | SOFARPC、Seata 组件发布以及社区 QA 整理、社区直播预告","type":"blog","url":"/blog/sofa-weekly-20200717/","wordcount":0},{"author":"沈凋墨","categories":"Kubernetes","content":"","date":1594882800,"description":"本文将专注于微内核（microkernel）这个概念及其对 Kubernetes 架构的影响分享。","dir":"blog/microkernel-distributed-operating-system-kubernetes/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"9fc5956b0fc0551dfdcf50df35ee8a84","permalink":"/blog/microkernel-distributed-operating-system-kubernetes/","publishdate":"2020-07-16T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/microkernel-distributed-operating-system-kubernetes/","summary":"","tags":["Kubernetes"],"title":"Kubernetes: 微内核的分布式操作系统","type":"blog","url":"/blog/microkernel-distributed-operating-system-kubernetes/","wordcount":0},{"author":"潘潘","categories":"SOFAChannel","content":"","date":1594710000,"description":"7 月 22 日周四晚 8 点，Service Mesh Webinar#2 线上直播。","dir":"activities/service-mesh-webinar-2/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"856529bdb9666c8bad4c59a80444662f","permalink":"/activities/service-mesh-webinar-2/","publishdate":"2020-07-14T15:00:00+08:00","readingtime":0,"relpermalink":"/activities/service-mesh-webinar-2/","summary":"","tags":["MOSN","Service Mesh Webinar"],"title":"Service Mesh Webinar#2：基于 MOSN 和 Istio Service Mesh 的服务治理实践","type":"activities","url":"/activities/service-mesh-webinar-2/","wordcount":0},{"author":"罗广明","categories":"Service Mesh","content":"","date":1594710000,"description":"本文将主要介绍微服务架构的概述以及云原生环境下的 Service Mesh 和传统微服务应用的区别。","dir":"blog/microservices-service-mesh/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"f6d713862b049df801c82f5c52ec6ed1","permalink":"/blog/microservices-service-mesh/","publishdate":"2020-07-14T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/microservices-service-mesh/","summary":"","tags":["Service Mesh"],"title":"火了 2 年的服务网格究竟给微服务带来了什么？","type":"blog","url":"/blog/microservices-service-mesh/","wordcount":0},{"author":"SOFA 团队","categories":"SQLFlow","content":"","date":1594623600,"description":"近两年来，端到端机器学习成为 AI 领域研发热点，蚂蚁集团于2019年5月发布端到端 AI 系统 SQLFlow 开源项目，受到业界广泛关注。今天，就让我们来看看它对端到端 AI 的思考与解答。","dir":"blog/end-to-end-ai-system-sqlflow/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"667a8ff160a9c7f54a5ceba7c20b7437","permalink":"/blog/end-to-end-ai-system-sqlflow/","publishdate":"2020-07-13T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/end-to-end-ai-system-sqlflow/","summary":"","tags":["SQLFlow"],"title":"我们需要什么样的端到端 AI 系统？蚂蚁 SQLFlow 的思考与答案","type":"blog","url":"/blog/end-to-end-ai-system-sqlflow/","wordcount":0},{"author":"SOFA 团队","categories":"SOFA Weekly","content":"","date":1594364400,"description":"SOFA WEEKLY | 每周精选，筛选每周精华问答，同步开源进展，欢迎留言互动。","dir":"blog/sofa-weekly-20200710/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"304a9dc50d507f12e1b562491d6b5546","permalink":"/blog/sofa-weekly-20200710/","publishdate":"2020-07-10T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-weekly-20200710/","summary":"","tags":["SOFA Weekly"],"title":"SOFA Weekly | SOFAJRaft 发布、CNCF 旗舰会议活动预告","type":"blog","url":"/blog/sofa-weekly-20200710/","wordcount":0},{"author":"尹博学","categories":"分布式架构","content":"","date":1594278000,"description":"本文整理自2020阿里云线上峰会蚂蚁集团资深技术专家尹博学的主题演讲，为大家分享蚂蚁关于金融级 IT 架构及分布式架构的思考和应用实践。","dir":"blog/antgroup-yinboxue-fully-distributed-unitized-technology-architecture/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"dec27e85a58fcb573b33b9de6125bbc5","permalink":"/blog/antgroup-yinboxue-fully-distributed-unitized-technology-architecture/","publishdate":"2020-07-09T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/antgroup-yinboxue-fully-distributed-unitized-technology-architecture/","summary":"","tags":["分布式架构"],"title":"支付宝资深技术专家尹博学：新一代金融核心突破之全分布式单元化技术架构","type":"blog","url":"/blog/antgroup-yinboxue-fully-distributed-unitized-technology-architecture/","wordcount":0},{"author":"SOFA 团队","categories":"SOFA Weekly","content":"","date":1593759600,"description":"【06/29-07/03】 | 每周精选，筛选每周精华问答，同步开源进展，欢迎留言互动。","dir":"blog/sofa-weekly-20200703/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"6f65c94a70fdd3d222fb510cbec05abf","permalink":"/blog/sofa-weekly-20200703/","publishdate":"2020-07-03T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-weekly-20200703/","summary":"","tags":["SOFA Weekly"],"title":"SOFA Weekly | MOSN 版本发布以及社区活动预告、SOFABolt 直播回顾整理","type":"blog","url":"/blog/sofa-weekly-20200703/","wordcount":0},{"author":"丞一","categories":"SOFAChannel","content":"","date":1593694800,"description":"开源网络通信框架 SOFABolt 首次线上直播文字回顾。","dir":"blog/sofa-channel-17-retrospect/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"9f88cb52dccf190278f16c9eab448644","permalink":"/blog/sofa-channel-17-retrospect/","publishdate":"2020-07-02T21:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-channel-17-retrospect/","summary":"","tags":["SOFAChannel","SOFABolt"],"title":"网络通信框架 SOFABolt 功能介绍及协议框架解析 | SOFAChannel#17 直播回顾","type":"blog","url":"/blog/sofa-channel-17-retrospect/","wordcount":0},{"author":"敖小剑","categories":"微服务","content":"","date":1593414000,"description":"本文从“分布式单体”问题出发，介绍通过引入非侵入式方案和引入Event/EDA 来走出微服务实践误区：从单体到微服务，却最后沦为分布式单体。","dir":"blog/microservices-misunderstanding-avoid-monolith-to-distributed-monolith/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"9ab906cecb82200b18dceb4ab43ba46a","permalink":"/blog/microservices-misunderstanding-avoid-monolith-to-distributed-monolith/","publishdate":"2020-06-29T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/microservices-misunderstanding-avoid-monolith-to-distributed-monolith/","summary":"","tags":["微服务","分布式"],"title":"走出微服务误区：避免从单体到分布式单体","type":"blog","url":"/blog/microservices-misunderstanding-avoid-monolith-to-distributed-monolith/","wordcount":0},{"author":"王旭","categories":"镜像","content":"","date":1592895600,"description":"众所周知，Docker 始于2013年的 dotCloud，迄今刚刚七年，如果你刚好在圈中经历了2013-2015年这段早期岁月的话，自然应该知道，最初的 Docker = LXC + aufs，前者就是所谓的 Linux 容器了，而后者则是今天要聊的镜像。","dir":"blog/twenty-years-of-image-format-from-Knoppix-to-OCI-Image-v2/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"f918e4318b9157894559ba289b29553d","permalink":"/blog/twenty-years-of-image-format-from-knoppix-to-oci-image-v2/","publishdate":"2020-06-23T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/twenty-years-of-image-format-from-knoppix-to-oci-image-v2/","summary":"","tags":["镜像"],"title":"镜像格式二十年：从 Knoppix 到 OCI-Image-v2","type":"blog","url":"/blog/twenty-years-of-image-format-from-knoppix-to-oci-image-v2/","wordcount":0},{"author":"SOFA 团队","categories":"SOFA Weekly","content":"","date":1592550000,"description":"SOFA WEEKLY | 每周精选，筛选每周精华问答，同步开源进展，欢迎留言互动。","dir":"blog/sofa-weekly-20200619/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"4b795b006dbfdc77ff65a693f80f1e6c","permalink":"/blog/sofa-weekly-20200619/","publishdate":"2020-06-19T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-weekly-20200619/","summary":"","tags":["SOFA Weekly"],"title":"SOFA Weekly | SOFAJRaft、Occlum 发布、社区直播预告","type":"blog","url":"/blog/sofa-weekly-20200619/","wordcount":0},{"author":"申尘","categories":"智能监控","content":"","date":1592463600,"description":"本文将介绍蚂蚁金服监控产品在监控大盘方面的创新设计与尝试。","dir":"blog/antfin-monitoring-cloud-native-observable-market-design-overview/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"30e37e5824f0c80a9aef838c5db03a3c","permalink":"/blog/antfin-monitoring-cloud-native-observable-market-design-overview/","publishdate":"2020-06-18T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/antfin-monitoring-cloud-native-observable-market-design-overview/","summary":"","tags":["智能监控"],"title":"蚂蚁金服智能监控云原生可观测大盘设计概览","type":"blog","url":"/blog/antfin-monitoring-cloud-native-observable-market-design-overview/","wordcount":0},{"author":"涵畅","categories":"Service Mesh","content":"","date":1592298000,"description":"本文将结合蚂蚁金服内部实际场景以及思考，讲述继 2019 双十一之后，蚂蚁金服在 Service Mesh 路上的规划和持续演进。","dir":"blog/service-mesh-the-road-ahead-long/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"81941474b0c2d163a199a461aaa3f2f3","permalink":"/blog/service-mesh-the-road-ahead-long/","publishdate":"2020-06-16T17:00:00+08:00","readingtime":0,"relpermalink":"/blog/service-mesh-the-road-ahead-long/","summary":"","tags":["Service Mesh","源创会"],"title":"再启程，Service Mesh 前路虽长，尤可期许","type":"blog","url":"/blog/service-mesh-the-road-ahead-long/","wordcount":0},{"author":"霄鸿","categories":"Service Mesh","content":"","date":1592204400,"description":"作为目前规模最大的 Service Mesh 集群，本文从监控的领域对 Service Mesh 落地进行经验总结","dir":"blog/antfin-service-mesh-monitor-landing-experience/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"5728ecea53b7505a29fdd8d498a8f111","permalink":"/blog/antfin-service-mesh-monitor-landing-experience/","publishdate":"2020-06-15T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/antfin-service-mesh-monitor-landing-experience/","summary":"","tags":["Service Mesh","智能运维"],"title":"蚂蚁金服在 Service Mesh 监控落地经验总结","type":"blog","url":"/blog/antfin-service-mesh-monitor-landing-experience/","wordcount":0},{"author":"SOFA 团队","categories":"SOFA Weekly","content":"","date":1591945200,"description":"SOFA WEEKLY | 每周精选，筛选每周精华问答，同步开源进展，欢迎留言互动。","dir":"blog/sofa-weekly-20200612/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"a85bdf92bd596c0809df4b4464b8a85b","permalink":"/blog/sofa-weekly-20200612/","publishdate":"2020-06-12T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-weekly-20200612/","summary":"","tags":["SOFA Weekly"],"title":"SOFA Weekly | 绝妙的机会与 SOFAStack 一起玩、社区直播预告","type":"blog","url":"/blog/sofa-weekly-20200612/","wordcount":0},{"author":"潘潘","categories":"SOFAChannel","content":"","date":1591945200,"description":"7 月 2 日周四晚 7 点，线上直播第 17 期。","dir":"activities/sofa-channel-17/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"6b021a35ee168e2bc4cb3350c6828d68","permalink":"/activities/sofa-channel-17/","publishdate":"2020-06-12T15:00:00+08:00","readingtime":0,"relpermalink":"/activities/sofa-channel-17/","summary":"","tags":["SOFAChannel","SOFABolt"],"title":"SOFAChannel#17：网络通信框架 SOFABolt 的功能介绍及协议框架解析","type":"activities","url":"/activities/sofa-channel-17/","wordcount":0},{"author":"SOFA 团队","categories":"SOFA Weekly","content":"","date":1591858800,"description":"云原生技术已趋向成熟 为金融企业带来全新业务价值与技术优势","dir":"blog/forrester-daipeng-white-paper-cloud-native/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"eb590c61c39c7b48afdb5abd95889b99","permalink":"/blog/forrester-daipeng-white-paper-cloud-native/","publishdate":"2020-06-11T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/forrester-daipeng-white-paper-cloud-native/","summary":"","tags":["SOFAStack","云原生"],"title":"Forrester 中国首席分析师戴鲲：云原生技术趋向成熟，金融企业选择云原生平台需满足三大要求","type":"blog","url":"/blog/forrester-daipeng-white-paper-cloud-native/","wordcount":0},{"author":"诣极","categories":"MOSN","content":"","date":1591686000,"description":"本文将重点描述在基于 Go 语言库 dubbo-go-hessian2、Dubbo 协议中对 MOSN 所做的性能优化。","dir":"blog/mosn-dubbo-dubbo-go-hessian2-performance-optimization/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"2584f4b7cd5bf07fb458ef9fbe60433c","permalink":"/blog/mosn-dubbo-dubbo-go-hessian2-performance-optimization/","publishdate":"2020-06-09T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/mosn-dubbo-dubbo-go-hessian2-performance-optimization/","summary":"","tags":["MOSN"],"title":"记一次在 MOSN 对 Dubbo、Dubbo-go-hessian2 的性能优化","type":"blog","url":"/blog/mosn-dubbo-dubbo-go-hessian2-performance-optimization/","wordcount":0},{"author":"SOFA 团队","categories":"SOFA Weekly","content":"","date":1591340400,"description":"SOFA WEEKLY | 每周精选，筛选每周精华问答，同步开源进展，欢迎留言互动。","dir":"blog/sofa-weekly-20200605/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"9ba8595438771312ed9c187e57789bad","permalink":"/blog/sofa-weekly-20200605/","publishdate":"2020-06-05T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-weekly-20200605/","summary":"","tags":["SOFA Weekly"],"title":"SOFA Weekly | MOSN 发版、Service Mesh 相关文章整理、社区直播预告","type":"blog","url":"/blog/sofa-weekly-20200605/","wordcount":0},{"author":"陈鹏","categories":"Service Mesh","content":"","date":1591264800,"description":"本文主要给分享 Service Mesh 的一些技术点以及多点生活在 Service Mesh 落地过程中适配 Dubbo 的一些探索。","dir":"blog/service-mesh-webinar-duodian-istio-mosn-dubbo/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"99f4c0638c5fbd0b762ce8d373142ae0","permalink":"/blog/service-mesh-webinar-duodian-istio-mosn-dubbo/","publishdate":"2020-06-04T18:00:00+08:00","readingtime":0,"relpermalink":"/blog/service-mesh-webinar-duodian-istio-mosn-dubbo/","summary":"","tags":["Service Mesh","Service Mesh Webinar"],"title":"多点生活在 Service Mesh 上的实践 -- Istio + Mosn 在 Dubbo 场景下的探索之路","type":"blog","url":"/blog/service-mesh-webinar-duodian-istio-mosn-dubbo/","wordcount":0},{"author":"叶志远","categories":"Service Mesh","content":"","date":1591092000,"description":"本文根据 G7 微服务架构师叶志远线上分享整理，以一个选型调研者的视角，来看看 Service Mesh 中的可观察性主流实践方案。","dir":"blog/service-mesh-virtual-meetup1-service-mesh-observability-practice/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"a4bde9dc8721fabf285171be403d7f5a","permalink":"/blog/service-mesh-virtual-meetup1-service-mesh-observability-practice/","publishdate":"2020-06-02T18:00:00+08:00","readingtime":0,"relpermalink":"/blog/service-mesh-virtual-meetup1-service-mesh-observability-practice/","summary":"","tags":["Service Mesh","Service Mesh Virtual Meetup"],"title":"Service Mesh 中的可观察性实践","type":"blog","url":"/blog/service-mesh-virtual-meetup1-service-mesh-observability-practice/","wordcount":0},{"author":"SOFA 团队","categories":"SOFA Weekly","content":"","date":1590735600,"description":"SOFA WEEKLY | 每周精选，筛选每周精华问答，同步开源进展，欢迎留言互动。","dir":"blog/sofa-weekly-20200529/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"2009de6439107016241e7f8efc5a665c","permalink":"/blog/sofa-weekly-20200529/","publishdate":"2020-05-29T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-weekly-20200529/","summary":"","tags":["SOFA Weekly"],"title":"SOFA Weekly | Service Mesh 系列直播回顾、SOFARPC 剖析回顾","type":"blog","url":"/blog/sofa-weekly-20200529/","wordcount":0},{"author":"高洪涛","categories":"Service Mesh","content":"","date":1590649200,"description":"本文根据5月7日晚，美国 Service Mesh 服务商 Tetrate 创始工程师高洪涛的主题分享《Apache SkyWalking 在 Service Mesh 中的可观察性应用》整理。","dir":"blog/service-mesh-virtual-meetup1-skywalking-observability-applications/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"2414682129ca15d4cfc86bffc6694aaa","permalink":"/blog/service-mesh-virtual-meetup1-skywalking-observability-applications/","publishdate":"2020-05-28T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/service-mesh-virtual-meetup1-skywalking-observability-applications/","summary":"","tags":["Service Mesh","Service Mesh Virtual Meetup"],"title":"Apache SkyWalking 在 Service Mesh 中的可观察性应用","type":"blog","url":"/blog/service-mesh-virtual-meetup1-skywalking-observability-applications/","wordcount":0},{"author":"罗广明","categories":"Service Mesh","content":"","date":1590476400,"description":"本文根据5月13日晚，百度高级工程师罗广明的主题分享《Service Mesh 高可用在企业级生产中的实践》整理。","dir":"blog/service-mesh-virtual-meetup1-practice-in-enterprise-production/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"2cea7fee830cbfcc69ee7732909b231c","permalink":"/blog/service-mesh-virtual-meetup1-practice-in-enterprise-production/","publishdate":"2020-05-26T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/service-mesh-virtual-meetup1-practice-in-enterprise-production/","summary":"","tags":["Service Mesh","Service Mesh Virtual Meetup"],"title":"Service Mesh 高可用在企业级生产中的实践 | 线上直播回顾","type":"blog","url":"/blog/service-mesh-virtual-meetup1-practice-in-enterprise-production/","wordcount":0},{"author":"SOFA 团队","categories":"SOFA Weekly","content":"","date":1590138000,"description":"SOFA WEEKLY | 每周精选，筛选每周精华问答，同步开源进展，欢迎留言互动。","dir":"blog/sofa-weekly-20200522/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"b5778b2bc8e9e6cd92abd8bd7bfc387b","permalink":"/blog/sofa-weekly-20200522/","publishdate":"2020-05-22T17:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-weekly-20200522/","summary":"","tags":["SOFA Weekly"],"title":"SOFA Weekly | Occlum 发布、技术直播回顾\u0026预告","type":"blog","url":"/blog/sofa-weekly-20200522/","wordcount":0},{"author":"巴德","categories":"Kata Containers","content":"","date":1590123600,"description":"本文根据线上直播整理，一起来看看云原生场景下容器隔离性的需求以及我们如何运用 Kata Containers 来提升容器的隔离性。欢迎阅读","dir":"blog/sofa-channel-16-retrospect/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"c57953062af87158c42de61e48d1676f","permalink":"/blog/sofa-channel-16-retrospect/","publishdate":"2020-05-22T13:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-channel-16-retrospect/","summary":"","tags":["Kata Containers","SOFAChannel"],"title":"不得不说的云原生隔离性 | SOFAChannel#16 直播回顾","type":"blog","url":"/blog/sofa-channel-16-retrospect/","wordcount":0},{"author":"潘潘","categories":"SOFAChannel","content":"","date":1589958000,"description":"5 月 28 日周四晚 8 点，Service Mesh Webinar#1 线上直播。","dir":"activities/service-mesh-webinar-1/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"d146e6a876059c0f8da819f408add6fa","permalink":"/activities/service-mesh-webinar-1/","publishdate":"2020-05-20T15:00:00+08:00","readingtime":0,"relpermalink":"/activities/service-mesh-webinar-1/","summary":"","tags":["MOSN","Service Mesh Webinar"],"title":"Service Mesh Webinar#1：多点生活在 Service Mesh 上的实践","type":"activities","url":"/activities/service-mesh-webinar-1/","wordcount":0},{"author":"无在","categories":"MOSN","content":"","date":1589871600,"description":"如何实现透明高效的拦截也是 Service Mesh 设计中的一大难点，本文为大家介绍云原生网络代理 MOSN 是如何做到这一点的。","dir":"blog/mosn-transparent-hijacking/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"c2505ec6bd3034e6cf3222dca8e1b83e","permalink":"/blog/mosn-transparent-hijacking/","publishdate":"2020-05-19T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/mosn-transparent-hijacking/","summary":"","tags":["MOSN","Service Mesh"],"title":"云原生网络代理 MOSN 透明劫持技术解读 | 开源","type":"blog","url":"/blog/mosn-transparent-hijacking/","wordcount":0},{"author":"SOFA 团队","categories":"SOFA Weekly","content":"","date":1589533200,"description":"SOFA WEEKLY | 每周精选，筛选每周精华问答，同步开源进展，欢迎留言互动。","dir":"blog/sofa-weekly-20200515/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"f02bec7b5443778e602b655210ee33fb","permalink":"/blog/sofa-weekly-20200515/","publishdate":"2020-05-15T17:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-weekly-20200515/","summary":"","tags":["SOFA Weekly"],"title":"SOFA Weekly | SOFABoot\u0026SOFAHessian 发布、5/21 社区直播预告","type":"blog","url":"/blog/sofa-weekly-20200515/","wordcount":0},{"author":"敖小剑","categories":"Service Mesh","content":"","date":1589364000,"description":"Mecha 作为面向服务的分布式能力抽象层，是 Service Mesh 模式的自然进化版本，预计也将是云原生化和 Mesh 化的必然趋势，让我们将 Mesh 进行到底。","dir":"blog/mecha-carry-mesh-to-the-end/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"2ef4b817d0dc0018551a25d24b174ee0","permalink":"/blog/mecha-carry-mesh-to-the-end/","publishdate":"2020-05-13T18:00:00+08:00","readingtime":0,"relpermalink":"/blog/mecha-carry-mesh-to-the-end/","summary":"","tags":["Service Mesh"],"title":"Mecha：将 Mesh 进行到底","type":"blog","url":"/blog/mecha-carry-mesh-to-the-end/","wordcount":0},{"author":"高飞航","categories":"Service Mesh","content":"","date":1589266800,"description":"本文根据5月6日晚，陌陌中间件架构师高飞航的主题分享《陌陌的 Service Mesh 探索与实践》整理。","dir":"blog/momo-service-mesh-exploration-and-practice/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"9c4d2df383550d5412e3de24312862ed","permalink":"/blog/momo-service-mesh-exploration-and-practice/","publishdate":"2020-05-12T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/momo-service-mesh-exploration-and-practice/","summary":"","tags":["Service Mesh"],"title":"陌陌的 Service Mesh 探索与实践 - 直播回顾","type":"blog","url":"/blog/momo-service-mesh-exploration-and-practice/","wordcount":0},{"author":"SOFA 团队","categories":"SOFA Weekly","content":"","date":1588928400,"description":"SOFA WEEKLY | 每周精选，筛选每周精华问答，同步开源进展，欢迎留言互动。","dir":"blog/sofa-weekly-20200508/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"c743041c871c1b4fdd685334ab29add6","permalink":"/blog/sofa-weekly-20200508/","publishdate":"2020-05-08T17:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-weekly-20200508/","summary":"","tags":["SOFA Weekly"],"title":"SOFA Weekly | MOSN\u0026amp;SOFARPC 发布、社区活动报名","type":"blog","url":"/blog/sofa-weekly-20200508/","wordcount":0},{"author":"王旭","categories":"Kata Container","content":"","date":1588921200,"description":"隔离，让云原生基础设施更完美。","dir":"blog/kata-container-introduction-to-safe-containers/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"6075ee3441970bada70f11c633f4ba85","permalink":"/blog/kata-container-introduction-to-safe-containers/","publishdate":"2020-05-08T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/kata-container-introduction-to-safe-containers/","summary":"","tags":["Kata Container"],"title":"（含直播报名）Kata Containers 创始人：安全容器导论","type":"blog","url":"/blog/kata-container-introduction-to-safe-containers/","wordcount":0},{"author":"Committer 胡宗棠","categories":"SOFAJRaft","content":"","date":1588759200,"description":"继源码解析系列后，推出特性解析系列，本文为 SOFAJRaft 特性解析第一篇，主要介绍 SOFAJRaft 在 Leader 选举过程中的重要优化方案—一种半确定性的优先级选举机制。","dir":"blog/sofa-jraft-priority-election/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"d867df257326471e46ce05ed548f72e8","permalink":"/blog/sofa-jraft-priority-election/","publishdate":"2020-05-06T18:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-jraft-priority-election/","summary":"","tags":["SOFAJRaft","SOFAJRaft 特性解析"],"title":"蚂蚁金服 SOFAJRaft 优先级选举剖析 | 特性解析","type":"blog","url":"/blog/sofa-jraft-priority-election/","wordcount":0},{"author":"敖小剑","categories":"Service Mesh","content":"","date":1588143600,"description":"Service Mesh 和 API Gateway 之间的关系，是“泾渭分明”还是“兼容并进”？","dir":"blog/service-mesh-api-gateway-in-depth-discussion-of-relationships/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"17986a3e65f4db0f66b6ba707cf27a40","permalink":"/blog/service-mesh-api-gateway-in-depth-discussion-of-relationships/","publishdate":"2020-04-29T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/service-mesh-api-gateway-in-depth-discussion-of-relationships/","summary":"","tags":["Service Mesh","API Gateway "],"title":"Service Mesh 和 API Gateway 关系深度探讨","type":"blog","url":"/blog/service-mesh-api-gateway-in-depth-discussion-of-relationships/","wordcount":0},{"author":"卫恒","categories":"SOFATracer","content":"","date":1588068000,"description":"SOFATracer 埋点机制解析直播文字回顾。","dir":"blog/sofa-channel-15-retrospect/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"4e4c9d4539119eb12ece83c8228ee4a3","permalink":"/blog/sofa-channel-15-retrospect/","publishdate":"2020-04-28T18:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-channel-15-retrospect/","summary":"","tags":["SOFATracer","SOFAChannel"],"title":"分布式链路组件 SOFATracer 埋点机制解析 | SOFAChannel#15 直播整理","type":"blog","url":"/blog/sofa-channel-15-retrospect/","wordcount":0},{"author":"潘潘","categories":"SOFAChannel","content":"","date":1588057200,"description":"5 月 21 日周四晚 7 点，线上直播第 16 期。","dir":"activities/sofa-channel-16/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"4756bc76f718255ad5fc4fd172a706b4","permalink":"/activities/sofa-channel-16/","publishdate":"2020-04-28T15:00:00+08:00","readingtime":0,"relpermalink":"/activities/sofa-channel-16/","summary":"","tags":["SOFAChannel","Kata Container"],"title":"SOFAChannel#16：不得不说的云原生隔离性","type":"activities","url":"/activities/sofa-channel-16/","wordcount":0},{"author":"SOFA 团队","categories":"SOFA Weekly","content":"","date":1587722400,"description":"【04/20-04/24】 | 每周精选，筛选每周精华问答，同步开源进展，欢迎留言互动。","dir":"blog/sofa-weekly-20200424/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"455d22426589849b45f59083c641ee7c","permalink":"/blog/sofa-weekly-20200424/","publishdate":"2020-04-24T18:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-weekly-20200424/","summary":"","tags":["SOFA Weekly"],"title":"SOFA Weekly | Service Mesh 系列直播预告、Seata 发布","type":"blog","url":"/blog/sofa-weekly-20200424/","wordcount":0},{"author":"潘潘","categories":"SOFAChannel","content":"","date":1587114000,"description":"4 月 23 日周四晚 7 点，线上直播第 15 期。","dir":"activities/sofa-channel-15/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"e1323556a7e34b0937a8d3c1f6815a77","permalink":"/activities/sofa-channel-15/","publishdate":"2020-04-17T17:00:00+08:00","readingtime":0,"relpermalink":"/activities/sofa-channel-15/","summary":"","tags":["SOFAChannel","SOFATracer"],"title":"SOFAChannel#15：分布式链路组件 SOFATracer 埋点机制解析","type":"activities","url":"/activities/sofa-channel-15/","wordcount":0},{"author":"SOFA 团队","categories":"SOFA Weekly","content":"","date":1587106800,"description":"SOFA WEEKLY | 每周精选，筛选每周精华问答，同步开源进展，欢迎留言互动。","dir":"blog/sofa-weekly-20200417/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"1bb16db78404cb9d09dd18ec48374246","permalink":"/blog/sofa-weekly-20200417/","publishdate":"2020-04-17T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-weekly-20200417/","summary":"","tags":["SOFA Weekly"],"title":"SOFA Weekly | SOFATracer 直播预告、SOFAJRaft 组件发布","type":"blog","url":"/blog/sofa-weekly-20200417/","wordcount":0},{"author":"SOFA 团队","categories":"SOFA Weekly","content":"","date":1586509200,"description":"SOFA WEEKLY | 每周精选，筛选每周精华问答，同步开源进展，欢迎留言互动。","dir":"blog/sofa-weekly-20200410/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"9f805804c54d097bea99536c21da6387","permalink":"/blog/sofa-weekly-20200410/","publishdate":"2020-04-10T17:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-weekly-20200410/","summary":"","tags":["SOFA Weekly"],"title":"SOFA Weekly | SOFATracer 直播预告、SOFARegistry 解析系列合集、线上直播回顾合集","type":"blog","url":"/blog/sofa-weekly-20200410/","wordcount":0},{"author":"永鹏","categories":"SOFAChannel","content":"","date":1586437200,"description":"本文根据 SOFAChannel#14 直播分享整理，主题：云原生网络代理 MOSN 扩展机制解析。","dir":"blog/sofa-channel-14-retrospect/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"54f04c153ed4827819de6a6716ad46e2","permalink":"/blog/sofa-channel-14-retrospect/","publishdate":"2020-04-09T21:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-channel-14-retrospect/","summary":"","tags":["SOFAChannel","MOSN","Service Mesh"],"title":"云原生网络代理 MOSN 扩展机制解析 | SOFAChannel#14 直播整理","type":"blog","url":"/blog/sofa-channel-14-retrospect/","wordcount":0},{"author":"404P","categories":"SOFARegistry ","content":"","date":1586340000,"description":"本文介绍 SOFARegistry 分片算法和相关核心源码来展示蚂蚁金服是如何解决数据分片带来的节点上下线数据波动的问题。","dir":"blog/sofa-registry-dataserver-smooth-expansion-contraction/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"35c77b7278ad2675b56540b1f97ecf8f","permalink":"/blog/sofa-registry-dataserver-smooth-expansion-contraction/","publishdate":"2020-04-08T18:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-registry-dataserver-smooth-expansion-contraction/","summary":"","tags":["SOFARegistry ","剖析 | SOFARegistry 框架","SOFALab"],"title":"蚂蚁金服服务注册中心如何实现 DataServer 平滑扩缩容 | SOFARegistry 解析","type":"blog","url":"/blog/sofa-registry-dataserver-smooth-expansion-contraction/","wordcount":0},{"author":"SOFA 团队","categories":"SOFA Weekly","content":"","date":1585908000,"description":"【03/30-04/03】| 每周精选，筛选每周精华问答，同步开源进展，欢迎留言互动。","dir":"blog/sofa-weekly-20200403/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"e109585632269dffffd2819dd121da2b","permalink":"/blog/sofa-weekly-20200403/","publishdate":"2020-04-03T18:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-weekly-20200403/","summary":"","tags":["SOFA Weekly"],"title":"SOFA Weekly | MOSN 直播预告 \u0026 发布更新、Service Mesh 落地实践解析合辑","type":"blog","url":"/blog/sofa-weekly-20200403/","wordcount":0},{"author":"SOFA 团队","categories":"SOFA Weekly","content":"","date":1585299600,"description":"【03/23-03/27】 | 每周精选，筛选每周精华问答，同步开源进展，欢迎留言互动。","dir":"blog/sofa-weekly-0327/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"0c6b194e66eeb4c95efa4260e279bab7","permalink":"/blog/sofa-weekly-0327/","publishdate":"2020-03-27T17:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-weekly-0327/","summary":"","tags":["SOFA Weekly"],"title":"SOFA Weekly | MOSN 直播预告、本周直播回顾整理、SOFARegistry 发布","type":"blog","url":"/blog/sofa-weekly-0327/","wordcount":0},{"author":"潘潘","categories":"SOFAChannel","content":"","date":1585299600,"description":"4 月 9 日周四晚 7 点，线上直播第 14 期。","dir":"activities/sofa-channel-14/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"0e1d5c0ea19ec82218fbf675b891ee5a","permalink":"/activities/sofa-channel-14/","publishdate":"2020-03-27T17:00:00+08:00","readingtime":0,"relpermalink":"/activities/sofa-channel-14/","summary":"","tags":["SOFAChannel","MOSN"],"title":"SOFAChannel#14：云原生网络代理 MOSN 的扩展机制解析","type":"activities","url":"/activities/sofa-channel-14/","wordcount":0},{"author":"无钩","categories":"MOSN","content":"","date":1585227600,"description":"本文根据昨晚直播整理，主要分享云原生网络代理 MOSN 多协议机制解析，并介绍对应私有协议快速接入实践案例以及对其实现多协议低成本接入的设计进行解读。","dir":"blog/sofa-channel-13-retrospect/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"683f36d11af9e48e910e694bf1a119fc","permalink":"/blog/sofa-channel-13-retrospect/","publishdate":"2020-03-26T21:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-channel-13-retrospect/","summary":"","tags":["MOSN","Service Mesh","SOFAChannel"],"title":"云原生网络代理 MOSN 多协议机制解析 | SOFAChannel#13 直播整理","type":"blog","url":"/blog/sofa-channel-13-retrospect/","wordcount":0},{"author":"敖小剑","categories":"Service Mesh","content":"","date":1585130400,"description":"本文收集并整理了一下 UDPA 目前的情况和信息，给大家介绍一下 UDPA 目前最新的进展。","dir":"blog/service-mesh-api-udpa-follow-up/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"7293f926580393ddac18da73da056d07","permalink":"/blog/service-mesh-api-udpa-follow-up/","publishdate":"2020-03-25T18:00:00+08:00","readingtime":0,"relpermalink":"/blog/service-mesh-api-udpa-follow-up/","summary":"","tags":["Service Mesh"],"title":"Service Mesh 通用数据平面 API（UDPA）最新进展深度介绍","type":"blog","url":"/blog/service-mesh-api-udpa-follow-up/","wordcount":0},{"author":"SOFA 团队","categories":"SOFA Weekly","content":"","date":1584691200,"description":"【03/16-03/20】 | 每周精选，筛选每周精华问答，同步开源进展，欢迎留言互动。","dir":"blog/sofa-weekly-20200320/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"e2add88606de2be4ddcf9c9ac2e4bbef","permalink":"/blog/sofa-weekly-20200320/","publishdate":"2020-03-20T16:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-weekly-20200320/","summary":"","tags":["SOFA Weekly"],"title":"SOFA Weekly | MOSN 直播预告、SOFAArk\u0026SOFATracer 解析文章合集","type":"blog","url":"/blog/sofa-weekly-20200320/","wordcount":0},{"author":"盲僧","categories":"SOFAArk","content":"","date":1584612000,"description":"本文主要介绍下 SOFAArk Biz 包的打包插件，帮助大家更好的去理解 Biz 包的结构","dir":"blog/sofa-ark-maven- packaging-plugins/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"dd530d14f20a460c2f49300c0d784c32","permalink":"/blog/sofa-ark-maven-packaging-plugins/","publishdate":"2020-03-19T18:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-ark-maven-packaging-plugins/","summary":"","tags":["SOFAArk","SOFAArkLab"],"title":"蚂蚁金服轻量级类隔离框架 Maven 打包插件解析 | SOFAArk 源码解析","type":"blog","url":"/blog/sofa-ark-maven-packaging-plugins/","wordcount":0},{"author":"卫恒","categories":"SOFATracer","content":"","date":1584439200,"description":"本文将对 SOFATracer 中使用 Disruptor 来进行日志输出的代码进行了具体的分析。","dir":"blog/sofa-trcaer-disruptor-practice/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"a97d804a20a7af180c889c55210ab2fa","permalink":"/blog/sofa-trcaer-disruptor-practice/","publishdate":"2020-03-17T18:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-trcaer-disruptor-practice/","summary":"","tags":["SOFATracer"],"title":"蚂蚁金服分布式链路跟踪组件 SOFATracer 中 Disruptor 实践（含源码）","type":"blog","url":"/blog/sofa-trcaer-disruptor-practice/","wordcount":0},{"author":"潘潘","categories":"SOFAChannel","content":"","date":1584349200,"description":"3 月 26 日周四晚 7 点，线上直播第 13 期。","dir":"activities/sofa-channel-13/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"ba88bba5176867c90fb18dc045408d84","permalink":"/activities/sofa-channel-13/","publishdate":"2020-03-16T17:00:00+08:00","readingtime":0,"relpermalink":"/activities/sofa-channel-13/","summary":"","tags":["SOFAChannel","MOSN"],"title":"SOFAChannel#13：云原生网络代理 MOSN 的多协议机制解析","type":"activities","url":"/activities/sofa-channel-13/","wordcount":0},{"author":"SOFA 团队","categories":"SOFA Weekly","content":"","date":1584086400,"description":"【03/09-03/13】| 每周精选，筛选每周精华问答，同步开源进展，欢迎留言互动。","dir":"blog/sofa-weekly-20200313/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"cd22bd67fe25923bca65eae188627da8","permalink":"/blog/sofa-weekly-20200313/","publishdate":"2020-03-13T16:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-weekly-20200313/","summary":"","tags":["SOFA Weekly"],"title":"SOFA Weekly | 3/26 直播预告、多个组件发布、云原生团队校招社招信息汇总","type":"blog","url":"/blog/sofa-weekly-20200313/","wordcount":0},{"author":"仁空","categories":"SOFA Weekly","content":"","date":1584016200,"description":"分布式事务 TCC、FMT 模式在蚂蚁金服内部的实践分享。","dir":"blog/sofa-channel-12-retrospect/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"1aaf09602548f4204f00c7b02260e180","permalink":"/blog/sofa-channel-12-retrospect/","publishdate":"2020-03-12T20:30:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-channel-12-retrospect/","summary":"","tags":["SOFAChannel","分布式事务"],"title":"蚂蚁金服分布式事务实践解析 | SOFAChannel#12 直播整理","type":"blog","url":"/blog/sofa-channel-12-retrospect/","wordcount":0},{"author":"SOFA 团队","categories":"SOFA Weekly","content":"","date":1583481600,"description":"SOFA WEEKLY | 每周精选，筛选每周精华问答，同步开源进展，欢迎留言互动。","dir":"blog/sofa-weekly-20200306/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"762ff425feef89f406716a6c0c4fff9d","permalink":"/blog/sofa-weekly-20200306/","publishdate":"2020-03-06T16:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-weekly-20200306/","summary":"","tags":["SOFA Weekly"],"title":"SOFA Weekly | SOFARegistry 发版以及源码系列合辑、SOFAArk 发版、3/12直播预告","type":"blog","url":"/blog/sofa-weekly-20200306/","wordcount":0},{"author":"SOFA 团队","categories":"云原生","content":"","date":1583395200,"description":"云原生应用 PaaS 平台的建设实践","dir":"blog/distributed-architecture-and-cloud-native/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"6c1ff3975ace44ac5189b1f845a43fcb","permalink":"/blog/distributed-architecture-and-cloud-native/","publishdate":"2020-03-05T16:00:00+08:00","readingtime":0,"relpermalink":"/blog/distributed-architecture-and-cloud-native/","summary":"","tags":["云原生"],"title":"技术破局：如何实现分布式架构与云原生？| 含 ppt 下载","type":"blog","url":"/blog/distributed-architecture-and-cloud-native/","wordcount":0},{"author":"明不二","categories":"SOFARegistry","content":"","date":1583224200,"description":" 本文为《剖析 | SOFARegistry 框架》第七篇，作者明不二","dir":"blog/sofa-registry-data-consistency/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"356cd2beadad494a22e2d480948fce8d","permalink":"/blog/sofa-registry-data-consistency/","publishdate":"2020-03-03T16:30:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-registry-data-consistency/","summary":"","tags":["SOFARegistry","剖析 | SOFARegistry 框架","SOFALab"],"title":"服务注册中心数据一致性方案分析 | SOFARegistry 解析","type":"blog","url":"/blog/sofa-registry-data-consistency/","wordcount":0},{"author":"潘潘","categories":"SOFALab","content":"","date":1583208000,"description":"","dir":"activities/sofa-boot-lab/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"ee08908ed6148190ca7ebcc0cdc5a3fc","permalink":"/activities/sofa-boot-lab/","publishdate":"2020-03-03T12:00:00+08:00","readingtime":0,"relpermalink":"/activities/sofa-boot-lab/","summary":"","tags":["SOFALab","SOFABoot","剖析 | SOFABoot 框架"],"title":"\u003cSOFA:BootLab/\u003e","type":"activities","url":"/activities/sofa-boot-lab/","wordcount":0},{"author":"SOFA 团队","categories":"SOFA Weekly","content":"","date":1582873200,"description":"【02/24-02/28】| 每周精选，筛选每周精华问答，同步开源进展，欢迎留言互动。","dir":"blog/sofa-weekly-20200228/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"825d23ac19f5c5ae4cfaca517a9a87fd","permalink":"/blog/sofa-weekly-20200228/","publishdate":"2020-02-28T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-weekly-20200228/","summary":"","tags":["SOFA Weekly"],"title":"SOFA Weekly | MOSN 发布、直播系列整理、0312直播预告","type":"blog","url":"/blog/sofa-weekly-20200228/","wordcount":0},{"author":"SOFA 团队","categories":"SOFAArk","content":"","date":1582700400,"description":"本文根据 SOFAChannel#11 直播分享整理。","dir":"blog/sofa-channel-11-retrospect/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"a3216377eb47b27325f279f124c2bfd8","permalink":"/blog/sofa-channel-11-retrospect/","publishdate":"2020-02-26T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-channel-11-retrospect/","summary":"","tags":["SOFAArk","SOFAChannel"],"title":"从一个例子开始体验轻量级类隔离容器 SOFAArk | SOFAChannel#11 直播整理","type":"blog","url":"/blog/sofa-channel-11-retrospect/","wordcount":0},{"author":"SOFA 团队","categories":"SOFA Weekly","content":"","date":1582268400,"description":"【02/17-02/23】| 每周精选，筛选每周精华问答，同步开源进展，欢迎留言互动。","dir":"blog/sofa-weekly-20200221/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"b82b9b4c82bc3905d736962bd157238c","permalink":"/blog/sofa-weekly-20200221/","publishdate":"2020-02-21T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-weekly-20200221/","summary":"","tags":["SOFA Weekly"],"title":"SOFA Weekly | 3/12直播预告、SOFARPC、SOFABoot 组件发布","type":"blog","url":"/blog/sofa-weekly-20200221/","wordcount":0},{"author":"盲僧","categories":"SOFABoot","content":"","date":1582016400,"description":"本文将从 Java 的日志体系谈起，对 JCL、SLF4J 两个经典的日志框架做一个阐述，引出 SOFABoot 开源的日志隔离框架 sofa-common-tools，并且有实战 Demo，能够帮助我们快速上手和了解这款框架的使用和作用，最后从源码角度对其进行分析，不仅知其然，还要知其所以然。","dir":"blog/sofa-boot- log-isolation/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"a428e36a94180c1e33920579423b4402","permalink":"/blog/sofa-boot-log-isolation/","publishdate":"2020-02-18T17:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-boot-log-isolation/","summary":"","tags":["SOFABoot","剖析 | SOFABoot 框架","SOFALab"],"title":"蚂蚁金服研发框架日志隔离解析 | SOFABoot 框架剖析","type":"blog","url":"/blog/sofa-boot-log-isolation/","wordcount":0},{"author":"SOFA 团队","categories":"Service Mesh","content":"","date":1581667200,"description":"2020 年 2 月 4 日到 2 月11 日，ServiceMesher 社区发起了 Service Mesh 终端用户调查，以下为问卷调查结果。","dir":"service-mesh-end-user-survey-report/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"894b42fb32c6c3c39986e020fd53a13e","permalink":"/service-mesh-end-user-survey-report/","publishdate":"2020-02-14T16:00:00+08:00","readingtime":0,"relpermalink":"/service-mesh-end-user-survey-report/","summary":"","tags":["Service Mesh"],"title":"Service Mesh 终端用户调查报告","type":"page","url":"/service-mesh-end-user-survey-report/","wordcount":0},{"author":"SOFA 团队","categories":"SOFA Weekly","content":"","date":1581667200,"description":"【02/10-02/14】| 每周精选，筛选每周精华问答，同步开源进展，欢迎留言互动。","dir":"blog/sofa-weekly-20200214/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"3deaf12dd1b6589f41c57291d9061534","permalink":"/blog/sofa-weekly-20200214/","publishdate":"2020-02-14T16:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-weekly-20200214/","summary":"","tags":["SOFA Weekly"],"title":"SOFA Weekly | 2/13直播回顾、3/12直播预告、SOFATracer 发版","type":"blog","url":"/blog/sofa-weekly-20200214/","wordcount":0},{"author":"潘潘","categories":"SOFAChannel","content":"","date":1581498000,"description":"3 月 12 日周四晚 7 点，线上直播第 12 期。","dir":"activities/sofa-channel-12/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"c80a24fd4e76747f0ed57c139a2bfae9","permalink":"/activities/sofa-channel-12/","publishdate":"2020-02-12T17:00:00+08:00","readingtime":0,"relpermalink":"/activities/sofa-channel-12/","summary":"","tags":["SOFAChannel","分布式事务"],"title":"SOFAChannel#12：蚂蚁金服分布式事务实践解析","type":"activities","url":"/activities/sofa-channel-12/","wordcount":0},{"author":"纶珥","categories":"SOFALab","content":"","date":1581321600,"description":"本文为《剖析 | SOFABoot 框架》第一篇，主要介绍 SOFABoot 的基础特效。","dir":"blog/sofa-boot-overview/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"d1a5fa7654f26a159c65061d4f7712d7","permalink":"/blog/sofa-boot-overview/","publishdate":"2020-02-10T16:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-boot-overview/","summary":"","tags":["SOFALab","剖析 | SOFABoot 框架","SOFABoot"],"title":"蚂蚁金服研发框架总览 | SOFABoot 框架剖析","type":"blog","url":"/blog/sofa-boot-overview/","wordcount":0},{"author":"SOFA 团队","categories":"SOFA Weekly","content":"","date":1581066000,"description":"【02/03 - 02/07】 每周精选，筛选每周精华问答，同步开源进展，欢迎留言互动。","dir":"blog/sofa-weekly-20200207/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"4e10f9b05976b3f0f8ce4d9128fa8d79","permalink":"/blog/sofa-weekly-20200207/","publishdate":"2020-02-07T17:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-weekly-20200207/","summary":"","tags":["SOFA Weekly"],"title":"SOFA Weekly | Service Mesh 落地系列文章、2/13直播预告","type":"blog","url":"/blog/sofa-weekly-20200207/","wordcount":0},{"author":"柑橘、西经、柏翘","categories":"Service mesh","content":"","date":1579514400,"description":" 本文为《蚂蚁金服 Service Mesh 大规模落地系列》最后 一篇 - 质量篇，结合蚂蚁金服 Mesh 化落地质量保障落地的思考，给大家带来一些质量保障的分享。","dir":"blog/service-mesh-practice-in-production-at-ant-financial-part8-quantity/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"8dfd6e1dabd16bc85d9876ce9764e3ab","permalink":"/blog/service-mesh-practice-in-production-at-ant-financial-part8-quantity/","publishdate":"2020-01-20T18:00:00+08:00","readingtime":0,"relpermalink":"/blog/service-mesh-practice-in-production-at-ant-financial-part8-quantity/","summary":"","tags":["Service mesh","Service Mesh 落地实践"],"title":"蚂蚁金服 Service Mesh 大规模落地系列 - 质量篇","type":"blog","url":"/blog/service-mesh-practice-in-production-at-ant-financial-part8-quantity/","wordcount":0},{"author":"嘉祁","categories":"Service mesh","content":"","date":1579514400,"description":" 本文根据蚂蚁金服中间件 SRE 技术专家黄家琦（嘉祁）于 Service Mesh Meetup#9 杭州站上的分享整理。","dir":"blog/service-mesh-meetup-9-retrospect-technical-risk-practice/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"7e1941c7099e109de92394b49df59a2b","permalink":"/blog/service-mesh-meetup-9-retrospect-technical-risk-practice/","publishdate":"2020-01-20T18:00:00+08:00","readingtime":0,"relpermalink":"/blog/service-mesh-meetup-9-retrospect-technical-risk-practice/","summary":"","tags":["Service mesh","Service Mesh Meetup"],"title":"蚂蚁金服 Service Mesh 技术风险思考和实践","type":"blog","url":"/blog/service-mesh-meetup-9-retrospect-technical-risk-practice/","wordcount":0},{"author":"潘潘","categories":"SOFAChannel","content":"","date":1579251600,"description":"2 月 13 日周四晚 7 点，线上直播第 11 期。","dir":"activities/sofa-channel-11/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"b110f76087d52e5c6d8ccbe31c76a7f5","permalink":"/activities/sofa-channel-11/","publishdate":"2020-01-17T17:00:00+08:00","readingtime":0,"relpermalink":"/activities/sofa-channel-11/","summary":"","tags":["SOFAChannel","SOFAArk"],"title":"SOFAChannel#11：从一个例子开始体验轻量级类隔离容器 SOFAArk","type":"activities","url":"/activities/sofa-channel-11/","wordcount":0},{"author":"SOFA 团队","categories":"SOFA Weekly","content":"","date":1579248000,"description":"【01/13-01/17】 | 每周精选，筛选每周精华问答，同步开源进展，欢迎留言互动。","dir":"blog/sofa-weekly-20200117/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"2fd8dd14cb119400890ef134622ad4d5","permalink":"/blog/sofa-weekly-20200117/","publishdate":"2020-01-17T16:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-weekly-20200117/","summary":"","tags":["SOFA Weekly"],"title":" SOFA Weekly | 2.13直播预告、KubeCon NA2019 回顾","type":"blog","url":"/blog/sofa-weekly-20200117/","wordcount":0},{"author":"何子波、金敏","categories":null,"content":"","date":1579176000,"description":" 本文介绍了如何快速上手使用 Java 开发 Operator，感兴趣的读者可以根据官方实例在本地开发环境体验。","dir":"blog/java-kubernetes-operator-kubecon-na2019/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"4af2ef3082aeed080e87501fd71134d9","permalink":"/blog/java-kubernetes-operator-kubecon-na2019/","publishdate":"2020-01-16T20:00:00+08:00","readingtime":0,"relpermalink":"/blog/java-kubernetes-operator-kubecon-na2019/","summary":"","tags":["Kubernetes"],"title":" 开箱即用的 Java Kubernetes Operator 运行时","type":"blog","url":"/blog/java-kubernetes-operator-kubecon-na2019/","wordcount":0},{"author":"贾岛","categories":"Service Mesh","content":"","date":1579078800,"description":" 本次分享，将从蚂蚁金服 API 网关发展历程来看，Mesh 化的网关架构是怎样的、解决了什么问题、双十一的实践表现以及我们对未来的思考。","dir":"blog/service-mesh-meetup-9-retrospect-api-gateway-mesh/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"370ccd30a2edcf559eb2c82976bcb8a0","permalink":"/blog/service-mesh-meetup-9-retrospect-api-gateway-mesh/","publishdate":"2020-01-15T17:00:00+08:00","readingtime":0,"relpermalink":"/blog/service-mesh-meetup-9-retrospect-api-gateway-mesh/","summary":"","tags":["Service Mesh","MOSN","Service Mesh Meetup"],"title":"蚂蚁金服 API Gateway Mesh 思考与实践","type":"blog","url":"/blog/service-mesh-meetup-9-retrospect-api-gateway-mesh/","wordcount":0},{"author":"SOFA 团队","categories":"SOFA Weekly","content":"","date":1578643200,"description":"【01/05-01/10】 | 每周精选，筛选每周精华问答，同步开源进展，欢迎留言互动。","dir":"blog/sofa-weekly-20200110/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"1143431da4314982069d5d5465391dc5","permalink":"/blog/sofa-weekly-20200110/","publishdate":"2020-01-10T16:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-weekly-20200110/","summary":"","tags":["SOFA Weekly"],"title":"SOFA Weekly | SOFABoot 发版、直播回顾、SOFAArkLab共建启动","type":"blog","url":"/blog/sofa-weekly-20200110/","wordcount":0},{"author":"屹远","categories":"Seata","content":"","date":1578574800,"description":"本文根据 SOFAChannel#10 直播分享整理，将从金融分布式应用开发的痛点出发，结合 Saga 分布式事务的理论和使用场景，讲解如何使用 Seata Saga 状态机来进行服务编排和分布式事务处理，构建更有弹性的金融应用","dir":"blog/sofa-channel-10-retrospect/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"2ba15ca1c710e1be2e6758950246d1ee","permalink":"/blog/sofa-channel-10-retrospect/","publishdate":"2020-01-09T21:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-channel-10-retrospect/","summary":"","tags":["Seata","SOFAChannel"],"title":"Seata 长事务解决方案 Saga 模式 | SOFAChannel#10 回顾","type":"blog","url":"/blog/sofa-channel-10-retrospect/","wordcount":0},{"author":"卫恒","categories":"SOFAArk","content":"","date":1578398400,"description":" 本文为《剖析 | SOFAArk 源码》第一篇，作者卫恒","dir":"blog/sofa-ark-overview/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"56bc84e9737dbad9c77b9700b12bf63d","permalink":"/blog/sofa-ark-overview/","publishdate":"2020-01-07T20:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-ark-overview/","summary":"","tags":["SOFAArk","剖析 | SOFAArk 源码 ","SOFALab"],"title":"蚂蚁金服轻量级类隔离框架概述 | SOFAArk 源码解析","type":"blog","url":"/blog/sofa-ark-overview/","wordcount":0},{"author":"SOFA 团队","categories":"SOFA Weekly","content":"","date":1578038400,"description":"【12/31-01/03】 | 每周精选，筛选每周精华问答，同步开源进展，欢迎留言互动。","dir":"blog/sofa-weekly-20200103/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"aa8f76ccca9d7d700e3d9b16c2b0df21","permalink":"/blog/sofa-weekly-20200103/","publishdate":"2020-01-03T16:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-weekly-20200103/","summary":"","tags":["SOFA Weekly"],"title":"SOFA Weekly | 1.9直播预告、MOSN 发版、Saga 状态机设计器视频教程","type":"blog","url":"/blog/sofa-weekly-20200103/","wordcount":0},{"author":"米麒麟","categories":"SOFARegistry","content":"","date":1577955600,"description":" 本文为《剖析 | SOFARegistry 框架》第六篇，作者米麒麟","dir":"blog/sofa-registry-service-offline-notification/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"289ee5ccb8ee61cdd0a42ce60874284b","permalink":"/blog/sofa-registry-service-offline-notification/","publishdate":"2020-01-02T17:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-registry-service-offline-notification/","summary":"","tags":["SOFARegistry","剖析 | SOFARegistry 框架","SOFALab"],"title":"服务注册中心如何实现秒级服务上下线通知 | SOFARegistry 解析","type":"blog","url":"/blog/sofa-registry-service-offline-notification/","wordcount":0},{"author":"潘潘","categories":"SOFAChannel","content":"","date":1577765400,"description":"1 月 9 日周四晚 7 点，线上直播第 10 期。","dir":"activities/sofa-channel-10/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"a2f7bb983d4cbad1bda1a48a3c99abb7","permalink":"/activities/sofa-channel-10/","publishdate":"2019-12-31T12:10:00+08:00","readingtime":0,"relpermalink":"/activities/sofa-channel-10/","summary":"","tags":["SOFAChannel","Seata"],"title":"SOFAChannel#10：分布式事务 Seata 长事务解决方案 Saga 模式详解","type":"activities","url":"/activities/sofa-channel-10/","wordcount":0},{"author":"董一韬、王轲","categories":null,"content":"","date":1577707200,"description":" 本文基于 Knative 构建一个优秀的 Serverless 计算平台，详细分析如何用独特的技术，解决性能、容量、成本三大问题。","dir":"blog/knative-serverless-kubecon-na2019/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"ceeb7bee775048b0c23fe553fc5cd335","permalink":"/blog/knative-serverless-kubecon-na2019/","publishdate":"2019-12-30T20:00:00+08:00","readingtime":0,"relpermalink":"/blog/knative-serverless-kubecon-na2019/","summary":"","tags":["Knative","Serverless"],"title":" 基于 Knative 打造生产级 Serverless 平台 | KubeCon NA2019","type":"blog","url":"/blog/knative-serverless-kubecon-na2019/","wordcount":0},{"author":"SOFA 团队","categories":"SOFA Weekly","content":"","date":1577430000,"description":"SOFA WEEKLY | 每周精选，筛选每周精华问答，同步开源进展，欢迎留言互动。","dir":"blog/sofa-weekly-20191227/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"026916366f7c75abaf698dabaed81047","permalink":"/blog/sofa-weekly-20191227/","publishdate":"2019-12-27T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-weekly-20191227/","summary":"","tags":["SOFA Weekly"],"title":"SOFA Weekly | 明日活动信息、社区方案上线、落地系列阅读","type":"blog","url":"/blog/sofa-weekly-20191227/","wordcount":0},{"author":"封尘","categories":"Service mesh","content":"","date":1577271600,"description":" 本文为《蚂蚁金服 Service Mesh 大规模落地系列》第七篇 - 控制面篇，聚焦控制面核心组件 Pilot 和 Citadel，分享蚂蚁金服双十一控制面如何管理并服务好全站 Sidecar。","dir":"blog/service-mesh-practice-in-production-at-ant-financial-part7-control-plane/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"f7e9ad6fafaa6db46864cf0704d2b145","permalink":"/blog/service-mesh-practice-in-production-at-ant-financial-part7-control-plane/","publishdate":"2019-12-25T19:00:00+08:00","readingtime":0,"relpermalink":"/blog/service-mesh-practice-in-production-at-ant-financial-part7-control-plane/","summary":"","tags":["Service mesh","Service Mesh 落地实践"],"title":"蚂蚁金服 Service Mesh 大规模落地系列 - 控制面篇","type":"blog","url":"/blog/service-mesh-practice-in-production-at-ant-financial-part7-control-plane/","wordcount":0},{"author":"徐迪、张晓宇","categories":null,"content":"","date":1577188800,"description":" 本文主要介绍了什么是 Sidecar 容器，蚂蚁金服和阿里巴巴集团的通用场景，以及我们是如何解决这些挑战的。","dir":"blog/sidacar-kubecon-na2019/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"db0769ed83607e39fba6020d4eba87b8","permalink":"/blog/sidacar-kubecon-na2019/","publishdate":"2019-12-24T20:00:00+08:00","readingtime":0,"relpermalink":"/blog/sidacar-kubecon-na2019/","summary":"","tags":["Sidecar 容器"],"title":" 将 Sidecar 容器带入新的阶段 | KubeCon NA 2019","type":"blog","url":"/blog/sidacar-kubecon-na2019/","wordcount":0},{"author":"SOFA 团队","categories":"SOFA Weekly","content":"","date":1576825200,"description":"SOFA WEEKLY | 每周精选，筛选每周精华问答，同步开源进展，欢迎留言互动。","dir":"blog/sofa-weekly-20191220/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"c9e61e735545e48bd341dd6da7310440","permalink":"/blog/sofa-weekly-20191220/","publishdate":"2019-12-20T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-weekly-20191220/","summary":"","tags":["SOFA Weekly"],"title":"SOFA Weekly | MOSN 配置文档、SOFABolt 等组件发布、社区活动预告","type":"blog","url":"/blog/sofa-weekly-20191220/","wordcount":0},{"author":"十倍","categories":null,"content":"","date":1576670400,"description":" 本文整理自 2019 Elastic Dev Day 现场分享，主要给大家分享蚂蚁金服在向量检索上的探索。","dir":"blog/antfin-zsearch-vector-search/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"194a0b7104c5147b2fd54e8c74b17e22","permalink":"/blog/antfin-zsearch-vector-search/","publishdate":"2019-12-18T20:00:00+08:00","readingtime":0,"relpermalink":"/blog/antfin-zsearch-vector-search/","summary":"","tags":["ZSearch"],"title":" 蚂蚁金服 ZSearch 在向量检索上的探索","type":"blog","url":"/blog/antfin-zsearch-vector-search/","wordcount":0},{"author":"应明","categories":"Service mesh","content":"","date":1576501200,"description":" 本文着重从 MOSN（Sidecar Proxy）的运维和风险管控方面，分享我们的实践经验。","dir":"blog/service-mesh-practice-in-production-at-ant-financial-part6-operator/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"3528d4d6bd82bd170eccd20d98f5f7e2","permalink":"/blog/service-mesh-practice-in-production-at-ant-financial-part6-operator/","publishdate":"2019-12-16T21:00:00+08:00","readingtime":0,"relpermalink":"/blog/service-mesh-practice-in-production-at-ant-financial-part6-operator/","summary":"","tags":["Service mesh","Service Mesh 落地实践"],"title":" 蚂蚁金服 Service Mesh 大规模落地系列 - Operator 篇","type":"blog","url":"/blog/service-mesh-practice-in-production-at-ant-financial-part6-operator/","wordcount":0},{"author":"SOFA 团队","categories":"SOFA Weekly","content":"","date":1576220400,"description":"SOFA WEEKLY | 每周精选，筛选每周精华问答，同步开源进展，欢迎留言互动。","dir":"blog/sofa-weekly-20191213/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"37b96cc1a849775521b4d2b78d6602ce","permalink":"/blog/sofa-weekly-20191213/","publishdate":"2019-12-13T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-weekly-20191213/","summary":"","tags":["SOFA Weekly"],"title":"活动报名、本周 QA、组件发布 | SOFA Weekly","type":"blog","url":"/blog/sofa-weekly-20191213/","wordcount":0},{"author":"潘潘","categories":"Service Mesh","content":"","date":1576051200,"description":"本次 Meetup 与滴滴联合举办，将深入 Service Mesh 的落地实践，并带领大家探索 Service Mesh 在更广阔领域的应用。","dir":"activities/service-mesh-meetup-9/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"a7103ed15ed823b9156082c37b7d464a","permalink":"/activities/service-mesh-meetup-9/","publishdate":"2019-12-11T16:00:00+08:00","readingtime":0,"relpermalink":"/activities/service-mesh-meetup-9/","summary":"","tags":["Meetup","Service Mesh"],"title":"Service Mesh Meetup#9 杭州站：To Infinity and Beyond","type":"activities","url":"/activities/service-mesh-meetup-9/","wordcount":0},{"author":"改之","categories":"Service mesh","content":"","date":1575982800,"description":" 本篇文章通过介绍当前蚂蚁金服数据访问层遇到的问题，解决的思路，演进的方向三个方面，期望能够用阐述下 DB Mesh 发展的一些思考并让更多同学认识到 DB Mesh。","dir":"blog/ant-financial-db-mesh-explore-practice/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"9732786e2e2be0688d1e6a594838f87e","permalink":"/blog/ant-financial-db-mesh-explore-practice/","publishdate":"2019-12-10T21:00:00+08:00","readingtime":0,"relpermalink":"/blog/ant-financial-db-mesh-explore-practice/","summary":"","tags":["Service mesh","DB Mesh"],"title":"蚂蚁金服 DB Mesh 的演进之路","type":"blog","url":"/blog/ant-financial-db-mesh-explore-practice/","wordcount":0},{"author":"SOFA 团队","categories":"SOFA Weekly","content":"","date":1575615600,"description":"SOFA WEEKLY | 每周精选，筛选每周精华问答，同步开源进展，欢迎留言互动。","dir":"blog/sofa-weekly-20191206/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"aa9ec52b9b85a6c8830ff752423d1248","permalink":"/blog/sofa-weekly-20191206/","publishdate":"2019-12-06T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-weekly-20191206/","summary":"","tags":["SOFA Weekly"],"title":"SOFA Weekly | 每周精选【12/2 - 12/6】","type":"blog","url":"/blog/sofa-weekly-20191206/","wordcount":0},{"author":"曹寅","categories":"Kubernetes","content":"","date":1575464400,"description":"本文主要介绍 Kubernetes 在蚂蚁金服的使用情况，双十一大促对 Kubernetes 带来史无前例的挑战以及我们的最佳实践。","dir":"blog/kubernetes-practice-antfinal-shopping-festival/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"5e1572fd3da2309cb49050bc05e24450","permalink":"/blog/kubernetes-practice-antfinal-shopping-festival/","publishdate":"2019-12-04T21:00:00+08:00","readingtime":0,"relpermalink":"/blog/kubernetes-practice-antfinal-shopping-festival/","summary":"","tags":["Kubernetes"],"title":"深入 Kubernetes 的“无人区” — 蚂蚁金服双十一的调度系统","type":"blog","url":"/blog/kubernetes-practice-antfinal-shopping-festival/","wordcount":0},{"author":"齐天","categories":"Service mesh","content":"","date":1575291600,"description":"Service Mesh 是蚂蚁金服下一代架构的核心，经过了2年的沉淀，我们探索出了一套切实可行的方案并最终通过了双十一的考验。本文主要分享在当下『路口』，我们在产品设计上的思考和实践。","dir":"blog/service-mesh-practice-in-production-at-ant-financial-wushi/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"30414154356f38408eac8044657b5d63","permalink":"/blog/service-mesh-practice-in-production-at-ant-financial-wushi/","publishdate":"2019-12-02T21:00:00+08:00","readingtime":0,"relpermalink":"/blog/service-mesh-practice-in-production-at-ant-financial-wushi/","summary":"","tags":["Service mesh","Service Mesh 落地实践"],"title":"Service Mesh 在『路口』的产品思考与实践：务实是根本","type":"blog","url":"/blog/service-mesh-practice-in-production-at-ant-financial-wushi/","wordcount":0},{"author":"SOFA 团队","categories":"SOFA Weekly","content":"","date":1575010800,"description":"SOFA WEEKLY | 每周精选，筛选每周精华问答，同步开源进展，欢迎留言互动。","dir":"blog/sofa-weekly-20191129/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"af340bf3bee03aa71221229aee4c986b","permalink":"/blog/sofa-weekly-20191129/","publishdate":"2019-11-29T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-weekly-20191129/","summary":"","tags":["SOFA Weekly"],"title":"SOFA Weekly | 每周精选【11/25 - 11/29】","type":"blog","url":"/blog/sofa-weekly-20191129/","wordcount":0},{"author":"鲁直、碧远","categories":"Service mesh","content":"","date":1574946000,"description":" 聚焦 RPC 层面的设计和改造方案，本次将分享蚂蚁金服双十一核心应用是如何将现有的微服务体系平滑过渡到 Service Mesh 架构下并降低大促成本。","dir":"blog/service-mesh-practice-in-production-at-ant-financial-part4-rpc/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"3d67d3c4d38ced6f9de8a92364c0827c","permalink":"/blog/service-mesh-practice-in-production-at-ant-financial-part4-rpc/","publishdate":"2019-11-28T21:00:00+08:00","readingtime":0,"relpermalink":"/blog/service-mesh-practice-in-production-at-ant-financial-part4-rpc/","summary":"","tags":["Service mesh","Service Mesh 落地实践"],"title":"蚂蚁金服 Service Mesh 大规模落地系列 - RPC 篇","type":"blog","url":"/blog/service-mesh-practice-in-production-at-ant-financial-part4-rpc/","wordcount":0},{"author":"悟尘","categories":"Service mesh","content":"","date":1574946000,"description":" 本文结合无线网关的发展历程，解读进行 Service Mesh 改造的缘由和价值，同时介绍在双十一落地过程中如何保障业务流量平滑迁移至新架构下的 Mesh 网关。","dir":"blog/service-mesh-practice-in-production-at-ant-financial-part5-gateway/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"a51651ca16ad1df8e867f4e25296c50b","permalink":"/blog/service-mesh-practice-in-production-at-ant-financial-part5-gateway/","publishdate":"2019-11-28T21:00:00+08:00","readingtime":0,"relpermalink":"/blog/service-mesh-practice-in-production-at-ant-financial-part5-gateway/","summary":"","tags":["Service mesh","Service Mesh 落地实践"],"title":"蚂蚁金服 Service Mesh 大规模落地系列 - 网关篇","type":"blog","url":"/blog/service-mesh-practice-in-production-at-ant-financial-part5-gateway/","wordcount":0},{"author":"嘉祁","categories":"Service mesh","content":"","date":1574859600,"description":" 本文将主要分享大规模服务网格在蚂蚁金服当前体量下落地到支撑蚂蚁金服双十一大促过程中，运维角度所面临的挑战与演进。","dir":"blog/service-mesh-practice-in-production-at-ant-financial-part3-operation/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"b4428f1c979dfa574a7ec8b4d96bc191","permalink":"/blog/service-mesh-practice-in-production-at-ant-financial-part3-operation/","publishdate":"2019-11-27T21:00:00+08:00","readingtime":0,"relpermalink":"/blog/service-mesh-practice-in-production-at-ant-financial-part3-operation/","summary":"","tags":["Service mesh","Service Mesh 落地实践"],"title":"蚂蚁金服 Service Mesh 大规模落地系列 - 运维篇","type":"blog","url":"/blog/service-mesh-practice-in-production-at-ant-financial-part3-operation/","wordcount":0},{"author":"潘潘","categories":"SOFAChannel","content":"","date":1574741400,"description":"12 月 5 日周四晚 7 点，线上直播第 9 期。","dir":"activities/sofa-channel-9/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"33ec75a1b0e23d96934a7ec43dfa5df5","permalink":"/activities/sofa-channel-9/","publishdate":"2019-11-26T12:10:00+08:00","readingtime":0,"relpermalink":"/activities/sofa-channel-9/","summary":"","tags":["SOFAChannel","Service Mesh"],"title":"SOFAChannel#9：蚂蚁金服 Service Mesh 双十一落地详解","type":"activities","url":"/activities/sofa-channel-9/","wordcount":0},{"author":"SOFA 团队","categories":"SOFA Weekly","content":"","date":1574406000,"description":"SOFA WEEKLY | 每周精选，筛选每周精华问答，同步开源进展，欢迎留言互动。","dir":"blog/sofa-weekly-20191122/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"d1021e16b4acefdf05a527584900ba69","permalink":"/blog/sofa-weekly-20191122/","publishdate":"2019-11-22T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-weekly-20191122/","summary":"","tags":["SOFA Weekly"],"title":"SOFA Weekly | 每周精选【11/18 - 11/22】","type":"blog","url":"/blog/sofa-weekly-20191122/","wordcount":0},{"author":"无勤","categories":"Service mesh","content":"","date":1574326800,"description":" 本文为《蚂蚁金服 Service Mesh 大规模落地系列》第二篇-消息篇","dir":"blog/service-mesh-practice-in-production-at-ant-financial-part2-mesh/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"1778dffdda6a839ad3e72183df3393d6","permalink":"/blog/service-mesh-practice-in-production-at-ant-financial-part2-mesh/","publishdate":"2019-11-21T17:00:00+08:00","readingtime":0,"relpermalink":"/blog/service-mesh-practice-in-production-at-ant-financial-part2-mesh/","summary":"","tags":["Service mesh","Service Mesh 落地实践"],"title":"蚂蚁金服 Service Mesh 大规模落地系列 - 消息篇","type":"blog","url":"/blog/service-mesh-practice-in-production-at-ant-financial-part2-mesh/","wordcount":0},{"author":"卓与","categories":"Service mesh","content":"","date":1574154000,"description":" 当 Service Mesh 遇到双十一又会迸发出怎样的火花？蚂蚁金服的 LDC 架构继续演进的过程中，Service Mesh 要承载起哪方面的责任？我们借助四个“双十一考题”一一为大家揭晓。","dir":"blog/service-mesh-practice-antfinal-shopping-festival-big-exam/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"269c9444948a5f83a5a17f907b72ce4a","permalink":"/blog/service-mesh-practice-antfinal-shopping-festival-big-exam/","publishdate":"2019-11-19T17:00:00+08:00","readingtime":0,"relpermalink":"/blog/service-mesh-practice-antfinal-shopping-festival-big-exam/","summary":"","tags":["Service mesh","Service Mesh 落地实践"],"title":"Service Mesh 落地负责人亲述：蚂蚁金服双十一四大考题","type":"blog","url":"/blog/service-mesh-practice-antfinal-shopping-festival-big-exam/","wordcount":0},{"author":"SOFA 团队","categories":"SOFA Weekly","content":"","date":1573801200,"description":"SOFA WEEKLY | 每周精选，筛选每周精华问答，同步开源进展，欢迎留言互动。","dir":"blog/sofa-weekly-20191115/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"c08a41ec62ae153bbc0ce35958093192","permalink":"/blog/sofa-weekly-20191115/","publishdate":"2019-11-15T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-weekly-20191115/","summary":"","tags":["SOFA Weekly"],"title":"SOFA Weekly | 每周精选【11/11 - 11/15】","type":"blog","url":"/blog/sofa-weekly-20191115/","wordcount":0},{"author":"烈元","categories":"Service mesh","content":"","date":1573779600,"description":" 当 Service Mesh 遇到双十一又会迸发出怎样的火花？蚂蚁金服的 LDC 架构继续演进的过程中，Service Mesh 要承载起哪方面的责任？让我们一起来揭秘蚂蚁金服 Service Mesh 双十一实战。","dir":"blog/service-mesh-practice-in-production-at-ant-financial-part1-core/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"f758a3d4476cd3e8516947fa6fff5747","permalink":"/blog/service-mesh-practice-in-production-at-ant-financial-part1-core/","publishdate":"2019-11-15T09:00:00+08:00","readingtime":0,"relpermalink":"/blog/service-mesh-practice-in-production-at-ant-financial-part1-core/","summary":"","tags":["Service mesh","Service Mesh 落地实践"],"title":"蚂蚁金服 Service Mesh 大规模落地系列 - 核心篇","type":"blog","url":"/blog/service-mesh-practice-in-production-at-ant-financial-part1-core/","wordcount":0},{"author":"潘潘","categories":"Service Mesh","content":"","date":1573639200,"description":"11月24日，Service Mesh Meetup#8 双十一特别场邀您参加，本期联合 CNCF、阿里巴巴及蚂蚁金服共同举办。","dir":"activities/service-mesh-meetup-8/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"f127ede30ff37760f648b79ecf887ffa","permalink":"/activities/service-mesh-meetup-8/","publishdate":"2019-11-13T18:00:00+08:00","readingtime":0,"relpermalink":"/activities/service-mesh-meetup-8/","summary":"","tags":["Meetup","Service Mesh","Kubernetes"],"title":"Kubernetes \u0026 Cloud Native X Service Mesh Meetup","type":"activities","url":"/activities/service-mesh-meetup-8/","wordcount":0},{"author":"SOFA 团队","categories":"SOFA Weekly","content":"","date":1573196400,"description":"SOFA WEEKLY | 每周精选，筛选每周精华问答，同步开源进展，欢迎留言互动。","dir":"blog/sofa-weekly-20191108/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"4615f39bbae97f3f8b4b1705fcbc5d2f","permalink":"/blog/sofa-weekly-20191108/","publishdate":"2019-11-08T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-weekly-20191108/","summary":"","tags":["SOFA Weekly"],"title":"SOFA Weekly | 每周精选【11/04 - 11/08】","type":"blog","url":"/blog/sofa-weekly-20191108/","wordcount":0},{"author":"涵畅","categories":"Service mesh","content":"","date":1573030800,"description":" 从网络硬件设备到自研平台，从传统服务治理到 Service Mesh，本文将介绍蚂蚁金服网络代理在接入层以及 Service Mesh 化道路上是如何一步步支撑起秒级百万支付，千万春晚咻一咻的。","dir":"blog/antfin-service-mesh-network-agents/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"b539a4c29754f9e761c2027426566250","permalink":"/blog/antfin-service-mesh-network-agents/","publishdate":"2019-11-06T17:00:00+08:00","readingtime":0,"relpermalink":"/blog/antfin-service-mesh-network-agents/","summary":"","tags":["Service mesh"],"title":"从网络接入层到 Service Mesh，蚂蚁金服网络代理的演进之路","type":"blog","url":"/blog/antfin-service-mesh-network-agents/","wordcount":0},{"author":"敖小剑","categories":"Service mesh","content":"","date":1572922800,"description":" 本文整理自蚂蚁金服高级技术专家敖小剑在 QCon 全球软件开发大会（上海站）2019 上的演讲。","dir":"blog/service-mesh-antfin-deep-practice-qcon/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"561edcf88763b36e72894da214d2b123","permalink":"/blog/service-mesh-antfin-deep-practice-qcon/","publishdate":"2019-11-05T11:00:00+08:00","readingtime":0,"relpermalink":"/blog/service-mesh-antfin-deep-practice-qcon/","summary":"","tags":["Service mesh"],"title":"诗和远方：蚂蚁金服 Service Mesh 深度实践 | QCon 实录","type":"blog","url":"/blog/service-mesh-antfin-deep-practice-qcon/","wordcount":0},{"author":"屹远","categories":"Seata","content":"","date":1572861600,"description":" 一起来解读 Seata Saga 模式到底解决了什么问题。","dir":"blog/seata-saga-flexible-financial-applications/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"9c17449b81e0f1fe51d46bbaeaaa5516","permalink":"/blog/seata-saga-flexible-financial-applications/","publishdate":"2019-11-04T18:00:00+08:00","readingtime":0,"relpermalink":"/blog/seata-saga-flexible-financial-applications/","summary":"","tags":["Seata"],"title":"基于 Seata Saga 设计更有弹性的金融应用","type":"blog","url":"/blog/seata-saga-flexible-financial-applications/","wordcount":0},{"author":"SOFA 团队","categories":"SOFA Weekly","content":"","date":1572591600,"description":"SOFA WEEKLY | 每周精选，筛选每周精华问答，同步开源进展，欢迎留言互动。","dir":"blog/sofa-weekly-20191101/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"cd5f758d6d5d28784524b55169ae0a98","permalink":"/blog/sofa-weekly-20191101/","publishdate":"2019-11-01T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-weekly-20191101/","summary":"","tags":["SOFA Weekly"],"title":"SOFA Weekly | 每周精选【10/28 - 11/01】","type":"blog","url":"/blog/sofa-weekly-20191101/","wordcount":0},{"author":"潘潘","categories":"SOFALab","content":"","date":1572408000,"description":"欢迎参与 SOFAArk 源码解析系列文章共建。","dir":"activities/sofa-ark-lab/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"02869baa65a4730cea247cf1763d920c","permalink":"/activities/sofa-ark-lab/","publishdate":"2019-10-30T12:00:00+08:00","readingtime":0,"relpermalink":"/activities/sofa-ark-lab/","summary":"","tags":["SOFALab","SOFAArk","剖析 | SOFAArk 源码"],"title":"\u003cSOFA:ArkLab/\u003e","type":"activities","url":"/activities/sofa-ark-lab/","wordcount":0},{"author":"沧漠","categories":"Kubernetes","content":"","date":1572246000,"description":"本文将分享蚂蚁金服是如何有效可靠地管理大规模 Kubernetes 集群的，并会详细介绍集群管理系统核心组件的设计。","dir":"blog/ant-financial-managing-large-scale-kubernetes-clusters/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"0fbce82d736863f9039c6a8f15c6f5d5","permalink":"/blog/ant-financial-managing-large-scale-kubernetes-clusters/","publishdate":"2019-10-28T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/ant-financial-managing-large-scale-kubernetes-clusters/","summary":"","tags":["Kubernetes"],"title":"备战双 11！蚂蚁金服万级规模 K8s 集群管理系统如何设计？","type":"blog","url":"/blog/ant-financial-managing-large-scale-kubernetes-clusters/","wordcount":0},{"author":"SOFA 团队","categories":"SOFA Weekly","content":"","date":1571986800,"description":"SOFA WEEKLY | 每周精选，筛选每周精华问答，同步开源进展，欢迎留言互动。","dir":"blog/sofa-weekly-20191025/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"7927ee3392339de5283b8c4e75f9b4e9","permalink":"/blog/sofa-weekly-20191025/","publishdate":"2019-10-25T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-weekly-20191025/","summary":"","tags":["SOFA Weekly"],"title":"SOFA Weekly | 每周精选【10/21 - 10/25】","type":"blog","url":"/blog/sofa-weekly-20191025/","wordcount":0},{"author":"SOFAStack","categories":"1024","content":"","date":1571883840,"description":"不管世界如何，永远永远希望开发者能感觉技术“有意思”，永远希望开发者快乐不复杂。","dir":"blog/ant-financial-happy-1024/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"c89decd5fb9b75c59f487dc58bac0365","permalink":"/blog/ant-financial-happy-1024/","publishdate":"2019-10-24T10:24:00+08:00","readingtime":0,"relpermalink":"/blog/ant-financial-happy-1024/","summary":"","tags":["1024"],"title":"蚂蚁金服开源背后的“有意思”工程师 | 1024快乐","type":"blog","url":"/blog/ant-financial-happy-1024/","wordcount":0},{"author":"SOFA 团队","categories":"SOFA Weekly","content":"","date":1571382000,"description":"SOFA WEEKLY | 每周精选，筛选每周精华问答，同步开源进展，欢迎留言互动。","dir":"blog/sofa-weekly-20191018/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"91ccf1c351bfb03d7e18f70fad5f5224","permalink":"/blog/sofa-weekly-20191018/","publishdate":"2019-10-18T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-weekly-20191018/","summary":"","tags":["SOFA Weekly"],"title":"SOFA Weekly | 每周精选【10/14 - 10/18】","type":"blog","url":"/blog/sofa-weekly-20191018/","wordcount":0},{"author":"力鲲","categories":"SOFARegistry","content":"","date":1571223600,"description":" 本文为《剖析 | SOFARegistry 框架》第五篇，作者力鲲","dir":"blog/sofa-registry-session-storage/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"5ae2be3be1d395dd7ccb2bddc97b346f","permalink":"/blog/sofa-registry-session-storage/","publishdate":"2019-10-16T19:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-registry-session-storage/","summary":"","tags":["SOFARegistry","剖析 | SOFARegistry 框架","SOFALab"],"title":"服务注册中心 Session 存储策略 | SOFARegistry 解析","type":"blog","url":"/blog/sofa-registry-session-storage/","wordcount":0},{"author":"杨延昭","categories":"云原生","content":"","date":1571209200,"description":"本文将分享在蚂蚁金服的演进过程当中，我们心中的云原生是什么样的，在金融领域落地的时候遇到什么问题，以及我们是怎么解决的。","dir":"blog/ant-financial-native-cloud-financial-architecture/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"b0fce431d72c523e27e31f1fe831fdee","permalink":"/blog/ant-financial-native-cloud-financial-architecture/","publishdate":"2019-10-16T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/ant-financial-native-cloud-financial-architecture/","summary":"","tags":["云原生"],"title":"云原生时代，什么是蚂蚁金服推荐的金融架构？","type":"blog","url":"/blog/ant-financial-native-cloud-financial-architecture/","wordcount":0},{"author":"何征宇","categories":"云原生","content":"","date":1571036400,"description":"本文着重分享蚂蚁金服正在实践的几项云原生安全技术，包括云原生网络安全 Service Mesh，安全容器，以及机密计算。","dir":"blog/ant-financial-native-cloud-security-architecture/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"d65835b57ec0e3e24af2c65db5f41824","permalink":"/blog/ant-financial-native-cloud-security-architecture/","publishdate":"2019-10-14T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/ant-financial-native-cloud-security-architecture/","summary":"","tags":["云原生"],"title":"当金融科技遇上云原生，蚂蚁金服是怎么做安全架构的？","type":"blog","url":"/blog/ant-financial-native-cloud-security-architecture/","wordcount":0},{"author":"SOFA 团队","categories":"SOFA Weekly","content":"","date":1570777200,"description":"SOFA WEEKLY | 每周精选，筛选每周精华问答，同步开源进展，欢迎留言互动。","dir":"blog/sofa-weekly-20191011/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"98ed37338b0cd1036114b205bcb980c2","permalink":"/blog/sofa-weekly-20191011/","publishdate":"2019-10-11T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-weekly-20191011/","summary":"","tags":["SOFA Weekly"],"title":"SOFA Weekly | 每周精选【10/7 - 10/11】","type":"blog","url":"/blog/sofa-weekly-20191011/","wordcount":0},{"author":"明不二","categories":"SOFARegistry","content":"","date":1570690800,"description":" 本文为《剖析 |  SOFARegistry 框架》第四篇，作者明不二","dir":"blog/sofa-registry-data-fragmentation-synchronization-scheme/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"e4e0cf21756799897553099d37f73100","permalink":"/blog/sofa-registry-data-fragmentation-synchronization-scheme/","publishdate":"2019-10-10T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-registry-data-fragmentation-synchronization-scheme/","summary":"","tags":["SOFARegistry","剖析 | SOFARegistry 框架","SOFALab"],"title":"服务注册中心数据分片和同步方案详解 | SOFARegistry 解析","type":"blog","url":"/blog/sofa-registry-data-fragmentation-synchronization-scheme/","wordcount":0},{"author":"闫守孟等","categories":"SOFAEnclave","content":"","date":1570258800,"description":"基于机密计算打造的新一代可信编程中间件。","dir":"blog/sofa-enclave-confidential-computing/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"f994d83c7c4b263b08e4d2fd22a461b4","permalink":"/blog/sofa-enclave-confidential-computing/","publishdate":"2019-10-05T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-enclave-confidential-computing/","summary":"","tags":["SOFAEnclave"],"title":"SOFAEnclave：蚂蚁金服新一代可信编程环境，让机密计算为金融业务保驾护航102年","type":"blog","url":"/blog/sofa-enclave-confidential-computing/","wordcount":0},{"author":"SOFA 团队","categories":"SOFA Weekly","content":"","date":1570172400,"description":"SOFA WEEKLY | 每周精选，筛选每周精华问答，同步开源进展，欢迎留言互动。","dir":"blog/sofa-weekly-20191004/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"81a2a8115038fb193b50618c4d845bf4","permalink":"/blog/sofa-weekly-20191004/","publishdate":"2019-10-04T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-weekly-20191004/","summary":"","tags":["SOFA Weekly"],"title":"SOFA Weekly | 每周精选【9/30 - 10/4】","type":"blog","url":"/blog/sofa-weekly-20191004/","wordcount":0},{"author":"SQLFlow","categories":"SQLFlow","content":"","date":1569740400,"description":"让AI 像 SQL 查询一样简单。","dir":"blog/sqlflow-ai-didi-antfin-open-source-construction/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"d8e2fdbfc1d48f984a2adf17474cb983","permalink":"/blog/sqlflow-ai-didi-antfin-open-source-construction/","publishdate":"2019-09-29T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sqlflow-ai-didi-antfin-open-source-construction/","summary":"","tags":["SQLFlow"],"title":"让 AI 无处不在：滴滴与蚂蚁金服开源共建 SQLFlow","type":"blog","url":"/blog/sqlflow-ai-didi-antfin-open-source-construction/","wordcount":0},{"author":"SOFA 团队","categories":"SOFA Weekly","content":"","date":1569567600,"description":"SOFA WEEKLY | 每周精选，筛选每周精华问答，同步开源进展，欢迎留言互动。","dir":"blog/sofa-weekly-20190927/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"d1709ae51d5099a6263d7269a435e264","permalink":"/blog/sofa-weekly-20190927/","publishdate":"2019-09-27T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-weekly-20190927/","summary":"","tags":["SOFA Weekly"],"title":"SOFA Weekly | 每周精选【9/23 - 9/27】","type":"blog","url":"/blog/sofa-weekly-20190927/","wordcount":0},{"author":"胡宗棠","categories":"SOFAJRaft","content":"","date":1569232800,"description":"本文为《剖析 | SOFAJRaft 实现原理》最后一篇，本篇作者胡宗棠。","dir":"blog/sofa-jraft-snapshot-principle-analysis/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"39ff132d4c11bccb0059665f6e9c4b31","permalink":"/blog/sofa-jraft-snapshot-principle-analysis/","publishdate":"2019-09-23T18:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-jraft-snapshot-principle-analysis/","summary":"","tags":["SOFAJRaft","SOFALab","剖析 | SOFAJRaft 实现原理"],"title":"SOFAJRaft Snapshot 原理剖析 | SOFAJRaft 实现原理","type":"blog","url":"/blog/sofa-jraft-snapshot-principle-analysis/","wordcount":0},{"author":"SOFA 团队","categories":"SOFA Weekly","content":"","date":1568962800,"description":"SOFA WEEKLY | 每周精选，筛选每周精华问答，同步开源进展，欢迎留言互动。","dir":"blog/sofa-weekly-20190920/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"4519012918ba68bf9e39b0daed78cfc4","permalink":"/blog/sofa-weekly-20190920/","publishdate":"2019-09-20T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-weekly-20190920/","summary":"","tags":["SOFA Weekly"],"title":"SOFA Weekly | 每周精选【9/16 - 9/20】","type":"blog","url":"/blog/sofa-weekly-20190920/","wordcount":0},{"author":"米麒麟","categories":"SOFAJRaft","content":"","date":1568721600,"description":"本文为《剖析 | SOFAJRaft 实现原理》第七篇，本篇作者米麒麟。","dir":"blog/sofa-jraft--rheakv-distributedLock/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"be578aa3941f24a603a7053e7c7e1107","permalink":"/blog/sofa-jraft-rheakv-distributedlock/","publishdate":"2019-09-17T20:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-jraft-rheakv-distributedlock/","summary":"","tags":["SOFAJRaft","剖析 | SOFAJRaft 实现原理","SOFALab"],"title":"SOFAJRaft-RheaKV 分布式锁实现剖析　| SOFAJRaft 实现原理","type":"blog","url":"/blog/sofa-jraft-rheakv-distributedlock/","wordcount":0},{"author":"Oschina","categories":"ElasticDL","content":"","date":1568635200,"description":"业界首个基于 TensorFlow 实现弹性深度学习的开源系统 ElasticDL 项目的技术细节全面介绍。","dir":"blog/alipay-deep-learning-tensorflow-elasticdl/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"74eedc82d0b4a438d332dd5443605318","permalink":"/blog/alipay-deep-learning-tensorflow-elasticdl/","publishdate":"2019-09-16T20:00:00+08:00","readingtime":0,"relpermalink":"/blog/alipay-deep-learning-tensorflow-elasticdl/","summary":"","tags":["ElasticDL"],"title":"ElasticDL：蚂蚁金服开源基于 TensorFlow 的弹性分布式深度学习系统","type":"blog","url":"/blog/alipay-deep-learning-tensorflow-elasticdl/","wordcount":0},{"author":"SOFA 团队","categories":"SOFA Weekly","content":"","date":1568271600,"description":"SOFA WEEKLY | 每周精选，筛选每周精华问答，同步开源进展，欢迎留言互动。","dir":"blog/sofa-weekly-20190913/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"85b998cb10df30ee42c04a8571b73598","permalink":"/blog/sofa-weekly-20190913/","publishdate":"2019-09-12T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-weekly-20190913/","summary":"","tags":["SOFA Weekly"],"title":"SOFA Weekly | 每周精选【9/9 - 9/13】","type":"blog","url":"/blog/sofa-weekly-20190913/","wordcount":0},{"author":"Yavin","categories":"SOFARegistry","content":"","date":1568271600,"description":" 本文为《剖析 |  SOFARegistry 框架》第三篇，作者 Yavin ，来自考拉海购。","dir":"blog/sofa-registry-metaserver-function-introduction/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"6e08281a1d2851d95121fc739cf80669","permalink":"/blog/sofa-registry-metaserver-function-introduction/","publishdate":"2019-09-12T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-registry-metaserver-function-introduction/","summary":"","tags":["SOFARegistry","剖析 | SOFARegistry 框架","SOFALab"],"title":"服务注册中心 MetaServer 功能介绍和实现剖析 | SOFARegistry 解析","type":"blog","url":"/blog/sofa-registry-metaserver-function-introduction/","wordcount":0},{"author":"潘潘","categories":"SOFAStack","content":"","date":1568260800,"description":"本文为 SOFAStack 相关线上线下活动的回顾集合，并且会不定时更新。","dir":"blog/sofa-activity-retrospect-collection/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"b1f0034b1e2c249a33c57be88f5a184c","permalink":"/blog/sofa-activity-retrospect-collection/","publishdate":"2019-09-12T12:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-activity-retrospect-collection/","summary":"","tags":["SOFAStack"],"title":"（含视频回顾）SOFAStack 活动回顾整理集合","type":"blog","url":"/blog/sofa-activity-retrospect-collection/","wordcount":0},{"author":"SOFA 团队","categories":"SOFA Weekly","content":"","date":1567753200,"description":"SOFA WEEKLY | 每周精选，筛选每周精华问答，同步开源进展，欢迎留言互动。","dir":"blog/sofa-weekly-20190906/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"94743dfe34353e1f6910291d127a73d6","permalink":"/blog/sofa-weekly-20190906/","publishdate":"2019-09-06T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-weekly-20190906/","summary":"","tags":["SOFA Weekly"],"title":"SOFA Weekly | 每周精选【9/2 - 9/6】","type":"blog","url":"/blog/sofa-weekly-20190906/","wordcount":0},{"author":"潘潘","categories":"SOFALab","content":"","date":1567483200,"description":"","dir":"activities/sofa-registry-lab/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"ebbc0e9574d88e21f39926e750c848e9","permalink":"/activities/sofa-registry-lab/","publishdate":"2019-09-03T12:00:00+08:00","readingtime":0,"relpermalink":"/activities/sofa-registry-lab/","summary":"","tags":["SOFALab","SOFARegistry"],"title":"\u003cSOFA:RegistryLab/\u003e","type":"activities","url":"/activities/sofa-registry-lab/","wordcount":0},{"author":"力鲲","categories":"SOFAJRaft","content":"","date":1567400400,"description":"本文根据 SOFAChannel#8 直播分享整理，以 Counter 为例，介绍 SOFAJRaft 的概念，并从需求提出开始，一步步完善架构，明确业务要实现哪些接口，最后启动日志观察 SOFAJRaft 如何支撑业务执行。","dir":"blog/sofa-channel-8-retrospect/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"7eab29bc73ad095706ad2daef197b1bb","permalink":"/blog/sofa-channel-8-retrospect/","publishdate":"2019-09-02T13:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-channel-8-retrospect/","summary":"","tags":["SOFAJRaft","SOFAChannel"],"title":"从一个例子开始体验 SOFAJRaft | SOFAChannel#8 直播整理","type":"blog","url":"/blog/sofa-channel-8-retrospect/","wordcount":0},{"author":"SOFA 团队","categories":"SOFA Weekly","content":"","date":1567148400,"description":"SOFA WEEKLY | 每周精选，筛选每周精华问答，同步开源进展，欢迎留言互动。","dir":"blog/sofa-weekly-20190830/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"afd535d1a14ed1fc010e93bcff36553d","permalink":"/blog/sofa-weekly-20190830/","publishdate":"2019-08-30T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-weekly-20190830/","summary":"","tags":["SOFA Weekly"],"title":"SOFA Weekly | 每周精选【8/26 - 8/30】","type":"blog","url":"/blog/sofa-weekly-20190830/","wordcount":0},{"author":"敖小剑","categories":"Service Mesh","content":"","date":1566972000,"description":"继续探讨 Service Mesh 发展趋势：深度分析 Istio 的重大革新 Mixer v2，Envoy 支持 Web Assembly 的意义所在；深入介绍 Google Traffic Director 对虚拟机模式的创新支持方式，以及最近围绕 SMI 发生的故事。","dir":"blog/service-mesh-development-trend-2/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"51e4af6a0771823fe055c5aebd2e76bd","permalink":"/blog/service-mesh-development-trend-2/","publishdate":"2019-08-28T14:00:00+08:00","readingtime":0,"relpermalink":"/blog/service-mesh-development-trend-2/","summary":"","tags":["Service mesh"],"title":"Service Mesh 发展趋势(续)：棋到中盘路往何方 | Service Mesh Meetup 实录","type":"blog","url":"/blog/service-mesh-development-trend-2/","wordcount":0},{"author":"SOFA 团队","categories":"SOFA Weekly","content":"","date":1566543600,"description":"SOFA WEEKLY | 每周精选，筛选每周精华问答，同步开源进展，欢迎留言互动。","dir":"blog/sofa-weekly-20190823/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"067db1c93be21087cc809be0294c1b32","permalink":"/blog/sofa-weekly-20190823/","publishdate":"2019-08-23T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-weekly-20190823/","summary":"","tags":["SOFA Weekly"],"title":"SOFA Weekly | 每周精选【8/19 - 8/23】","type":"blog","url":"/blog/sofa-weekly-20190823/","wordcount":0},{"author":"苟利","categories":"SOFAMeetup","content":"","date":1566381600,"description":"本文根据 8 月 11 日 SOFA Meetup#3 广州站 《蚂蚁金服在云原生架构下的可观察性的探索和实践》主题分享整理，文中包含本次分享视频回顾以及 PPT 查看地址。","dir":"blog/sofa-meetup-3-cloud-original-retrospect/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"85eba21fd9adf73841d7b7ee103723ae","permalink":"/blog/sofa-meetup-3-cloud-original-retrospect/","publishdate":"2019-08-21T18:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-meetup-3-cloud-original-retrospect/","summary":"","tags":["SOFAMeetup"],"title":"蚂蚁金服在云原生架构下的可观察性的探索和实践 | Meetup#3 回顾","type":"blog","url":"/blog/sofa-meetup-3-cloud-original-retrospect/","wordcount":0},{"author":"SOFA 团队","categories":"SOFA Weekly","content":"","date":1565942400,"description":"SOFA WEEKLY | 每周精选，筛选每周精华问答，同步开源进展，欢迎留言互动。","dir":"blog/sofa-weekly-20190816/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"277754f72430d4473dc3920edbaf2ddb","permalink":"/blog/sofa-weekly-20190816/","publishdate":"2019-08-16T16:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-weekly-20190816/","summary":"","tags":["SOFA Weekly"],"title":"SOFA Weekly | 每周精选【8/12 - 8/16】","type":"blog","url":"/blog/sofa-weekly-20190816/","wordcount":0},{"author":"潘潘","categories":"SOFAChannel","content":"","date":1565842200,"description":"8 月 29 日周四晚 7 点，线上直播第 8 期。","dir":"activities/sofa-channel-8/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"92590333a35992bc201c798645cbf7ea","permalink":"/activities/sofa-channel-8/","publishdate":"2019-08-15T12:10:00+08:00","readingtime":0,"relpermalink":"/activities/sofa-channel-8/","summary":"","tags":["SOFAChannel","SOFAJRaft"],"title":"SOFAChannel#8：从一个例子开始体验 SOFAJRaft","type":"activities","url":"/activities/sofa-channel-8/","wordcount":0},{"author":"屹远","categories":"Seata","content":"","date":1565776800,"description":"本文根据 8月11日 SOFA Meetup#3 广州站 《分布式事务 Seata 及其三种模式详解》主题分享整理，文中包含本次分享视频回顾以及 PPT 查看地址。","dir":"blog/sofa-meetup-3-seata-retrospect/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"841ac02b2ce20e10748bf97db9d644ec","permalink":"/blog/sofa-meetup-3-seata-retrospect/","publishdate":"2019-08-14T18:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-meetup-3-seata-retrospect/","summary":"","tags":["Seata","SOFAMeetup"],"title":"分布式事务 Seata Saga 模式首秀以及三种模式详解 |  Meetup#3 回顾","type":"blog","url":"/blog/sofa-meetup-3-seata-retrospect/","wordcount":0},{"author":"胡宗棠","categories":"SOFAJRaft","content":"","date":1565694000,"description":"BC-MQ 是中国移动苏州研发中心结合自身在云计算产品和技术的较多积累、自主研发的大云消息队列中间件产品，本文详细解读了 SOFAJRaft 在其消息云服务中的最佳应用实践。","dir":"blog/sofa-jraft-user-china-mobile/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"a7eb984bdb11d8c0b47133af4c16f48f","permalink":"/blog/sofa-jraft-user-china-mobile/","publishdate":"2019-08-13T19:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-jraft-user-china-mobile/","summary":"","tags":["SOFAJRaft"],"title":"中国移动苏州研发中心消息队列高可用设计之谈 | SOFAStack 用户说","type":"blog","url":"/blog/sofa-jraft-user-china-mobile/","wordcount":0},{"author":"SOFA 团队","categories":"SOFA Weekly","content":"","date":1565337600,"description":"SOFA WEEKLY | 每周精选，筛选每周精华问答，同步开源进展，欢迎留言互动。","dir":"blog/sofa-weekly-20190809/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"31aa100cb2b1edaacaa1874644af50ff","permalink":"/blog/sofa-weekly-20190809/","publishdate":"2019-08-09T16:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-weekly-20190809/","summary":"","tags":["SOFA Weekly"],"title":"SOFA Weekly | 每周精选【8/5 - 8/9】","type":"blog","url":"/blog/sofa-weekly-20190809/","wordcount":0},{"author":"力鲲、徐家锋","categories":"SOFAJRaft","content":"","date":1565080200,"description":"本文为《剖析 | SOFAJRaft 实现原理》第六篇，本篇作者徐家锋、力鲲。","dir":"blog/sofa-jraft-pipeline-principle/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"c88030d7b6620240943e8326565b0ec2","permalink":"/blog/sofa-jraft-pipeline-principle/","publishdate":"2019-08-06T16:30:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-jraft-pipeline-principle/","summary":"","tags":["SOFAJRaft","SOFALab","剖析 | SOFAJRaft 实现原理"],"title":"SOFAJRaft 日志复制 - pipeline 实现剖析 | SOFAJRaft 实现原理","type":"blog","url":"/blog/sofa-jraft-pipeline-principle/","wordcount":0},{"author":"SOFA 团队","categories":"SOFA Weekly","content":"","date":1564732800,"description":"SOFA WEEKLY | 每周精选，筛选每周精华问答，同步开源进展，欢迎留言互动。","dir":"blog/sofa-weekly-20190802/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"4edd066a5855f1a118fd562cfc299571","permalink":"/blog/sofa-weekly-20190802/","publishdate":"2019-08-02T16:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-weekly-20190802/","summary":"","tags":["SOFA Weekly"],"title":"SOFA Weekly | 每周精选【7/29- 8/2】","type":"blog","url":"/blog/sofa-weekly-20190802/","wordcount":0},{"author":"SOFA 团队","categories":"SOFA Weekly","content":"","date":1564124400,"description":"SOFA WEEKLY | 每周精选，筛选每周精华问答，同步开源进展，欢迎留言互动。","dir":"blog/sofa-weekly-20190726/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"70e3dace7979772fdf90f9f5a47d2e13","permalink":"/blog/sofa-weekly-20190726/","publishdate":"2019-07-26T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-weekly-20190726/","summary":"","tags":["SOFA Weekly"],"title":"（含活动报名）SOFA Weekly | 每周精选【7/22 - 7/26】","type":"blog","url":"/blog/sofa-weekly-20190726/","wordcount":0},{"author":"潘潘","categories":"SOFAMeetup","content":"","date":1564038000,"description":"SOFA Meetup#3 广州站-从开源技术到产品能力，8 月 11 日周日下午 13 点，广州市广电平云 B 塔 15F 等你。","dir":"activities/sofa-meetup-3/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"0e50b11d1a8e52f8cefbac0bb4826ffe","permalink":"/activities/sofa-meetup-3/","publishdate":"2019-07-25T15:00:00+08:00","readingtime":0,"relpermalink":"/activities/sofa-meetup-3/","summary":"","tags":["SOFAMeetup","SOFAStack"],"title":"SOFA Meetup#3 广州站-从开源技术到产品能力","type":"activities","url":"/activities/sofa-meetup-3/","wordcount":0},{"author":"袖扣","categories":"SOFAJRaft","content":"","date":1563955200,"description":"本文为《剖析 | SOFAJRaft 实现原理》第五篇，本篇作者袖扣，来自蚂蚁金服。","dir":"blog/sofa-jraft-rheaKV-multi-raft-group/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"fbebe45fe1ffaa4e8f134c2531cde55c","permalink":"/blog/sofa-jraft-rheakv-multi-raft-group/","publishdate":"2019-07-24T16:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-jraft-rheakv-multi-raft-group/","summary":"","tags":["SOFAJRaft","SOFALab","剖析 | SOFAJRaft 实现原理"],"title":"SOFAJRaft-RheaKV MULTI-RAFT-GROUP 实现分析 | SOFAJRaft 实现原理","type":"blog","url":"/blog/sofa-jraft-rheakv-multi-raft-group/","wordcount":0},{"author":"SOFA 团队","categories":"SOFA Weekly","content":"","date":1563519600,"description":"SOFA WEEKLY | 每周精选，筛选每周精华问答，同步开源进展，欢迎留言互动。","dir":"blog/sofa-weekly-20190719/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"03bd5ad0ca023620792ed7ee60d4c448","permalink":"/blog/sofa-weekly-20190719/","publishdate":"2019-07-19T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-weekly-20190719/","summary":"","tags":["SOFA Weekly"],"title":"SOFA Weekly | 每周精选【7/15 - 7/19】","type":"blog","url":"/blog/sofa-weekly-20190719/","wordcount":0},{"author":"枫晟","categories":"CafeDeployment","content":"","date":1563454800,"description":"本文根据 SOFAChannel#7 直播分享整理，介绍了蚂蚁金服 SOFAStack 的 Kubernetes 自定义资源 CafeDeployment 的开发背景和功能特性。","dir":"blog/sofa-channel-7-retrospect/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"a1185b6bb7c21fd49c4118950c16a2a9","permalink":"/blog/sofa-channel-7-retrospect/","publishdate":"2019-07-18T21:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-channel-7-retrospect/","summary":"","tags":["CafeDeployment","SOFAChannel"],"title":"自定义资源 CAFEDeployment 的背景、实现和演进 | SOFAChannel#7 直播整理","type":"blog","url":"/blog/sofa-channel-7-retrospect/","wordcount":0},{"author":"尚彧","categories":"SOFARegistry","content":"","date":1563433200,"description":"本文为《剖析 | SOFARegistry 框架》第二篇，本篇作者尚彧，来自蚂蚁金服。","dir":"blog/sofa-registry-service-discovery-optimization/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"f99d259a0c323df2ddaaea719da2f93c","permalink":"/blog/sofa-registry-service-discovery-optimization/","publishdate":"2019-07-18T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-registry-service-discovery-optimization/","summary":"","tags":["SOFARegistry","剖析 | SOFARegistry 框架","SOFALab"],"title":"蚂蚁金服服务注册中心 SOFARegistry 解析 | 服务发现优化之路","type":"blog","url":"/blog/sofa-registry-service-discovery-optimization/","wordcount":0},{"author":"隐秀","categories":"SOFAStack","content":"","date":1562828400,"description":"KubeCon China 2019 大会上， Serverless 应用服务正式亮相，在 SOFAStack 工作坊吸引了百余名参与者同场体验。","dir":"blog/serverless-market-challenge/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"e2a95cbe3e0343e3908f17bea5a55d70","permalink":"/blog/serverless-market-challenge/","publishdate":"2019-07-11T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/serverless-market-challenge/","summary":"","tags":["SOFAStack","Serverless"],"title":"Serverless 市场观察和落地挑战","type":"blog","url":"/blog/serverless-market-challenge/","wordcount":0},{"author":"SOFAStack","categories":"SOFAStack","content":"","date":1562749200,"description":"Service Mesh 数据平面代理 SOFAMosn、分布式链路跟踪系统 SOFATracer 和 RPC 服务框架 SOFARPC 加入 CNCF 云原生全景图","dir":"blog/sofastack-projects-joined-cncf-landscape/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"219e8daac9b49b95c7d5afd94d9ee791","permalink":"/blog/sofastack-projects-joined-cncf-landscape/","publishdate":"2019-07-10T17:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofastack-projects-joined-cncf-landscape/","summary":"","tags":["SOFAStack","CNCF","开源"],"title":"蚂蚁金服 3 个项目进入 CNCF 云原生全景图 | 开源","type":"blog","url":"/blog/sofastack-projects-joined-cncf-landscape/","wordcount":0},{"author":"力鲲","categories":"SOFAJRaft","content":"","date":1562742000,"description":"本文为《剖析 | SOFAJRaft 实现原理》第四篇，本篇作者力鲲，来自蚂蚁金服","dir":"blog/sofa-jraft-election-mechanism/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"e40fefafd980ac2308a3ba6f3fda9cdd","permalink":"/blog/sofa-jraft-election-mechanism/","publishdate":"2019-07-10T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-jraft-election-mechanism/","summary":"","tags":["SOFAJRaft","SOFALab","剖析 | SOFAJRaft 实现原理"],"title":"SOFAJRaft 选举机制剖析 | SOFAJRaft 实现原理","type":"blog","url":"/blog/sofa-jraft-election-mechanism/","wordcount":0},{"author":"SOFAStack","categories":"SOFAStack","content":"","date":1562742000,"description":"本文根据 KubeCon China 2019 同场活动 SOFAStack Cloud Native Workshop 内容整理，文末包含文档、PPT 地址，欢迎试用和提出建议。","dir":"blog/sofastack-cloud-native-workshop-show/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"bed45f24a92c60ca5b141952abdc2049","permalink":"/blog/sofastack-cloud-native-workshop-show/","publishdate":"2019-07-10T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofastack-cloud-native-workshop-show/","summary":"","tags":["分布式事务","SOFABoot","Service Mesh","开源","Seata"],"title":"五小时构建云原生电商平台 | KubeCon SOFAStack Workshop 详解","type":"blog","url":"/blog/sofastack-cloud-native-workshop-show/","wordcount":0},{"author":"潘潘","categories":"SOFAChannel","content":"","date":1562573400,"description":"7 月 18 日周四晚 7 点，线上直播第 7 期。","dir":"activities/sofa-channel-7/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"51c929733c988190de480a3a0dc5e735","permalink":"/activities/sofa-channel-7/","publishdate":"2019-07-08T16:10:00+08:00","readingtime":0,"relpermalink":"/activities/sofa-channel-7/","summary":"","tags":["SOFAChannel","CAFEDeployment"],"title":"SOFAChannel#7：扩展 Kubernetes 实现金融级云原生发布部署 - 自定义资源 CAFEDeployment 的背景、实现和演进","type":"activities","url":"/activities/sofa-channel-7/","wordcount":0},{"author":"SOFAStack","categories":"SOFAStack","content":"","date":1562569200,"description":"近期，CNCF 发布了最新版本的 Cloud Native Landscape，蚂蚁金服金融级分布式架构 SOFAStack 中有 3 个项目被纳入。","dir":"blog/sofastack-cncf-cloud-native-landscape/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"7146cdd7e74b9901a8ac20cb3e80cf6e","permalink":"/blog/sofastack-cncf-cloud-native-landscape/","publishdate":"2019-07-08T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofastack-cncf-cloud-native-landscape/","summary":"","tags":["SOFAStack"],"title":"蚂蚁金服 3 个项目进入 CNCF 云原生全景图 | 开源","type":"blog","url":"/blog/sofastack-cncf-cloud-native-landscape/","wordcount":0},{"author":"SOFAStack","categories":"SOFAStack","content":"","date":1562223600,"description":"在 2019 云计算开源产业大会上，蚂蚁金服自主研发的金融级分布式架构 SOFAStack（Scalable Open Financial Architecture Stack）荣获 OSCAR 尖峰开源技术创新奖（自主研发）。","dir":"blog/sofastack-2019-oscar/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"21da7fc5e118681336c84d2dc46fe6bb","permalink":"/blog/sofastack-2019-oscar/","publishdate":"2019-07-04T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofastack-2019-oscar/","summary":"","tags":["SOFAStack"],"title":"蚂蚁金服 SOFAStack 荣获云计算开源产业大会尖峰开源技术创新奖","type":"blog","url":"/blog/sofastack-2019-oscar/","wordcount":0},{"author":"绍辉","categories":"Seata","content":"","date":1562050800,"description":"本文整理自蚂蚁金服技术专家、分布式事务 Seata 发起者之一张森（花名：绍辉）在 GIAC 全球互联网架构大会的分享。","dir":"blog/seata-distributed-transaction-deep-dive/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"d87c4d85b8c16bfc24a0b9bea52b604d","permalink":"/blog/seata-distributed-transaction-deep-dive/","publishdate":"2019-07-02T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/seata-distributed-transaction-deep-dive/","summary":"","tags":["分布式事务","实践","开源","Seata"],"title":"Seata 分布式事务实践和开源详解 | GIAC 实录","type":"blog","url":"/blog/seata-distributed-transaction-deep-dive/","wordcount":0},{"author":"米麒麟","categories":"SOFAJRaft","content":"","date":1562050800,"description":"本文为《剖析 | SOFAJRaft 实现原理》第三篇，本篇作者米麒麟，来自陆金所。","dir":"blog/sofa-jraft-linear-consistent-read-implementation/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"cfa43268e0ca8424ff44bd4397f720b3","permalink":"/blog/sofa-jraft-linear-consistent-read-implementation/","publishdate":"2019-07-02T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-jraft-linear-consistent-read-implementation/","summary":"","tags":["SOFAJRaft","SOFALab","剖析 | SOFAJRaft 实现原理"],"title":"SOFAJRaft 线性一致读实现剖析 | SOFAJRaft 实现原理","type":"blog","url":"/blog/sofa-jraft-linear-consistent-read-implementation/","wordcount":0},{"author":"响风","categories":"SOFALookout","content":"","date":1561705200,"description":"本文根据 SOFAChannel#6 直播分享整理，主题：轻量级监控分析系统 SOFALookout 原理讲解和功能演示。","dir":"blog/sofa-channel-6-retrospect/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"27fcb53174efd0b72fcee578993cae38","permalink":"/blog/sofa-channel-6-retrospect/","publishdate":"2019-06-28T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-channel-6-retrospect/","summary":"","tags":["SOFALookout","SOFAChannel"],"title":"蚂蚁金服轻量级监控分析系统解析 | SOFAChannel#6 直播整理","type":"blog","url":"/blog/sofa-channel-6-retrospect/","wordcount":0},{"author":"卓与","categories":"SOFAStack","content":"","date":1561359600,"description":"本文整理自 GIAC（GLOBAL INTERNET ARCHITECTURE CONFERENCE）全球互联网架构大会，蚂蚁金服平台数据技术事业群技术专家石建伟（花名：卓与）的分享。","dir":"blog/service-mesh-giac-2019/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"7cfc7c8a7b735c31418186aae0ca99a2","permalink":"/blog/service-mesh-giac-2019/","publishdate":"2019-06-24T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/service-mesh-giac-2019/","summary":"","tags":["SOFAStack","Service mesh"],"title":"蚂蚁金服 Service Mesh 落地实践与挑战 | GIAC 实录","type":"blog","url":"/blog/service-mesh-giac-2019/","wordcount":0},{"author":"雾渊","categories":"SOFAArk","content":"","date":1560409200,"description":"本文来自 SOFAArk 用户—溢米教育投稿，分享其内部使用 SOFAArk 组件后极大提高内部推荐系统的开发效率和稳定性的案例。","dir":"blog/sofastack-user-yimi/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"967e9a815b24a3b000d5ecd90c59b8fb","permalink":"/blog/sofastack-user-yimi/","publishdate":"2019-06-13T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofastack-user-yimi/","summary":"","tags":["SOFAArk"],"title":"溢米教育推荐平台的效率与稳定性建设 | SOFAStack 用户说","type":"blog","url":"/blog/sofastack-user-yimi/","wordcount":0},{"author":"潘潘","categories":"SOFAChannel","content":"","date":1560312000,"description":"6 月 12 日周四晚 7 点，线上直播第 6 期。","dir":"activities/sofa-channel-6/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"29a5673d4608770bbe7598954fcecc78","permalink":"/activities/sofa-channel-6/","publishdate":"2019-06-12T12:00:00+08:00","readingtime":0,"relpermalink":"/activities/sofa-channel-6/","summary":"","tags":["SOFAChannel","SOFALookout"],"title":"SOFAChannel#6：轻量级监控分析系统 SOFALookout 原理讲解和功能演示","type":"activities","url":"/activities/sofa-channel-6/","wordcount":0},{"author":"卿祤、 首仁","categories":"SOFAStack","content":"","date":1559890800,"description":"这将是一系列技术分享文章的开端，基于在实际金融机构和场景中落地的云原生产品项目经验，我们希望和大家一起分享从中获得的洞察和总结，探讨我们的产品观点、技术实现，并非常期待大家的建议和指点，欢迎一起交流共创。","dir":"blog/sofa-financial-cloud-native-exploration/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"9c93781d7d4b980b1990e4655445d4bf","permalink":"/blog/sofa-financial-cloud-native-exploration/","publishdate":"2019-06-07T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-financial-cloud-native-exploration/","summary":"","tags":["SOFAStack"],"title":"金融级云原生探索实践系列 - 开篇","type":"blog","url":"/blog/sofa-financial-cloud-native-exploration/","wordcount":0},{"author":"墨睿","categories":"SOFALookout","content":"","date":1559804400,"description":"本文给大家介绍下 SOFALookout 服务器端主要提供的特性以及使用方式。","dir":"blog/sofa-lookout-server-open-source/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"d80fe27f8652b6e8a8da8d712a90a027","permalink":"/blog/sofa-lookout-server-open-source/","publishdate":"2019-06-06T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-lookout-server-open-source/","summary":"","tags":["SOFALookout"],"title":"轻量级监控分析系统 SOFALookout 服务端开源","type":"blog","url":"/blog/sofa-lookout-server-open-source/","wordcount":0},{"author":"Jimmy Song","categories":null,"content":"SOFAStack Cloud Native Workshop hosted by Ant Financial (KubeCon China 2019 Co-Located Event)  Date: Monday, 24 June, 2019 Time: 9:00 – 16:00 Location: Shanghai Expo Centre Room 616 Registration Fees: Complimentary Register here: https://www.lfasiallc.com/events/kubecon-cloudnativecon-china-2019/co-located-events/#sofastack-cloud-native-workshop Note: This event is hands-on, please bring your personal computer. The language of communication in this workshop is Chinese.  SOFAStack (Scalable Open Financial Architecture Stack) is a financial-grade distributed architecture independently developed and open sourced by Ant Financial. It contains the components required to build a financial-grade cloud native architecture. It is a best practice tempered in financial scenarios. SOFAStack official website: https://www.sofastack.tech/\nAttendees can get:\n Rapidly build microservices based on SOFAStack Best Practices for Distributed Transactions in Financial Scenarios Cloud native deployment experience based on Kubernetes Service Mesh basic usage scenario experience on the cloud Get started on Serverless apps Easily build applications on the cloud based on Serverless  How to Register: Pre-registration is required. To register for SOFAStack Cloud Native Workshop, add it on during your KubeCon + CloudNativeCon + Open Source Summit registration. You can get KubeCon half price tickets with KCCN19COMATF coupon code!\nFor questions regarding this event, please reach out to jingchao.sjc@antfin.com.\nEvent details 9:00 - 9:20 Opening speech SOFAStack Cloud Native\n9:20 - 10:10 Quickly build microservices with SOFAStack by Jie Cao\nBuilding a microservices application based on the SOFAStack. Through this workshop, you can learn how to report application monitoring data, service link data, and publish and subscribe services in the SOFAStack.\n10:15 - 11:05 SOFABoot dynamic module practice by Guolei Song\nIn this workshop, you can implement the combined deployment and dynamic module push capabilities provided by SOFAArk based on the ARK control capabilities of SOFADashboard.\n11:10 - 12:00 Using Seata to guarantee the consistency of payment by Long Chen\nUnder the microservice architecture, the distributed transaction problem is an industry problem. Through this workshop, you can understand the background of distributed transaction problems under distributed architecture, as well as common distributed transaction solutions and experience on how to use the open source distributed transaction framework - Seata\u0026amp;rsquo;s AT mode, TCC mode to solve the ultimate consistency of the business data.\n12:00 - 13:00 Lunch time\n13:00 - 13:30 Cloud Native exlporation and practice in Ant Fnancial by Renjie Yu\n13:30 - 14:40 Migrating to cloud based on Serverless by Yitao Dong\nAs one of the pioneering technologies of cloud technology, Serverless architecture allows you to further improve resource utilization and focus on business development. Through our workshop, you can experience new product …","date":1559643600,"description":"","dir":"activities/sofastack-cloud-native-workshop/","fuzzywordcount":600,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"57c6b0262af34c2010179000834d8363","permalink":"/en/activities/sofastack-cloud-native-workshop/","publishdate":"2019-06-04T10:20:00Z","readingtime":3,"relpermalink":"/en/activities/sofastack-cloud-native-workshop/","summary":"SOFAStack Cloud Native Workshop hosted by Ant Financial (KubeCon China 2019 Co-Located Event)  Date: Monday, 24 June, 2019 Time: 9:00 – 16:00 Location: Shanghai Expo Centre Room 616 Registration Fees: Complimentary Register here: https://www.lfasiallc.com/events/kubecon-cloudnativecon-china-2019/co-located-events/#sofastack-cloud-native-workshop Note: This event is hands-on, please bring your personal computer. The language of communication in this workshop is Chinese.  SOFAStack (Scalable Open Financial Architecture Stack) is a financial-grade distributed architecture independently developed and open sourced by Ant Financial.","tags":["KubeCon","Workshop","Cloud Native"],"title":"KubeCon China 2019 Co-Located Event SOFAStack Cloud Native Workshop","type":"activities","url":"/en/activities/sofastack-cloud-native-workshop/","wordcount":515},{"author":"宋净超","categories":null,"content":"","date":1559643600,"description":"","dir":"activities/sofastack-cloud-native-workshop/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"57c6b0262af34c2010179000834d8363","permalink":"/activities/sofastack-cloud-native-workshop/","publishdate":"2019-06-04T10:20:00Z","readingtime":0,"relpermalink":"/activities/sofastack-cloud-native-workshop/","summary":"","tags":["KubeCon","Workshop","Cloud Native"],"title":"KubeCon 上海同场活动 SOFAStack Cloud Native Workshop","type":"activities","url":"/activities/sofastack-cloud-native-workshop/","wordcount":0},{"author":"卫恒","categories":"SOFAMeetup","content":"","date":1559286000,"description":"本文根据 5月26日 SOFA Meetup#2上海站 《使用 SOFAStack 快速构建微服务》主题分享整理，着重分享如何使用 SOFADashboard 来管控 SOFAArk ，对于 SOFAArk 中的一些基础概念和知识不过多涉及。","dir":"blog/sofa-meetup-2-2-retrospect/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"61a156b1a9f1a80f555200bfea5a20b6","permalink":"/blog/sofa-meetup-2-2-retrospect/","publishdate":"2019-05-31T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-meetup-2-2-retrospect/","summary":"","tags":["SOFAMeetup","SOFAArk","SOFADashboard"],"title":"基于 SOFAArk 和 SOFADashboard 实现动态模块管控 | Meetup#2 回顾","type":"blog","url":"/blog/sofa-meetup-2-2-retrospect/","wordcount":0},{"author":"玄北","categories":"SOFAStack","content":"","date":1559113200,"description":"本文根据 5月26日 SOFA Meetup#2 上海站 《当 Spring Cloud 遇上 SOFAStack》主题分享整理。","dir":"blog/sofa-meetup-2-1-retrospect/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"ffc229811fe6c3065b010a9730e6d895","permalink":"/blog/sofa-meetup-2-1-retrospect/","publishdate":"2019-05-29T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-meetup-2-1-retrospect/","summary":"","tags":["SOFAStack","SOFAMeetup"],"title":"当 Spring Cloud 遇上 SOFAStack | Meetup#2 回顾","type":"blog","url":"/blog/sofa-meetup-2-1-retrospect/","wordcount":0},{"author":"敖小剑","categories":"Service Mesh","content":"","date":1559026800,"description":"本文内容整理自5月25日在 Kubernetes \u0026 Cloud Native Meetup 上海站发表的主题演讲。","dir":"blog/service-mesh-development-trend-1/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"8756e6985e0df28a5150ebd3af0e48c5","permalink":"/blog/service-mesh-development-trend-1/","publishdate":"2019-05-28T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/service-mesh-development-trend-1/","summary":"","tags":["Service Mesh"],"title":"Service Mesh 发展趋势：云原生中流砥柱","type":"blog","url":"/blog/service-mesh-development-trend-1/","wordcount":0},{"author":"米麒麟","categories":"SOFAJRaft","content":"","date":1558681200,"description":"本文为《剖析 | SOFAJRaft 实现原理》第二篇，本篇作者米麒麟，来自陆金所。","dir":"blog/sofa-jraft-rheakv/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"4d79102c8300ca628483bdba44c13049","permalink":"/blog/sofa-jraft-rheakv/","publishdate":"2019-05-24T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-jraft-rheakv/","summary":"","tags":["SOFAJRaft","SOFALab","剖析 | SOFAJRaft 实现原理"],"title":"SOFAJRaft 实现原理 - SOFAJRaft-RheaKV 是如何使用 Raft 的","type":"blog","url":"/blog/sofa-jraft-rheakv/","wordcount":0},{"author":"Linux 中国老王","categories":"SOFAStack","content":"","date":1558681200,"description":"SOFAStack 开源如何在蚂蚁金服内部发生、是如何实操的、如何运营，Lunix中国老王进行了采访和分析，欢迎阅读","dir":"blog/sofastack-linux-china/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"c1896b9b50b60432bb345d583a9be24a","permalink":"/blog/sofastack-linux-china/","publishdate":"2019-05-24T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofastack-linux-china/","summary":"","tags":["SOFAStack"],"title":"大公司开源怎么做？SOFAStack给出了一个很好的例子","type":"blog","url":"/blog/sofastack-linux-china/","wordcount":0},{"author":"花肉","categories":"SOFAMeetup","content":"","date":1558437600,"description":"SOFA Meetup#2 上海站-使用 SOFAStack 快速构建微服务，5 月 26 日周日下午 13 点，上海市徐汇区田林路200号A7栋一楼。","dir":"activities/sofa-meetup-2/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"5765309cb693fc8cc45958ecab5a9c3b","permalink":"/activities/sofa-meetup-2/","publishdate":"2019-05-21T11:20:00Z","readingtime":0,"relpermalink":"/activities/sofa-meetup-2/","summary":"","tags":["SOFAMeetup","SOFAStack"],"title":"SOFA Meetup#2 上海站——使用 SOFAStack 快速构建微服务","type":"activities","url":"/activities/sofa-meetup-2/","wordcount":0},{"author":"SOFA 团队","categories":"SOFAStack","content":"","date":1557990000,"description":"SOFAStack 将启用独立 Group，社区更加开放今日。感谢大家的一路支持，未来，我们继续相伴","dir":"blog/sofastack-independent-droup/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"f25b8521e498ebce982a98b882f941b3","permalink":"/blog/sofastack-independent-droup/","publishdate":"2019-05-16T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofastack-independent-droup/","summary":"","tags":["SOFAStack"],"title":"持续技术开放 | SOFAStack 启用独立 Group","type":"blog","url":"/blog/sofastack-independent-droup/","wordcount":0},{"author":"SQLFlow","categories":"SQLFlow","content":"","date":1557903600,"description":"本文整理于 QCon 全球软件开发大会（北京站）2019 上，蚂蚁金服副 CTO 胡喜正式宣布开源机器学习工具 SQLFlow 的现场演讲。","dir":"blog/sqlflow-open-source/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"fcd6535619144aec695ee9afbf2fc36b","permalink":"/blog/sqlflow-open-source/","publishdate":"2019-05-15T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sqlflow-open-source/","summary":"","tags":["SQLFlow"],"title":"蚂蚁金服开源机器学习工具 SQLFlow，技术架构独家解读","type":"blog","url":"/blog/sqlflow-open-source/","wordcount":0},{"author":"花肉","categories":"SOFAChannel","content":"","date":1557310800,"description":"5 月 16 日周四晚 7 点，线上直播。","dir":"activities/sofa-channel-5/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"e000553c2c76f43ed8df5b8e56491a7b","permalink":"/activities/sofa-channel-5/","publishdate":"2019-05-08T10:20:00Z","readingtime":0,"relpermalink":"/activities/sofa-channel-5/","summary":"","tags":["SOFAChannel","SOFAActs"],"title":"SOFAChannel#5：给研发工程师的代码质量利器 —— 自动化测试框架 SOFAActs","type":"activities","url":"/activities/sofa-channel-5/","wordcount":0},{"author":"米麒麟","categories":"SOFAJRaft","content":"","date":1557066600,"description":"本文为《剖析 | SOFAJRaft 实现原理》第一篇，本篇作者米麒麟，来自陆金所。。","dir":"blog/sofa-jraft-algorithm-storage-module-deep-dive/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"b48c76bf76b0c77d11af1a6265c9b78b","permalink":"/blog/sofa-jraft-algorithm-storage-module-deep-dive/","publishdate":"2019-05-05T14:30:00Z","readingtime":0,"relpermalink":"/blog/sofa-jraft-algorithm-storage-module-deep-dive/","summary":"","tags":["SOFAJRaft","SOFALab","剖析 | SOFAJRaft 实现原理"],"title":"SOFAJRaft 实现原理 - 生产级 Raft 算法库存储模块剖析","type":"blog","url":"/blog/sofa-jraft-algorithm-storage-module-deep-dive/","wordcount":0},{"author":"卫恒","categories":"SOFADashboard","content":"","date":1557039600,"description":"为了建设更完整的 SOFAStack 微服务体系，我们计划发起 SOFADashboard 项目，计划通过社区的方式共建，将其打造为一站式的 SOFAStack 管控平台。欢迎共建~","dir":"blog/sofa-dashboard-open-source/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"f9a78639fd427da4c3ea19d32e8420e7","permalink":"/blog/sofa-dashboard-open-source/","publishdate":"2019-05-05T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-dashboard-open-source/","summary":"","tags":["SOFADashboard"],"title":"SOFADashboard 启动开源共建 | SOFAStack 一站式管控平台","type":"blog","url":"/blog/sofa-dashboard-open-source/","wordcount":0},{"author":"老王","categories":"SOFAStack","content":"","date":1556607600,"description":"谈话中，鲁直反问的“你为什么不开源？”这句话让我印象深刻。-- 老王","dir":"blog/antfin-middleware-open-source-key-figure-luzhi/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"6779f59b05648131b0d635a71cd95d0d","permalink":"/blog/antfin-middleware-open-source-key-figure-luzhi/","publishdate":"2019-04-30T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/antfin-middleware-open-source-key-figure-luzhi/","summary":"","tags":["SOFAStack"],"title":"对话鲁直：蚂蚁金服中间件的开源头羊 | 穿山甲专访","type":"blog","url":"/blog/antfin-middleware-open-source-key-figure-luzhi/","wordcount":0},{"author":"力鲲","categories":"SOFAJRaft","content":"","date":1556202600,"description":"本文根据 SOFAChannel#4 直播分享整理，主题：SOFAJRaft 详解。","dir":"blog/sofa-jraft-deep-dive/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"f2d4559ece4184ef09b96899a1aeb900","permalink":"/blog/sofa-jraft-deep-dive/","publishdate":"2019-04-25T14:30:00Z","readingtime":0,"relpermalink":"/blog/sofa-jraft-deep-dive/","summary":"","tags":["SOFAJRaft","剖析 | SOFAJRaft 实现原理","SOFALab"],"title":"蚂蚁金服开源 SOFAJRaft 详解| 生产级高性能 Java 实现","type":"blog","url":"/blog/sofa-jraft-deep-dive/","wordcount":0},{"author":"琪祥","categories":"SOFARegistry","content":"","date":1556175600,"description":"本文为《剖析 | SOFARegistry 框架》第一篇，本篇作者琪祥。","dir":"blog/sofa-registry-introduction/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"04394de7d7b0ecba5303baa6949a40d4","permalink":"/blog/sofa-registry-introduction/","publishdate":"2019-04-25T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-registry-introduction/","summary":"","tags":["SOFARegistry","剖析 | SOFARegistry 框架","SOFALab"],"title":"海量数据下的注册中心 - SOFARegistry 架构介绍","type":"blog","url":"/blog/sofa-registry-introduction/","wordcount":0},{"author":"觉生","categories":"Seata","content":"","date":1556089200,"description":"本文根据 SOFAChannel#4 直播分享整理，主题：分布式事务 Seata TCC 模式深度解析。","dir":"blog/sofa-channel-4-retrospect/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"75094c50f180bcd31d84bc687e4c93e0","permalink":"/blog/sofa-channel-4-retrospect/","publishdate":"2019-04-24T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-channel-4-retrospect/","summary":"","tags":["Seata","SOFAChannel"],"title":"分布式事务 Seata TCC 模式深度解析 | SOFAChannel#4 直播整理","type":"blog","url":"/blog/sofa-channel-4-retrospect/","wordcount":0},{"author":"青勤","categories":"SOFAActs","content":"","date":1556089200,"description":"本文根据 SOFAChannel#5 直播分享整理，主题：给研发工程师的代码质量利器 —— 自动化测试框架 SOFAActs。","dir":"blog/sofa-channel-5-retrospect/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"1f088b226caf9430dc6aafb3f248316d","permalink":"/blog/sofa-channel-5-retrospect/","publishdate":"2019-04-24T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-channel-5-retrospect/","summary":"","tags":["SOFAActs","SOFAChannel"],"title":"给研发工程师的代码质量利器 | SOFAChannel#5 直播整理","type":"blog","url":"/blog/sofa-channel-5-retrospect/","wordcount":0},{"author":"SOFAStack","categories":"SOFAStack","content":"","date":1555333200,"description":"这一年，感谢有你。","dir":"blog/sofastack-anniversary-1/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"82d2afd98352ab185691773fcd616233","permalink":"/blog/sofastack-anniversary-1/","publishdate":"2019-04-15T21:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofastack-anniversary-1/","summary":"","tags":["SOFAStack"],"title":"Hey, SOFAer！有些话想对你说：","type":"blog","url":"/blog/sofastack-anniversary-1/","wordcount":0},{"author":"李钊","categories":"Seata","content":"","date":1554793200,"description":"在这篇文章，将重点介绍 Seata 其中的核心角色 TC，也就是事务协调器。","dir":"blog/seata-server-deep-analysis/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"3354370f3ca29297c819c279994e0a0d","permalink":"/blog/seata-server-deep-analysis/","publishdate":"2019-04-09T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/seata-server-deep-analysis/","summary":"","tags":["Seata"],"title":"深度剖析一站式分布式事务方案 Seata-Server","type":"blog","url":"/blog/seata-server-deep-analysis/","wordcount":0},{"author":"潘潘","categories":"SOFAChannel","content":"","date":1554783000,"description":"4 月 18 日周四晚 7 点，线上直播第 4 期。","dir":"activities/sofa-channel-4/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"0e0d4d4a75723cc408567a65aab0c3df","permalink":"/activities/sofa-channel-4/","publishdate":"2019-04-09T12:10:00+08:00","readingtime":0,"relpermalink":"/activities/sofa-channel-4/","summary":"","tags":["SOFAChannel","Seata"],"title":"SOFAChannel#4：分布式事务 Seata TCC 模式深度解析","type":"activities","url":"/activities/sofa-channel-4/","wordcount":0},{"author":"绍辉","categories":"Seata","content":"","date":1554706800,"description":"本文根据 SOFAMeetup#1 分享整理，详细讲述了分布式事务在蚂蚁金服的发展。","dir":"blog/sofa-meetup-1-seata/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"fd2c8c1c6ee4231c6987a1d556ce4089","permalink":"/blog/sofa-meetup-1-seata/","publishdate":"2019-04-08T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-meetup-1-seata/","summary":"","tags":["Seata","SOFAMeetup"],"title":"蚂蚁金服分布式事务开源以及实践 | SOFA 开源一周年献礼","type":"blog","url":"/blog/sofa-meetup-1-seata/","wordcount":0},{"author":"力鲲","categories":"SOFAJRaft","content":"","date":1554188400,"description":"本文根据 SOFA Meetup#1 北京站 现场分享整理，完整的分享视频回顾获取方式见文章底部。","dir":"blog/sofa-meetup-1-jraft/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"614c6031770d98ed7d0c23c3276d72ef","permalink":"/blog/sofa-meetup-1-jraft/","publishdate":"2019-04-02T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-meetup-1-jraft/","summary":"","tags":["SOFAJRaft","SOFAMeetup"],"title":"详解蚂蚁金服 SOFAJRaft | 生产级高性能 Java 实现","type":"blog","url":"/blog/sofa-meetup-1-jraft/","wordcount":0},{"author":"张磊、心贵、临石、徙远、衷源、浔鸣","categories":"Kubernetes","content":"","date":1553756400,"description":"在本篇文章中，我们将 1.14 的 Release Note 按照主题进行了重新归纳和梳理，按照类别对重要变更进行了技术剖析和讨论。希望这种“分类解读”的方式，能够帮助大家更好的理解 1.14 这个发布的核心内容。","dir":"blog/k8s-1.14-release-note/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"8dddcb73179e656ccebedbba2d4e9131","permalink":"/blog/k8s-1.14-release-note/","publishdate":"2019-03-28T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/k8s-1.14-release-note/","summary":"","tags":["Kubernetes"],"title":"Kubernetes 1.14 发布了，Release Note 该怎么读？","type":"blog","url":"/blog/k8s-1.14-release-note/","wordcount":0},{"author":"Yu Shuqiang","categories":"SOFATracer","content":"","date":1553697000,"description":"本文为《剖析 | SOFATracer 框架》最后一篇，本篇作者 Yu Shuqiang，来自小象生鲜。","dir":"blog/sofa-tracer-event-tracing-deep-dive/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"35dc2221b95ec62fd2aa03fca6367554","permalink":"/blog/sofa-tracer-event-tracing-deep-dive/","publishdate":"2019-03-27T14:30:00Z","readingtime":0,"relpermalink":"/blog/sofa-tracer-event-tracing-deep-dive/","summary":"","tags":["SOFATracer","SOFALab","剖析 | SOFATracer 框架"],"title":"蚂蚁金服开源分布式链路跟踪组件 SOFATracer 埋点机制剖析","type":"blog","url":"/blog/sofa-tracer-event-tracing-deep-dive/","wordcount":0},{"author":"尚彧","categories":"SOFARegistry","content":"","date":1553697000,"description":"此次，我们宣布开源蚂蚁金服注册中心 SOFARegistry 作为一周年的礼物之一，本文为根据现场分享整理的详细介绍。","dir":"blog/sofa-registry-deep-dive/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"86b3010d0f85f6711d60de29a244ed7e","permalink":"/blog/sofa-registry-deep-dive/","publishdate":"2019-03-27T14:30:00Z","readingtime":0,"relpermalink":"/blog/sofa-registry-deep-dive/","summary":"","tags":["SOFARegistry","SOFAMeetup"],"title":"蚂蚁金服开源服务注册中心 SOFARegistry | SOFA 开源一周年献礼","type":"blog","url":"/blog/sofa-registry-deep-dive/","wordcount":0},{"author":"尚彧","categories":"SOFARegistry","content":"","date":1553670000,"description":"本文根据 SOFA Meetup#1 北京站 现场分享整理，完整的分享 PPT 获取方式见文章底部。","dir":"blog/sofa-meetup-1-registry/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"0e3d1f0cf167e7afea39c2435ceefcfd","permalink":"/blog/sofa-meetup-1-registry/","publishdate":"2019-03-27T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-meetup-1-registry/","summary":"","tags":["SOFARegistry","SOFAMeetup"],"title":"蚂蚁金服开源服务注册中心 SOFARegistry | SOFA 开源一周年献礼","type":"blog","url":"/blog/sofa-meetup-1-registry/","wordcount":0},{"author":"蚂蚁金服团队","categories":"seata","content":"","date":1553583600,"description":"Fescar 0.4.0 版本发布了 TCC 模式，由蚂蚁金服团队贡献，欢迎大家试用。","dir":"blog/seata-tcc-theory-design-realization/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"45ef8a72beefcd26f4f62e7bdb34671c","permalink":"/blog/seata-tcc-theory-design-realization/","publishdate":"2019-03-26T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/seata-tcc-theory-design-realization/","summary":"","tags":["seata"],"title":"TCC 理论及设计实现指南介绍","type":"blog","url":"/blog/seata-tcc-theory-design-realization/","wordcount":0},{"author":"蚂蚁金服团队","categories":"seata","content":"","date":1553410800,"description":"Fescar 0.4.0 版本发布了 TCC 模式，由蚂蚁金服团队贡献，欢迎大家试用。","dir":"blog/seata-tcc-applicable-models-scenarios/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"fa8436ce2760fafb880427799a763f32","permalink":"/blog/seata-tcc-applicable-models-scenarios/","publishdate":"2019-03-24T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/seata-tcc-applicable-models-scenarios/","summary":"","tags":["seata"],"title":"TCC 适用模型与适用场景分析","type":"blog","url":"/blog/seata-tcc-applicable-models-scenarios/","wordcount":0},{"author":"善逝","categories":"SOFAArk","content":"","date":1553065200,"description":"本篇文章为 SOFAArk 0.6.0 的新特性介绍。","dir":"blog/sofa-ark-0.6.0/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"7a25cfa30d66586c83abafd947447de3","permalink":"/blog/sofa-ark-0.6.0/","publishdate":"2019-03-20T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-ark-0.6.0/","summary":"","tags":["SOFAArk"],"title":"蚂蚁金服 SOFAArk 0.6.0 新特性介绍 | 模块化开发容器","type":"blog","url":"/blog/sofa-ark-0.6.0/","wordcount":0},{"author":"炎竹","categories":"SOFAActs","content":"","date":1552546800,"description":"SOFAStack 体系，基于模型驱动的自动化接口测试框架 SOFAACTS。","dir":"blog/sofa-acts-automated-testing-framework/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"b76c650b1a69560fe38c8e4f237f6207","permalink":"/blog/sofa-acts-automated-testing-framework/","publishdate":"2019-03-14T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-acts-automated-testing-framework/","summary":"","tags":["SOFAActs"],"title":"SOFAStack 开源自动化测试框架 SOFAACTS","type":"blog","url":"/blog/sofa-acts-automated-testing-framework/","wordcount":0},{"author":"家纯","categories":"SOFAJRaft","content":"","date":1552374000,"description":"本文为 SOFAJRaft 的基础解析，欢迎阅读~","dir":"blog/sofa-jraft-production-level-algorithm-library/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"a2e98969240f05af10554781f4ab81ef","permalink":"/blog/sofa-jraft-production-level-algorithm-library/","publishdate":"2019-03-12T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-jraft-production-level-algorithm-library/","summary":"","tags":["SOFAJRaft","SOFALab"],"title":"SOFAStack 开源 SOFAJRaft：生产级 Java Raft 算法库","type":"blog","url":"/blog/sofa-jraft-production-level-algorithm-library/","wordcount":0},{"author":"Linux 中国 老王","categories":"SOFAStack","content":"","date":1552287600,"description":"我们选择将 SOFA 中间件框架逐步开源出来，在贡献给社区的同时，也期待社区、合作伙伴甚至客户，都能够一起参与共建，形成行业标准和最佳实践。","dir":"blog/financial-technology-meet-open-source/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"620bf66a94dd1d8b872cb4cb90ca3028","permalink":"/blog/financial-technology-meet-open-source/","publishdate":"2019-03-11T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/financial-technology-meet-open-source/","summary":"","tags":["SOFAStack"],"title":"蚂蚁金服总监杨冰：金融科技公司为什么要拥抱开源？ | 穿山甲专访","type":"blog","url":"/blog/financial-technology-meet-open-source/","wordcount":0},{"author":"潘潘","categories":"SOFAMeetup","content":"","date":1552277400,"description":"SOFA Meetup#1 北京站，3 月 24 日周日下午 13 点，北京中关村创业大街氪空间。","dir":"activities/sofa-meetup-1/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"dd713adb17a610bef8a0f6ed06cace55","permalink":"/activities/sofa-meetup-1/","publishdate":"2019-03-11T12:10:00+08:00","readingtime":0,"relpermalink":"/activities/sofa-meetup-1/","summary":"","tags":["SOFAMeetup","SOFAStack"],"title":"SOFA Meetup#1 北京站——服务注册中心、分布式事务重磅发布","type":"activities","url":"/activities/sofa-meetup-1/","wordcount":0},{"author":"SOFA 团队","categories":"SOFARPC","content":"","date":1551769200,"description":"最新的 SOFARPC 5.5.1 已经发布啦，本文给大家介绍下 SOFARPC v5.5.x 系列主要提供的特性以及使用方式。","dir":"blog/sofarpc-5.5.x-nacos-hystrix/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"c712254801354ae1b1bd22cd39b80ec2","permalink":"/blog/sofarpc-5.5.x-nacos-hystrix/","publishdate":"2019-03-05T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofarpc-5.5.x-nacos-hystrix/","summary":"","tags":["SOFARPC"],"title":"SOFARPC 5.5.X 新版发布 | 集成 Nacos 与 Hystrix","type":"blog","url":"/blog/sofarpc-5.5.x-nacos-hystrix/","wordcount":0},{"author":"花肉","categories":"SOFAChannel","content":"","date":1551349200,"description":"本次为下半场，2 月 28 日晚 7 点，线上直播。","dir":"activities/sofa-channel-3/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"202f32cfe0c8a1c3aacbf435389a956f","permalink":"/activities/sofa-channel-3/","publishdate":"2019-02-28T10:20:00Z","readingtime":0,"relpermalink":"/activities/sofa-channel-3/","summary":"","tags":["SOFAChannel","SOFARPC"],"title":"SOFAChannel#3：SOFARPC 性能优化（下）—— 手把手带你性能调优（含 Demo）","type":"activities","url":"/activities/sofa-channel-3/","wordcount":0},{"author":"碧远","categories":"SOFARPC","content":"","date":1551337200,"description":"本文根据 SOFAChannel#3 直播分享整理，进一步分享 SOFARPC 在性能上做的一些优化。","dir":"blog/sofa-channel-3-retrospect/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"7a816fa5f942ce857c10ebb1c416482d","permalink":"/blog/sofa-channel-3-retrospect/","publishdate":"2019-02-28T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-channel-3-retrospect/","summary":"","tags":["SOFARPC","SOFAChannel"],"title":"SOFARPC 性能优化实践（下）| SOFAChannel#3 直播整理","type":"blog","url":"/blog/sofa-channel-3-retrospect/","wordcount":0},{"author":"心贵","categories":"Kubernetes","content":"","date":1551078000,"description":"希望在阅读完此文章之后，你可以从 “我需要一个 Linux VM 做开发、测试和部署”，变成 “我需要一个 Kubernetes 做开发、测试和部署”。","dir":"blog/kubernetes-the-next-gen-os/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"09e6dbd10bffdeea13865fc45e3b3ee5","permalink":"/blog/kubernetes-the-next-gen-os/","publishdate":"2019-02-25T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/kubernetes-the-next-gen-os/","summary":"","tags":["Kubernetes"],"title":"Kubernetes 是下一代操作系统 | 面向 Kubernetes 编程","type":"blog","url":"/blog/kubernetes-the-next-gen-os/","wordcount":0},{"author":"碧远","categories":"SOFARPC","content":"","date":1551078000,"description":"本文根据 SOFAChannel#2 直播分享整理，主要分享 SOFARPC 在性能上做的一些优化。","dir":"blog/sofa-channel-2-retrospect/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"6751c882f7879a7dd9c9f49823410ffc","permalink":"/blog/sofa-channel-2-retrospect/","publishdate":"2019-02-25T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-channel-2-retrospect/","summary":"","tags":["SOFARPC","SOFAChannel"],"title":"SOFARPC 性能优化实践（上）| SOFAChannel#2 直播整理","type":"blog","url":"/blog/sofa-channel-2-retrospect/","wordcount":0},{"author":"花肉","categories":"SOFAChannel","content":"","date":1550744400,"description":"本次为上半场，2 月 21 日晚 7 点，线上直播。","dir":"activities/sofa-channel-2/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"3140990819c0601c041bf5091405220b","permalink":"/activities/sofa-channel-2/","publishdate":"2019-02-21T10:20:00Z","readingtime":0,"relpermalink":"/activities/sofa-channel-2/","summary":"","tags":["SOFAChannel","SOFARPC"],"title":"SOFAChannel#2：SOFARPC 性能优化（上）—— 详解优化设计点","type":"activities","url":"/activities/sofa-channel-2/","wordcount":0},{"author":"卫恒","categories":"SOFATracer","content":"","date":1550744400,"description":"本文为《剖析 | SOFATracer 框架》第一篇。","dir":"blog/sofa-tracer-overview/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"ff58d686746c53b81af210eaf17bb154","permalink":"/blog/sofa-tracer-overview/","publishdate":"2019-02-21T10:20:00Z","readingtime":0,"relpermalink":"/blog/sofa-tracer-overview/","summary":"","tags":["SOFATracer","SOFALab","剖析 | SOFATracer 框架"],"title":"蚂蚁金服分布式链路跟踪组件 SOFATracer 总览|剖析","type":"blog","url":"/blog/sofa-tracer-overview/","wordcount":0},{"author":"卫恒","categories":"SOFATracer","content":"","date":1550744400,"description":"本文为《剖析 | SOFATracer 框架》第二篇。","dir":"blog/sofa-tracer-response-mechanism/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"350b5d9eacee1bc4b3b604236b247a3c","permalink":"/blog/sofa-tracer-response-mechanism/","publishdate":"2019-02-21T10:20:00Z","readingtime":0,"relpermalink":"/blog/sofa-tracer-response-mechanism/","summary":"","tags":["SOFATracer","SOFALab","剖析 | SOFATracer 框架"],"title":"蚂蚁金服分布式链路跟踪组件 SOFATracer 数据上报机制和源码剖析","type":"blog","url":"/blog/sofa-tracer-response-mechanism/","wordcount":0},{"author":"米麒麟","categories":"SOFATracer","content":"","date":1550744400,"description":"本文为《剖析 | SOFATracer 框架》第四篇，本篇作者米麒麟，来自陆金所。","dir":"blog/sofa-tracer-sampling-tracking-deep-dive/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"552e5d7feb431d3ff658a0194ead7b8f","permalink":"/blog/sofa-tracer-sampling-tracking-deep-dive/","publishdate":"2019-02-21T10:20:00Z","readingtime":0,"relpermalink":"/blog/sofa-tracer-sampling-tracking-deep-dive/","summary":"","tags":["SOFATracer","SOFALab","剖析 | SOFATracer 框架"],"title":"蚂蚁金服开源分布式链路跟踪组件 SOFATracer 采样策略和源码剖析","type":"blog","url":"/blog/sofa-tracer-sampling-tracking-deep-dive/","wordcount":0},{"author":"J. Queue","categories":"SOFATracer","content":"","date":1550744400,"description":"本文为《剖析 | SOFATracer 框架》第三篇。","dir":"blog/sofa-tracer-unvarnished-transmission-slf4j-mdc/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"82a08996dd671b01595748aa2d2fa748","permalink":"/blog/sofa-tracer-unvarnished-transmission-slf4j-mdc/","publishdate":"2019-02-21T10:20:00Z","readingtime":0,"relpermalink":"/blog/sofa-tracer-unvarnished-transmission-slf4j-mdc/","summary":"","tags":["SOFATracer","SOFALab","剖析 | SOFATracer 框架"],"title":"蚂蚁金服开源分布式链路跟踪组件 SOFATracer 链路透传原理与SLF4J MDC 的扩展能力剖析","type":"blog","url":"/blog/sofa-tracer-unvarnished-transmission-slf4j-mdc/","wordcount":0},{"author":"卫恒","categories":"SOFABoot","content":"","date":1550127600,"description":"本文根据 SOFAChannel#5 直播分享整理，主题：给研发工程师的代码质量利器 —— 自动化测试框架 SOFAActs。","dir":"blog/sofa-boot-extension-practice/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"4f05313f7adf5401f3b5f499b43bb928","permalink":"/blog/sofa-boot-extension-practice/","publishdate":"2019-02-14T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-boot-extension-practice/","summary":"","tags":["SOFABoot"],"title":"SOFABoot 扩展点初体验 | SOFALab 实践系列","type":"blog","url":"/blog/sofa-boot-extension-practice/","wordcount":0},{"author":"余淮","categories":"SOFAStack","content":"","date":1548680400,"description":"本文根据 SOFAChannel#1 直播分享整理，主题：从蚂蚁金服微服务实践谈起。","dir":"blog/sofa-channel-1-retrospect/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"c7997723a3859feb5f4f8fa454b6e00e","permalink":"/blog/sofa-channel-1-retrospect/","publishdate":"2019-01-28T21:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-channel-1-retrospect/","summary":"","tags":["SOFAStack","SOFAChannel"],"title":"从蚂蚁金服微服务实践谈起 | SOFAChannel#1 直播整理","type":"blog","url":"/blog/sofa-channel-1-retrospect/","wordcount":0},{"author":"花肉","categories":"SOFAChannel","content":"","date":1547720400,"description":"首次 SOFAChannel 线上直播，1 月 17 日晚 7 点等你。","dir":"activities/sofa-channel-1/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"5c79d2fac126784ef412f107470b2924","permalink":"/activities/sofa-channel-1/","publishdate":"2019-01-17T10:20:00Z","readingtime":0,"relpermalink":"/activities/sofa-channel-1/","summary":"","tags":["SOFAChannel","SOFARPC"],"title":"SOFAChannel#1——从蚂蚁金服微服务实践谈起","type":"activities","url":"/activities/sofa-channel-1/","wordcount":0},{"author":"许文奇","categories":"SOFAStack","content":"","date":1547535600,"description":"本次分享主要会从单体架构和微服务架构的对比开始，后面重点谈一下实施金融级分布式架构的常见三个问题。","dir":"blog/distributed-arch-in-the-enterprise/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"e2f9f404c5e859e21c65fb3c2f2f0324","permalink":"/blog/distributed-arch-in-the-enterprise/","publishdate":"2019-01-15T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/distributed-arch-in-the-enterprise/","summary":"","tags":["SOFAStack"],"title":"企业实施分布式架构的挑战以及应对建议 | 上海 ATEC 科技大会实录","type":"blog","url":"/blog/distributed-arch-in-the-enterprise/","wordcount":0},{"author":"崔秀龙","categories":"Service Mesh","content":"","date":1547103600,"description":"本文根据崔秀龙在 2019 广州 Service Mesh Meetup#5 分享整理，完整的分享 PPT 获取方式见文章底部。","dir":"blog/service-mesh-meetup-5-istio-retrospect/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"88553acdb286a68c44cc9bf390855f26","permalink":"/blog/service-mesh-meetup-5-istio-retrospect/","publishdate":"2019-01-10T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/service-mesh-meetup-5-istio-retrospect/","summary":"","tags":["Service Mesh"],"title":"企业服务行业如何试水 Istio | Service Mesh Meetup 分享实录","type":"blog","url":"/blog/service-mesh-meetup-5-istio-retrospect/","wordcount":0},{"author":"敖小剑","categories":"Serverless","content":"","date":1546498800,"description":"本文根据敖小剑在 2018 年上海 GIAC 演讲内容整理，文中有 PPT 获取地址。","dir":"blog/serverless-knative-giac/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"21d3b124a0863acf6481463647b92095","permalink":"/blog/serverless-knative-giac/","publishdate":"2019-01-03T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/serverless-knative-giac/","summary":"","tags":["Serverless","Knative"],"title":"Knative：重新定义 Serverless | GIAC 实录","type":"blog","url":"/blog/serverless-knative-giac/","wordcount":0},{"author":"余淮","categories":"SOFAStack","content":"","date":1545030000,"description":"本文根据余淮在 2018 开源中国年终盛典的演讲内容整理，完整的分享 PPT 获取方式见文章底部。","dir":"blog/sofastack-oschina-2018/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"e636d50f3f49170801c38118bf711adc","permalink":"/blog/sofastack-oschina-2018/","publishdate":"2018-12-17T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofastack-oschina-2018/","summary":"","tags":["微服务","开源","实践"],"title":"蚂蚁金服微服务实践- 2018 开源中国年终盛典分享实录","type":"blog","url":"/blog/sofastack-oschina-2018/","wordcount":0},{"author":"颜洄、丞一","categories":"SOFABolt","content":"","date":1544091600,"description":"本文是对蚂蚁金服开源通信框架 SOFABolt 的协议框架解析。","dir":"blog/sofa-bolt-framework-deep-dive/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"67335ca275995497a5f28340cb13f45b","permalink":"/blog/sofa-bolt-framework-deep-dive/","publishdate":"2018-12-06T10:20:00Z","readingtime":0,"relpermalink":"/blog/sofa-bolt-framework-deep-dive/","summary":"","tags":["SOFABolt","SOFALab","剖析 | SOFABolt 框架"],"title":"蚂蚁金服开源通信框架 SOFABolt 协议框架解析","type":"blog","url":"/blog/sofa-bolt-framework-deep-dive/","wordcount":0},{"author":"鲁道","categories":"SOFABolt","content":"","date":1544091600,"description":"SOFABolt 是一款基于 Netty 最佳实践，通用、高效、稳定的通信框架，本文将重点分析 SOFABolt 的序列化机制。","dir":"blog/sofa-bolt-serialization-deep-dive/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"2145bb681760cdf3d1953bf4ed75fa60","permalink":"/blog/sofa-bolt-serialization-deep-dive/","publishdate":"2018-12-06T10:20:00Z","readingtime":0,"relpermalink":"/blog/sofa-bolt-serialization-deep-dive/","summary":"","tags":["SOFABolt","SOFALab","剖析 | SOFABolt 框架"],"title":"蚂蚁金服开源通信框架SOFABolt解析之序列化机制","type":"blog","url":"/blog/sofa-bolt-serialization-deep-dive/","wordcount":0},{"author":"水寒","categories":"SOFABolt","content":"","date":1544091600,"description":"本篇我们会依次介绍编解码的概念， TCP 粘包拆包问题，SOFABolt 私有通信协议的设计，以及SOFABolt 编解码原理，最后还会介绍一下相较于 Netty，我们做出的优化。","dir":"blog/sofa-bolt-codec-deep-dive/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"9383bfa0b8c9975e3d4b2ed4bc01a593","permalink":"/blog/sofa-bolt-codec-deep-dive/","publishdate":"2018-12-06T10:20:00Z","readingtime":0,"relpermalink":"/blog/sofa-bolt-codec-deep-dive/","summary":"","tags":["SOFABolt","SOFALab","剖析 | SOFABolt 框架"],"title":"蚂蚁金服开源通信框架SOFABolt解析之编解码机制","type":"blog","url":"/blog/sofa-bolt-codec-deep-dive/","wordcount":0},{"author":"胡萝卜、丞一","categories":"SOFABolt","content":"","date":1544091600,"description":"本篇我们会依次介绍编解码的概念， TCP 粘包拆包问题，SOFABolt 私有通信协议的设计，以及SOFABolt 编解码原理，最后还会介绍一下相较于 Netty，我们做出的优化。","dir":"blog/sofa-bolt-timeout-and-heart-beat-deep-dive/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"8f3ab1ecc952a0fc5ea40576e8b57471","permalink":"/blog/sofa-bolt-timeout-and-heart-beat-deep-dive/","publishdate":"2018-12-06T10:20:00Z","readingtime":0,"relpermalink":"/blog/sofa-bolt-timeout-and-heart-beat-deep-dive/","summary":"","tags":["SOFABolt","SOFALab","剖析 | SOFABolt 框架"],"title":"蚂蚁金服开源通信框架SOFABolt解析之超时控制机制及心跳机制","type":"blog","url":"/blog/sofa-bolt-timeout-and-heart-beat-deep-dive/","wordcount":0},{"author":"任展","categories":"SOFABolt","content":"","date":1544091600,"description":"本文将重点分析 SOFABolt 的连接管理功能。","dir":"blog/sofa-blot-connection-management-deep-dive/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"99733a6333604b8aeb8ada37d5705d36","permalink":"/blog/sofa-blot-connection-management-deep-dive/","publishdate":"2018-12-06T10:20:00Z","readingtime":0,"relpermalink":"/blog/sofa-blot-connection-management-deep-dive/","summary":"","tags":["SOFABolt","SOFALab","剖析 | SOFABolt 框架"],"title":"蚂蚁金服开源通信框架SOFABolt解析之连接管理剖析","type":"blog","url":"/blog/sofa-blot-connection-management-deep-dive/","wordcount":0},{"author":"奕杉","categories":"Service Mesh","content":"","date":1543906800,"description":"本文根据晓东在 GIAC 上海站的演讲内容整理，完整的分享 PPT 获取方式见文章底部。","dir":"blog/service-mesh-giac-2018/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"71d6ede37fa4f1d1e6c99fbd37ff2f52","permalink":"/blog/service-mesh-giac-2018/","publishdate":"2018-12-04T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/service-mesh-giac-2018/","summary":"","tags":["Service Mesh"],"title":"蚂蚁金服 Service Mesh 新型网络代理的思考与实践","type":"blog","url":"/blog/service-mesh-giac-2018/","wordcount":0},{"author":"敖小剑","categories":"Service Mesh","content":"","date":1543474800,"description":"本文根据敖小剑、龙轼在 Service Mesher Meetup 上海站的演讲内容整理，完整的分享 PPT 获取方式见文章底部。","dir":"blog/service-mesh-meetup-5-retrospect/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"5031be4287bf1a7d7921bf5133ea414c","permalink":"/blog/service-mesh-meetup-5-retrospect/","publishdate":"2018-11-29T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/service-mesh-meetup-5-retrospect/","summary":"","tags":["Service Mesh"],"title":"Service Mesh 渐进式迁移方案 | Service Mesh Meetup 实录","type":"blog","url":"/blog/service-mesh-meetup-5-retrospect/","wordcount":0},{"author":"鲁直","categories":"SOFAMesh","content":"","date":1542870000,"description":"本文根据黄挺在 CNUTCon 全球运维大会的主题分享整理，完整的分享 PPT 获取方式见文章底部。。","dir":"blog/sofa-mesh-cnutcon-2018/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"5a750edaa8c6a9759fd5e3533dd3fa4d","permalink":"/blog/sofa-mesh-cnutcon-2018/","publishdate":"2018-11-22T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-mesh-cnutcon-2018/","summary":"","tags":["SOFAMesh"],"title":"蚂蚁金服 SOFAMesh 在多语言上的探索实践","type":"blog","url":"/blog/sofa-mesh-cnutcon-2018/","wordcount":0},{"author":"明不二","categories":"SOFARPC","content":"","date":1541055600,"description":"本文为《剖析 | SOFARPC 框架》最后一篇，作者明不二，就职于华为。","dir":"blog/sofa-rpc-serialization-comparison/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"f0a5fd044fa69071a7251518ea7d69f6","permalink":"/blog/sofa-rpc-serialization-comparison/","publishdate":"2018-11-01T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-rpc-serialization-comparison/","summary":"","tags":["SOFARPC","剖析 | SOFARPC 框架","SOFALab"],"title":"【剖析 | SOFARPC 框架】之 SOFARPC 序列化比较","type":"blog","url":"/blog/sofa-rpc-serialization-comparison/","wordcount":0},{"author":"鸥波","categories":"SOFARPC","content":"","date":1540969200,"description":"本文为《剖析 | SOFARPC 框架》第十二篇，作者鸥波。","dir":"blog/sofa-rpc-cross-language-support/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"28621f1b90e6ce8edf1b3e446fa5be23","permalink":"/blog/sofa-rpc-cross-language-support/","publishdate":"2018-10-31T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-rpc-cross-language-support/","summary":"","tags":["SOFARPC","剖析 | SOFARPC 框架","SOFALab"],"title":"【剖析 | SOFARPC 框架】之SOFARPC 跨语言支持剖析","type":"blog","url":"/blog/sofa-rpc-cross-language-support/","wordcount":0},{"author":"敏古","categories":"SOFARPC","content":"","date":1540450800,"description":"本文为《剖析 | SOFARPC 框架》第十一篇，作者敏古。","dir":"blog/sofa-rpc-annotation-support/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"e68884b2feaf90e26f191de0ef49e945","permalink":"/blog/sofa-rpc-annotation-support/","publishdate":"2018-10-25T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-rpc-annotation-support/","summary":"","tags":["SOFARPC","剖析 | SOFARPC 框架","SOFALab"],"title":"【剖析 | SOFARPC 框架】系列之 SOFARPC 注解支持剖析","type":"blog","url":"/blog/sofa-rpc-annotation-support/","wordcount":0},{"author":"敖小剑","categories":"SOFAMesh","content":"","date":1539500400,"description":"在本系列文章中，我们将详解Service Mesh中的多协议解决方案x-protocol，本文介绍的是TCP协议扩展。","dir":"blog/sofa-mesh-x-protocol-tcp-protocol-extension/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"2c2876e9ae6a7a2b374b0d04cc42e6a4","permalink":"/blog/sofa-mesh-x-protocol-tcp-protocol-extension/","publishdate":"2018-10-14T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-mesh-x-protocol-tcp-protocol-extension/","summary":"","tags":["SOFAMesh"],"title":"SOFAMesh中的多协议通用解决方案x-protocol介绍系列（3）——TCP协议扩展","type":"blog","url":"/blog/sofa-mesh-x-protocol-tcp-protocol-extension/","wordcount":0},{"author":"敖小剑","categories":"SOFAMesh","content":"","date":1539154800,"description":"在本系列文章中，我们将详解Service Mesh中的多协议解决方案x-protocol，本文介绍的是快速解码转发方案。","dir":"blog/sofa-mesh-x-protocol-rapid-decode-forward/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"37ad5c3f997c173a4ceb60cc9dfd0532","permalink":"/blog/sofa-mesh-x-protocol-rapid-decode-forward/","publishdate":"2018-10-10T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-mesh-x-protocol-rapid-decode-forward/","summary":"","tags":["SOFAMesh"],"title":"SOFAMesh中的多协议通用解决方案x-protocol介绍系列（2）——快速解码转发","type":"blog","url":"/blog/sofa-mesh-x-protocol-rapid-decode-forward/","wordcount":0},{"author":"米麒麟","categories":"SOFARPC","content":"","date":1539154800,"description":"本文为《剖析 | SOFARPC 框架》第九篇，作者米麒麟，目前就职于陆金所。","dir":"blog/sofa-rpc-graceful-exit/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"6a1f6847a5ecf97e90a3a06c36f39246","permalink":"/blog/sofa-rpc-graceful-exit/","publishdate":"2018-10-10T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-rpc-graceful-exit/","summary":"","tags":["SOFARPC","剖析 | SOFARPC 框架","SOFALab"],"title":"【剖析 | SOFARPC 框架】之 SOFARPC 优雅关闭剖析","type":"blog","url":"/blog/sofa-rpc-graceful-exit/","wordcount":0},{"author":"明不二","categories":"SOFARPC","content":"","date":1539154800,"description":"本文为《剖析 | SOFARPC 框架》第十篇，作者明不二，就职于华为。","dir":"blog/sofa-rpc-routing-implementation/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"dc2f04fd097731619e17f7da6a24ae6a","permalink":"/blog/sofa-rpc-routing-implementation/","publishdate":"2018-10-10T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-rpc-routing-implementation/","summary":"","tags":["SOFARPC","剖析 | SOFARPC 框架","SOFALab"],"title":"【剖析 | SOFARPC 框架】之 SOFARPC 路由实现剖析","type":"blog","url":"/blog/sofa-rpc-routing-implementation/","wordcount":0},{"author":"敖小剑","categories":"SOFAMesh","content":"","date":1538982000,"description":"在本系列文章中，我们将详解Service Mesh中的多协议解决方案x-protocol，首先介绍的是DNS通用寻址方案。","dir":"blog/sofa-mesh-x-protocol-common-address-solution/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"6429061afc56c5832c17b541943498e6","permalink":"/blog/sofa-mesh-x-protocol-common-address-solution/","publishdate":"2018-10-08T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-mesh-x-protocol-common-address-solution/","summary":"","tags":["SOFAMesh"],"title":"SOFAMesh中的多协议通用解决方案x-protocol介绍系列（1）——DNS通用寻址方案","type":"blog","url":"/blog/sofa-mesh-x-protocol-common-address-solution/","wordcount":0},{"author":"水寒","categories":"SOFARPC","content":"","date":1538550000,"description":"本文为《剖析 | SOFARPC 框架》第八篇，作者水寒，目前就职于网易。","dir":"blog/sofa-rpc-data-transmission/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"a26f5f1db99edadf48c406492ccdcaf8","permalink":"/blog/sofa-rpc-data-transmission/","publishdate":"2018-10-03T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-rpc-data-transmission/","summary":"","tags":["SOFARPC","剖析 | SOFARPC 框架","SOFALab"],"title":"【剖析 | SOFARPC 框架】之 SOFARPC 数据透传剖析","type":"blog","url":"/blog/sofa-rpc-data-transmission/","wordcount":0},{"author":"莫那·鲁道","categories":"SOFARPC","content":"","date":1537945200,"description":" 本文为《剖析 | SOFARPC 框架》第七篇，作者莫那·鲁道 ，来自 E签宝。","dir":"blog/sofa-rpc-generalized-call-implementation/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"de327dfe502c28ef0f926f17b29a6c80","permalink":"/blog/sofa-rpc-generalized-call-implementation/","publishdate":"2018-09-26T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-rpc-generalized-call-implementation/","summary":"","tags":["SOFARPC","剖析 | SOFARPC 框架","SOFALab"],"title":"【剖析 | SOFARPC 框架】之 SOFARPC 泛化调用实现剖析","type":"blog","url":"/blog/sofa-rpc-generalized-call-implementation/","wordcount":0},{"author":"畅为","categories":"SOFARPC","content":"","date":1537167600,"description":"本文为《剖析 | SOFARPC 框架》第六篇，作者畅为。","dir":"blog/sofa-rpc-single-machine-fault-culling/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"3171526788b6f17e3ffa37512918729f","permalink":"/blog/sofa-rpc-single-machine-fault-culling/","publishdate":"2018-09-17T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-rpc-single-machine-fault-culling/","summary":"","tags":["SOFARPC","剖析 | SOFARPC 框架","SOFALab"],"title":"【剖析 | SOFARPC 框架】之 SOFARPC 单机故障剔除剖析","type":"blog","url":"/blog/sofa-rpc-single-machine-fault-culling/","wordcount":0},{"author":"SOFARPCLab","categories":"SOFARPC","content":"","date":1536735600,"description":"本文为《剖析 | SOFARPC 框架》第五篇。","dir":"blog/sofa-rpc-threading-model/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"fbde29dd299a8163dafa9d571d1714e8","permalink":"/blog/sofa-rpc-threading-model/","publishdate":"2018-09-12T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-rpc-threading-model/","summary":"","tags":["SOFARPC","剖析 | SOFARPC 框架","SOFALab"],"title":"【剖析 | SOFARPC 框架】之 SOFARPC 线程模型剖析","type":"blog","url":"/blog/sofa-rpc-threading-model/","wordcount":0},{"author":"SOFARPCLab","categories":"SOFARPC","content":"","date":1536130800,"description":"本文为《剖析 | SOFARPC 框架》第四篇。","dir":"blog/sofa-rpc-synchronous-asynchronous-implementation/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"d7ab7dabc882ef32b491dc6ce551fc39","permalink":"/blog/sofa-rpc-synchronous-asynchronous-implementation/","publishdate":"2018-09-05T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-rpc-synchronous-asynchronous-implementation/","summary":"","tags":["SOFARPC","剖析 | SOFARPC 框架","SOFALab"],"title":"【剖析 | SOFARPC 框架】之 SOFARPC 同步异步实现剖析","type":"blog","url":"/blog/sofa-rpc-synchronous-asynchronous-implementation/","wordcount":0},{"author":"SOFARPCLab","categories":"SOFARPC","content":"","date":1535526000,"description":"本文为《剖析 | SOFARPC 框架》第三篇，本篇由米麒麟/碧远共同出品。","dir":"blog/sofa-rpc-connection-management-heartbeat-analysis/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"2f911034e6bec76b8b0496b7f06e10b7","permalink":"/blog/sofa-rpc-connection-management-heartbeat-analysis/","publishdate":"2018-08-29T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-rpc-connection-management-heartbeat-analysis/","summary":"","tags":["SOFARPC","剖析 | SOFARPC 框架","SOFALab"],"title":"【剖析 | SOFARPC 框架】之SOFARPC 连接管理与心跳剖析","type":"blog","url":"/blog/sofa-rpc-connection-management-heartbeat-analysis/","wordcount":0},{"author":"SOFARPCLab","categories":"SOFARPC","content":"","date":1534921200,"description":"本文为《剖析 | SOFARPC 框架》第二篇，本篇由畅为/碧远/卓与共同出品。","dir":"blog/sofa-rpc-link-tracking/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"09e24cfad0d59d40a509e893f26c59ef","permalink":"/blog/sofa-rpc-link-tracking/","publishdate":"2018-08-22T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-rpc-link-tracking/","summary":"","tags":["SOFARPC","剖析 | SOFARPC 框架","SOFALab"],"title":"【剖析 | SOFARPC 框架】之 SOFARPC 链路追踪剖析","type":"blog","url":"/blog/sofa-rpc-link-tracking/","wordcount":0},{"author":"碧远","categories":"SOFARPC","content":"","date":1533193200,"description":"本文为  剖析 SOFARPC 框架第一篇。","dir":"blog/sofa-rpc-framework-overall-extension/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"d83b816009377f7f93fcd1edf63c534d","permalink":"/blog/sofa-rpc-framework-overall-extension/","publishdate":"2018-08-02T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/sofa-rpc-framework-overall-extension/","summary":"","tags":["SOFARPC","剖析 | SOFARPC 框架","SOFALab"],"title":"【剖析 | SOFARPC 框架】之总体设计与扩展机制","type":"blog","url":"/blog/sofa-rpc-framework-overall-extension/","wordcount":0},{"author":"鲁直","categories":"SOFABoot","content":"","date":1532520754,"description":"本来将分析常见的几种模块化方案的利弊，并且介绍蚂蚁金服开源的框架 SOFA 在模块化中发挥的作用。","dir":"blog/sofastack-modular-isolation/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"796c3ab365dd1191a7777c4dbf9d0a1b","permalink":"/blog/sofastack-modular-isolation/","publishdate":"2018-07-25T12:12:34Z","readingtime":0,"relpermalink":"/blog/sofastack-modular-isolation/","summary":"","tags":["SOFABoot"],"title":"蚂蚁金服的业务系统模块化之模块化隔离方案","type":"blog","url":"/blog/sofastack-modular-isolation/","wordcount":0},{"author":"玄北","categories":"SOFABoot","content":"","date":1532175154,"description":"本文是对蚂蚁金服开源的 SOFABoot 模块化开发的介绍。","dir":"blog/sofa-boot-modular-development/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"12a378e9b4d93d3dd89e79964b63d186","permalink":"/blog/sofa-boot-modular-development/","publishdate":"2018-07-21T12:12:34Z","readingtime":0,"relpermalink":"/blog/sofa-boot-modular-development/","summary":"","tags":["SOFABoot"],"title":"基于 SOFABoot 进行模块化开发","type":"blog","url":"/blog/sofa-boot-modular-development/","wordcount":0},{"author":"善逝","categories":"SOFABoot","content":"","date":1528107154,"description":"本文将介绍 SOFABoot 类隔离组件 SOFAArk 的实现原理。","dir":"blog/sofa-boot-class-isolation-deep-dive/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"84c324f1230d57a0c4009566de91bb3c","permalink":"/blog/sofa-boot-class-isolation-deep-dive/","publishdate":"2018-06-04T10:12:34Z","readingtime":0,"relpermalink":"/blog/sofa-boot-class-isolation-deep-dive/","summary":"","tags":["SOFAArk","SOFABoot"],"title":"SOFABoot 类隔离原理剖析","type":"blog","url":"/blog/sofa-boot-class-isolation-deep-dive/","wordcount":0},{"author":"余淮","categories":"SOFAStack","content":"","date":1527761554,"description":"本次 SOFA 中间件将继续开源微服务体系下的几个组件：包括分布式链路追踪（SOFATracer）客户端、Metrics监控度量（SOFALookout）客户端、SOFARPC 的 Nodejs 版实现。同时还开源了 SOFABoot 下的模块化开发框架，以及 SOFARPC 的 HTTP/2 能力等。","dir":"blog/sofastack-open-source-doubles/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"00f2a1c85bfe83bf9f25ef1af9c44366","permalink":"/blog/sofastack-open-source-doubles/","publishdate":"2018-05-31T10:12:34Z","readingtime":0,"relpermalink":"/blog/sofastack-open-source-doubles/","summary":"","tags":["SOFAStack"],"title":"蚂蚁金服分布式中间件开源第二弹：丰富微服务架构体系","type":"blog","url":"/blog/sofastack-open-source-doubles/","wordcount":0},{"author":"善逝","categories":"SOFABoot","content":"","date":1526465554,"description":"本文将介绍 SOFABoot 类隔离能力的背景及其使用方式。","dir":"blog/spring-boot-sofa-boot-class-isolation-integration/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"c22dd2791732b32177419ff678b34546","permalink":"/blog/spring-boot-sofa-boot-class-isolation-integration/","publishdate":"2018-05-16T10:12:34Z","readingtime":0,"relpermalink":"/blog/spring-boot-sofa-boot-class-isolation-integration/","summary":"","tags":["SOFABoot","SpringBoot","SOFAArk"],"title":"在 Spring Boot 中集成 SOFABoot 类隔离能力","type":"blog","url":"/blog/spring-boot-sofa-boot-class-isolation-integration/","wordcount":0},{"author":"绍辉","categories":"Seata","content":"","date":1526465554,"description":"上周，分布式事务 Fescar 宣布进行品牌升级：Thanks, Fescar ❤️，Hello, Seata 🚀。","dir":"blog/seata-distributed-transaction-open-source/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"acb90bbbf0e7ec7dfb8c797bbd94efee","permalink":"/blog/seata-distributed-transaction-open-source/","publishdate":"2018-05-16T10:12:34Z","readingtime":0,"relpermalink":"/blog/seata-distributed-transaction-open-source/","summary":"","tags":["Seata"],"title":"蚂蚁金服分布式事务开源以及实践 | SOFA 开源一周年献礼","type":"blog","url":"/blog/seata-distributed-transaction-open-source/","wordcount":0},{"author":"鲁直","categories":"SOFABoot","content":"","date":1525428754,"description":"在本文中，我们将通过 Kubernetes 来演示 SOFABoot 的 Readiness Check 的能力。","dir":"blog/sofa-boot-readiness-check-in-kubernetes/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"4018d6494df0e7ecde1c4911610fc89c","permalink":"/blog/sofa-boot-readiness-check-in-kubernetes/","publishdate":"2018-05-04T10:12:34Z","readingtime":0,"relpermalink":"/blog/sofa-boot-readiness-check-in-kubernetes/","summary":"","tags":["SOFABoot","Kubernetes"],"title":"在 Kubernetes 中使用 SOFABoot 的 Readiness Check 能力","type":"blog","url":"/blog/sofa-boot-readiness-check-in-kubernetes/","wordcount":0},{"author":"余淮","categories":"SOFARPC","content":"","date":1524737554,"description":"本文是 SOFARPC 集成 Zookeeper 的介绍。","dir":"blog/sofa-rpc-zookeeper-integriation/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"34d9ac266c4b2a95cc924705212d2eb0","permalink":"/blog/sofa-rpc-zookeeper-integriation/","publishdate":"2018-04-26T10:12:34Z","readingtime":0,"relpermalink":"/blog/sofa-rpc-zookeeper-integriation/","summary":"","tags":["SOFARPC"],"title":"SOFARPC 集成 Zookeeper 注册中心","type":"blog","url":"/blog/sofa-rpc-zookeeper-integriation/","wordcount":0},{"author":"蚂蚁中间件","categories":"SOFAStack","content":"","date":1524147739,"description":"我们很高兴地宣布，今天蚂蚁金服启动分布式中间件（Scalable Open Financial Architecture，以下简称 SOFA 中间件）的开源计划！","dir":"blog/announcing-sofastack-open-source/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"6019b0e0f6e4c9569640bcdb51b5a157","permalink":"/blog/announcing-sofastack-open-source/","publishdate":"2018-04-19T14:22:19Z","readingtime":0,"relpermalink":"/blog/announcing-sofastack-open-source/","summary":"","tags":["开源"],"title":"蚂蚁金服启动分布式中间件开源计划，用于快速构建金融级云原生架构","type":"blog","url":"/blog/announcing-sofastack-open-source/","wordcount":0},{"author":"程立","categories":"SOFAStack","content":"","date":1520578800,"description":"本文发表于《金融电子化杂志》2016年12期，经授权转发，系作者原创。","dir":"blog/technical-financial-distributed-trading/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"e6da780e4d5f611c48ac55795531fb2c","permalink":"/blog/technical-financial-distributed-trading/","publishdate":"2018-03-09T15:00:00+08:00","readingtime":0,"relpermalink":"/blog/technical-financial-distributed-trading/","summary":"","tags":["SOFAStack"],"title":"金融级分布式交易的技术路径","type":"blog","url":"/blog/technical-financial-distributed-trading/","wordcount":0},{"author":null,"categories":null,"content":"Novel features: Replicated state machines 1. Replicated state machines are implemented based on logs.  Each server stores a log. Each log entry contains a command. The state machine executes commands in order.  2. Consensus algorithms for practical systems typically have the following properties:  They ensure safety. They are highly available. They do not depend on the time sequence to ensure log consistency. A command can be completed as soon as a majority of the cluster has responded to a single round of remote procedure calls (RPCs).  Drawbacks of Paxos  Paxos is exceptionally difficult to understand. Paxos does not provide a good foundation for building practical implementations.  Raft design principles  Concept decomposition  Leader election Log replication Membership changes   Raft reduces the number of states to simplify the state space.  Raft does not allow log holes and restricts the possibilities of log inconsistency. Raft uses randomized timers to simplify the leader election.    Raft consistency algorithm State  Persistent state on all servers (updated on stable storage before responding to RPCs):\n   currentTerm The latest term that the server gets (initialized to 0 on initial boot, increasing monotonically)     votedFor The candidateId that has received votes in the current term (or null if none).   Log[] Log entries. Each entry contains a command for the state machine, and the term when the entry was received by the leader.    Volatile state on all servers:\n   commitIndex The index of the highest log entry known to be committed.     lastApplied The index of the highest log entry applied to the state machine.    Volatile state on leaders:\n   nextIndex[] The index of the next log entry to be sent to each follower.     matchIndex[] The index of the highest log entry known to have been replicated on each follower.    AppendEntries RPC (log replication) Called by the leader to replicate log entries or used as heartbeats.\n Arguments:\n   term leader\u0026amp;rsquo;s term     leaderId The leader\u0026amp;rsquo;s ID that can be used to redirect clients to the leader.   prevLogIndex The index of the preceding log entry.   prevLogTerm The term of the prevLogIndex entry.   entries[] The log entries to be stored (empty for heartbeat, and the leader may send more than one for efficiency).   leaderCommit The leader\u0026amp;rsquo;s commitIndex (for committed log entries).    Results:\n   term The currentTerm for the leader to update.     success True if the follower contains log entries matching prevLogIndex and prevLogTerm.    Receiver implementation:\n Reject the log entry and return false if term \u0026amp;lt; currentTerm. Reject the log entry and return false if the log does not contain an entry at prevLogIndex whose term matches prevLogTerm. If an existing entry conflicts with a new one (same index but different terms), delete the existing entry and all that follow it. Append any new entries that do not exist in the log. If leaderCommit \u0026amp;gt; commitIndex, set commitIndex = …","date":-62135596800,"description":"","dir":"projects/sofa-jraft/raft-introduction/","fuzzywordcount":2500,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"b811e803d23b40da67657798801f8b51","permalink":"/en/projects/sofa-jraft/raft-introduction/","publishdate":"0001-01-01T00:00:00Z","readingtime":12,"relpermalink":"/en/projects/sofa-jraft/raft-introduction/","summary":"Novel features: Replicated state machines 1. Replicated state machines are implemented based on logs.  Each server stores a log. Each log entry contains a command. The state machine executes commands in order.  2. Consensus algorithms for practical systems typically have the following properties:  They ensure safety. They are highly available. They do not depend on the time sequence to ensure log consistency. A command can be completed as soon as a majority of the cluster has responded to a single round of remote procedure calls (RPCs).","tags":null,"title":"'Introduction to the Raft algorithm'","type":"projects","url":"/en/projects/sofa-jraft/raft-introduction/","wordcount":2499},{"author":null,"categories":null,"content":"Open ACTS IDE In the Packages view, right click the function name annotated by @Test, and choose ACTS Function \u0026amp;gt; Edit Test Case as shown in the following figure.\nWrite test data Prepare request parameters Prepare correct request parameter data for the request parameters (type, order, and quantity) of the tested method. The parameters are divided into simple and complex types. Simple parameters include parameter types String, Date, Integer, Float, Double, Long, Short, and Byte (including their corresponding basic types, such as int and float). Complex parameters include parameter types List, Map, Set, custom class, Java defined class, and their nested expressions.\nSimple request parameters Right click Request Parameters, choose Select Model, and click Simple Type in the pop-up to select simple parameters.\nAfter importing simple request parameters, enter their values directly in the field as shown in the preceding figure. Parameters listed top down are the first, second, and third parameters of the tested method. You can right click a parameter to adjust its order.\nComplex parameters As shown in Figure 27, you need to generate request parameter models for the AccountTransRequest class and the BusinessActionContext class. Generally, class models of the tested method\u0026amp;rsquo;s request parameters and responses are automatically generated along with the test script. You can open ACTS IDE to edit class models of request parameters as shown in Figure 28.\nList Map See example 2 (the Set type is similar). In Figure 32, request parameters of the method shown in sample 2 is the Map\u0026amp;lt;String, Object\u0026amp;gt; type. Objects do not belong to a specific type. If you want to set an object as a complex one, edit the YAML file. For example, if you want to set an object as the AccountTransResult class, edit the YAML file as follows:\nenum Example code:\n You can edit the values in ACTS IDE as follows:   If an enum type class is nested in another class, set the value of the enum type to DEBIT in the CSV model of the class.\n  Figure 37 shows the test case data in the YAML file.\n  interestRecoverTypeEnum: !!com.alipay.fc.loancore.common.util.enums.InterestRecoverTypeEnum \u0026amp;#39;ALL\u0026amp;#39; You can override the prepare method, and use the ActsRuntimeContext method to quickly get and set test case request parameters. See Figure 38.\n Get all request parameters: List getInputParams() Get request parameters by position: Object getInputParamByPos(int i) Add request parameters for the test case: void addInputParam(Object obj)  Prepare database data - single column database As shown in Figure 39, right click Database Preparation, select the desired database model for insertion (ensure that this database model has been generated). The database preparation model is inserted when you click OK after performing steps 1 and 2. As shown in Figure 41, you can edit the data to be inserted into the database.\nSelect a column and click Copy. You can use this method to copy multiple columns and then …","date":-62135596800,"description":"","dir":"projects/sofa-acts/usage-ide/","fuzzywordcount":1500,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"697e7e6d35a2e058f3ca8b0a72032690","permalink":"/en/projects/sofa-acts/usage-ide/","publishdate":"0001-01-01T00:00:00Z","readingtime":7,"relpermalink":"/en/projects/sofa-acts/usage-ide/","summary":"Open ACTS IDE In the Packages view, right click the function name annotated by @Test, and choose ACTS Function \u0026gt; Edit Test Case as shown in the following figure.\nWrite test data Prepare request parameters Prepare correct request parameter data for the request parameters (type, order, and quantity) of the tested method. The parameters are divided into simple and complex types. Simple parameters include parameter types String, Date, Integer, Float, Double, Long, Short, and Byte (including their corresponding basic types, such as int and float).","tags":null,"title":"All-in-one editor","type":"projects","url":"/en/projects/sofa-acts/usage-ide/","wordcount":1489},{"author":null,"categories":null,"content":"Introduction To understand the usage mode of Jarslink2.0, you need to have a certain understanding of the SOFAArk framework and the packaging of Ark packages and Ark Biz packages.\nTo ensure the consistency of reading, here is a rough description of the packaging logic of the application\u0026amp;rsquo;s use of Jarslink2.0. The official recommendation is to jump to the above-mentioned link to obtain the necessary background knowledge.\nJarslink2.0 requires an application type of Spring Boot or SOFABoot. Before introducing new modes of application packaging, let\u0026amp;rsquo;s see why it is necessary for Spring Boot/SOFABoot applications to introduce new packaging modes after using Jarslink2.0.\nBackground At runtime, Jarslink2.0 works as an Ark Plugin of the SOFAArk framework, which must be introduced for the use of Jarslink2.0. The Jarslink2.0 plugin will not be loaded and started until the SOFAArk container is started. As we know, when official Spring Boot projects use plugins:\n\u0026amp;lt;plugin\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;org.springframework.boot\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;spring-boot-maven-plugin\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;/plugin\u0026amp;gt; An executable FatJar will be packaged, which contains all the dependencies, configurations, and other resources required by the running application. The FatJar entry method is the main method of the Spring Boot application. The packaging logic of a SOFABoot project is the same as that of a Spring Boot project.\nAfter the application introduces Jarslink2.0, which needs to depend on the SOFAArk framework, the FatJar that is packaged by a new packaging mode needs to contain a SOFAArk container. The FatJar entry method also needs to be replaced by the SOFAArk container startup method, because the startup of SOFAArk takes precedence over the execution of the FatJar. The SOFAArk container starts all the Ark Plugins in turn before finally starting the application. Therefore, a new packaging mode is needed, and SOFAArk provides a packaging plugin.\n\u0026amp;lt;plugin\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;com.alipay.sofa\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;sofa-ark-maven-plugin\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;/plugin\u0026amp;gt; responsible for packaging Spring Boot/SOFABoot applications into an executable FatJar called Ark package.\nPackaging Type In the previous section, we have described why the use of Jarslink 2.0 needs to introduce a packaging mode that is different from the official Spring Boot packaging mode, and brought out the first packaging type—Ark package. Now let\u0026amp;rsquo;s summarize the features of Ark package:\n Ark package is an executable FatJar package format customized by the SOFAArk framework, the details of which are available in Reference Documents. The Ark package contains all the configurations, dependencies, and other resources required by the running application. Its packaging logic is similar to that of Spring Boot, and it also contains the Ark Plugin and the SOFAArk framework on which the application depends. The SOFAArk framework does not need to be introduced into the …","date":-62135596800,"description":"","dir":"projects/sofa-boot/sofa-jarslink-jarslink-repackage/","fuzzywordcount":800,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"a9cb3c5d3fa32c5f6c476d9ed80c80cb","permalink":"/en/projects/sofa-boot/sofa-jarslink-jarslink-repackage/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/en/projects/sofa-boot/sofa-jarslink-jarslink-repackage/","summary":"Introduction To understand the usage mode of Jarslink2.0, you need to have a certain understanding of the SOFAArk framework and the packaging of Ark packages and Ark Biz packages.\nTo ensure the consistency of reading, here is a rough description of the packaging logic of the application\u0026rsquo;s use of Jarslink2.0. The official recommendation is to jump to the above-mentioned link to obtain the necessary background knowledge.\nJarslink2.0 requires an application type of Spring Boot or SOFABoot.","tags":null,"title":"Application packaging","type":"projects","url":"/en/projects/sofa-boot/sofa-jarslink-jarslink-repackage/","wordcount":749},{"author":null,"categories":null,"content":" RheaKV: an embedded, distributed, highly available, and strongly consistent KV storage class library that is implemented based on JRaft and RocksDB. AntQ Streams QCoordinator: uses JRaft to implement elections and meta information storage in the Coordinator cluster. Metadata management module of SOFARegistry: an IP address registration. The data held by all nodes must be consistent, and the normal data storage must not be affected when a minority of nodes fail. AntQ NameServer leader election  ","date":-62135596800,"description":"","dir":"projects/sofa-jraft/user-stories/","fuzzywordcount":100,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"b233be7d9eed33645945293e637e28ea","permalink":"/en/projects/sofa-jraft/user-stories/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/en/projects/sofa-jraft/user-stories/","summary":"RheaKV: an embedded, distributed, highly available, and strongly consistent KV storage class library that is implemented based on JRaft and RocksDB. AntQ Streams QCoordinator: uses JRaft to implement elections and meta information storage in the Coordinator cluster. Metadata management module of SOFARegistry: an IP address registration. The data held by all nodes must be consistent, and the normal data storage must not be affected when a minority of nodes fail.","tags":null,"title":"Application scenarios","type":"projects","url":"/en/projects/sofa-jraft/user-stories/","wordcount":74},{"author":null,"categories":null,"content":"﻿## Architecture diagram Jarslink 2.0 is an Ark plugin and needs to depend on the SOFAArk container at runtime. Jarslink 2.0 is in the middle layer between the applications and the containers at runtime. Boundary interaction mode:\n   Application boundaries: Jarslink 2.0 configures export classes that can be directly used by the applications. Such classes are loaded by Jarslink at runtime.    Container boundaries: The Ark plugin can interact with the SOFAArk container by using the exposed extension points and services. Jarslink expanded the BizDeployer implementation and referenced BizManagerService and BizFactoryService container services.    Module division The implementation classes of each module appear only in their own modules and are generally not cross-dependent. Required cross-dependencies will be moved into the core module. Detailed module descriptions can be found in the following table:\n   Module name Sub-module name Description Dependency relationship     bom  Dependent on version control None   core common Common module with log classes None   core spi SPI module, defining basic interfaces and commands None   core-impl runtime Jarslink runtime management, processing commands Core   integration  Ark plugin packaging module, implementing SOFAArk container service extension point and referencing container services All    ","date":-62135596800,"description":"","dir":"projects/sofa-boot/sofa-jarslink-structure/","fuzzywordcount":200,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"fa09c01de689002edbd0bea7f68fe66e","permalink":"/en/projects/sofa-boot/sofa-jarslink-structure/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/en/projects/sofa-boot/sofa-jarslink-structure/","summary":"﻿## Architecture diagram Jarslink 2.0 is an Ark plugin and needs to depend on the SOFAArk container at runtime. Jarslink 2.0 is in the middle layer between the applications and the containers at runtime. Boundary interaction mode:\n   Application boundaries: Jarslink 2.0 configures export classes that can be directly used by the applications. Such classes are loaded by Jarslink at runtime.    Container boundaries: The Ark plugin can interact with the SOFAArk container by using the exposed extension points and services.","tags":null,"title":"Architecture","type":"projects","url":"/en/projects/sofa-boot/sofa-jarslink-structure/","wordcount":184},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-boot/sofa-ark-ark-biz/","fuzzywordcount":100,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"d7f80ce6a00d914546e642c887d23a01","permalink":"/en/projects/sofa-boot/sofa-ark-ark-biz/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/en/projects/sofa-boot/sofa-ark-ark-biz/","summary":"","tags":null,"title":"Ark Biz","type":"projects","url":"/en/projects/sofa-boot/sofa-ark-ark-biz/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-boot/sofa-ark-ark-biz/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"d7f80ce6a00d914546e642c887d23a01","permalink":"/projects/sofa-boot/sofa-ark-ark-biz/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-boot/sofa-ark-ark-biz/","summary":"","tags":null,"title":"Ark Biz","type":"projects","url":"/projects/sofa-boot/sofa-ark-ark-biz/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-boot/sofa-ark-biz-lifecycle/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"090ee6596c6808339fa3233139903040","permalink":"/projects/sofa-boot/sofa-ark-biz-lifecycle/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-boot/sofa-ark-biz-lifecycle/","summary":"","tags":null,"title":"Ark Biz 生命周期","type":"projects","url":"/projects/sofa-boot/sofa-ark-biz-lifecycle/","wordcount":0},{"author":null,"categories":null,"content":"Ark container class loading mechanism The plugins and business modules are managed in the Ark container. The following figure describes the class loading mechanism:\nClass loading mechanism of Ark container Each Ark plugin has a separate classloader which loads a class in the following order:\n If byte codes generated by reflection are loaded, the system will throw a ClassNotFoundException to terminate the loading process. This primarily comes from our engineering practice: to avoid long time searches for the classes that can never be found. Search for the already loaded classes Search for classes in the JDK, which mainly consists of two parts: 1) the classes to be loaded by ExtClassloader; 2) the classes that are provided by the JDK but fail to be loaded from the ExtClassloader. When running locally, however, these classes will be added to the SystemClassloader\u0026amp;rsquo;s classpath or they might be put into some third-party toolkits such as sun.tools.attach.BsdVirtualMachine in tool.jar at the same time. This part also comes from our engineering practice, avoiding errors caused by loading a class more than once. See if the class is an interface from Sofa Ark, such as com.alipay.sofa.Ark.spi.service.PluginActivator. If so, the class will be delegated to the classloader of the Ark container responsible for loading. See if it is located in the plugin import (including import-classes and import-package). If so, the loading will be delegated to the plugin classloader that will export it. Load in the plugin\u0026amp;rsquo;s own classpath If the above steps have failed, it will try to load the class in SymtemClassloader to deal with the situation that the agent is used.  If the class fails to be loaded with all the above steps, the ClassNotFoundException will be thrown.\nArk business class loading mechanism Each Ark business has a separate classloader. Its class loading mechanism is basically consistent with that of Ark plugin, except for the step 5:\nFor Ark business, no import configuration is provided. Instead, it defaults to importing all classes exported by plug-ins. To deal with some particular business scenarios, however, we do provide the Deny-import configuration so that we can exclude the classes exported by some plugins.\nClass loading mechanism of Ark plugin resources The Ark plugin supports importing and exporting resources. To achieve this, we need to configure the corresponding import and export settings in sofa-Ark-plugin-maven-plugin. There are two ways to search for resources when using ClassLoader: ClassLoader.getResource(String) or ClassLoader.getResources(String);\n  ClassLoader.getResource(String): When an Ark Plugin is searching for a single resource, it will delegate the Ark Plugin that will export the resource to load the class first. If multiple plugins export the resource at the same time, then the plugin with higher priority will export the resource first. If the loading fails or no other Ark Plugin has exported the resource, it will have a …","date":-62135596800,"description":"","dir":"projects/sofa-boot/sofa-ark-classloader/","fuzzywordcount":600,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"5803b870aae47885c37e4bbb02cb0a06","permalink":"/en/projects/sofa-boot/sofa-ark-classloader/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/en/projects/sofa-boot/sofa-ark-classloader/","summary":"Ark container class loading mechanism The plugins and business modules are managed in the Ark container. The following figure describes the class loading mechanism:\nClass loading mechanism of Ark container Each Ark plugin has a separate classloader which loads a class in the following order:\n If byte codes generated by reflection are loaded, the system will throw a ClassNotFoundException to terminate the loading process. This primarily comes from our engineering practice: to avoid long time searches for the classes that can never be found.","tags":null,"title":"Ark container class loading mechanism","type":"projects","url":"/en/projects/sofa-boot/sofa-ark-classloader/","wordcount":549},{"author":null,"categories":null,"content":"Starting an Ark plug-in Ark provides the interface for starting a plug-in com.alipay.sofa.ark.spi.service.PluginActivator. The definition of the interface is as follows:\npublic interface PluginActivator { /** * Start Plugin * @param context plugin context * @throws ArkException */ void start(PluginContext context) throws ArkException; /** * Stop Plugin * @param context * @throws ArkException */ void stop(PluginContext context) throws ArkException; } Once a plug-in implements this interface, and the activator attribute is configured in MANIFEST.MF, the plug-in will use the start method when it starts and the stop method when it stops.\nArk plug-in communication Ark plug-ins communicate using services. The interfaces used by the publishing and reference services are provided in the input parameter type com.alipay.sofa.ark.spi.model.PluginContext of the preceding method of starting an interface.\n/** * Publish Plugin Service * @param ifClass service interface * @param implObject service implement object * @param \u0026amp;lt;T\u0026amp;gt; * @return */ \u0026amp;lt;T\u0026amp;gt; ServiceReference\u0026amp;lt;T\u0026amp;gt; publishService(Class\u0026amp;lt;T\u0026amp;gt; ifClass, T implObject); /** * Get Service publish by plugin, when there are multiple services, return the highest priority plugin service * @param ifClass service interface * @param \u0026amp;lt;T\u0026amp;gt; * @return service reference */ \u0026amp;lt;T\u0026amp;gt; ServiceReference\u0026amp;lt;T\u0026amp;gt; referenceService(Class\u0026amp;lt;T\u0026amp;gt; ifClass); /** * Get Service publish by one specific plugin * @param ifClass service interface * @param \u0026amp;lt;T\u0026amp;gt; * @param pluginName the name of the plugin which publish the service * @return service reference */ \u0026amp;lt;T\u0026amp;gt; ServiceReference\u0026amp;lt;T\u0026amp;gt; referenceService(Class\u0026amp;lt;T\u0026amp;gt; ifClass, String pluginName); /** * Get Service List publish by plugin * @param ifClass service interface * @param \u0026amp;lt;T\u0026amp;gt; * @return */ \u0026amp;lt;T\u0026amp;gt; List\u0026amp;lt;ServiceReference\u0026amp;lt;T\u0026amp;gt;\u0026amp;gt; referenceServices(Class\u0026amp;lt;T\u0026amp;gt; ifClass); A plug-in service is interface-specific. For one interface, the following descriptions are true:\n Only one service can be published for each plug-in. When more than one service is published, the reference of the previously published service will be returned. If you use referenceService to reference a single service when multiple plug-ins have published services, which service is returned depends on whether pluginName is specified:  When not specified, the service with the highest priority is returned. When specified, the service published by the plugin with the specified name is returned.    The returned service reference ServiceReference is defined as follows:\npublic interface ServiceReference\u0026amp;lt;T\u0026amp;gt; { /** * get Service Object * @return service */ T getService(); /** * get Service Metadata * @return */ ServiceMetadata getServiceMetadata(); } public interface ServiceMetadata { /** * get Service Unique Name * @return service name */ String getServiceName(); /** * get Service Interface Class * @return interface class */ Class\u0026amp;lt;?\u0026amp;gt; getInterfaceClass(); /** * get …","date":-62135596800,"description":"","dir":"projects/sofa-boot/sofa-ark-plugin/","fuzzywordcount":500,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"b552fc51eb84cc0fa4c26860bd316490","permalink":"/en/projects/sofa-boot/sofa-ark-plugin/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/en/projects/sofa-boot/sofa-ark-plugin/","summary":"Starting an Ark plug-in Ark provides the interface for starting a plug-in com.alipay.sofa.ark.spi.service.PluginActivator. The definition of the interface is as follows:\npublic interface PluginActivator { /** * Start Plugin * @param context plugin context * @throws ArkException */ void start(PluginContext context) throws ArkException; /** * Stop Plugin * @param context * @throws ArkException */ void stop(PluginContext context) throws ArkException; } Once a plug-in implements this interface, and the activator attribute is configured in MANIFEST.","tags":null,"title":"Ark container plugin mechanism","type":"projects","url":"/en/projects/sofa-boot/sofa-ark-plugin/","wordcount":468},{"author":null,"categories":null,"content":"Ark container start process The startup process of the Ark container is illustrated as follows:\nArkService Ark Service is a service in the Ark container. The underlying layer uses Guice to manage the service. The service is provided with the lifecycle interface com.alipay.sofa.ark.spi.service.ArkService\npublic interface ArkService { /** * Ark Service init * @throws ArkException */ void init() throws ArkException; /** * Ark Service dispose * @throws ArkException */ void dispose() throws ArkException; } After the service implements the preceding lifecycle interface, the Ark Service container invokes the interface when it starts and stops.\nPipeline service Pipeline is also a service registered in the Ark Service container. The service itself has no order or priority. The service is assembled in the Pipeline while the entire Ark container starts.\nArchive parsing At the very beginning of Pipeline, the running fatjar will be resolved into the models required for runtime, including the Ark plug-in model and the Ark business model, which are registered to the PluginManagerService and the BizManagerService in the Ark Service.\nDeploy the Ark plug-in Get all the Ark plug-ins from the PluginManagerService in the order of their priorities:\n ClassloaderService prepares for the map mapping of plug-in export class PluginDeployService starts com.alipay.sofa.Ark.spi.service.PluginActivator  Start the Ark business Get all the Ark business from the BizManagerService, and execute the entry main function provided by the business configuration in the Main-Class attribute of MANIFEST.MF.\n","date":-62135596800,"description":"","dir":"projects/sofa-boot/sofa-ark-startup/","fuzzywordcount":300,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"ad60e803febd20607686a1b4ea98efc3","permalink":"/en/projects/sofa-boot/sofa-ark-startup/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/en/projects/sofa-boot/sofa-ark-startup/","summary":"Ark container start process The startup process of the Ark container is illustrated as follows:\nArkService Ark Service is a service in the Ark container. The underlying layer uses Guice to manage the service. The service is provided with the lifecycle interface com.alipay.sofa.ark.spi.service.ArkService\npublic interface ArkService { /** * Ark Service init * @throws ArkException */ void init() throws ArkException; /** * Ark Service dispose * @throws ArkException */ void dispose() throws ArkException; } After the service implements the preceding lifecycle interface, the Ark Service container invokes the interface when it starts and stops.","tags":null,"title":"Ark container startup process","type":"projects","url":"/en/projects/sofa-boot/sofa-ark-startup/","wordcount":231},{"author":null,"categories":null,"content":"﻿This section will introduce the directory structure of standard Ark package and how to use the maven plugin of sofa-Ark-maven-plugin to package and release an Ark package.\nMaven plugin The officially provided Maven plugin sofa-Ark-maven-plugin can package common Java projects or Spring Boot projects into standard-format Ark packages. Based on [Fat Jar] (https://docs.spring.io/spring-boot/docs/current/reference/html/executable-jar.html#executable-jar-jar-file-structure) technology, we can directly start an Ark package with the java -jar command. The Maven plugin coordinates are:\n\u0026amp;lt;plugin\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;com.alipay.sofa\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;sofa-ark-maven-plugin\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;version\u0026amp;gt;${sofa.ark.version}\u0026amp;lt;/version\u0026amp;gt; \u0026amp;lt;/plugin\u0026amp;gt; Goals The sofa-Ark-maven-plugin plugin provides goal: repackage, which can package the project into an executable Ark package, it can be configured as follows:\n\u0026amp;lt;build\u0026amp;gt; \u0026amp;lt;plugin\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;com.alipay.sofa\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;sofa-ark-maven-plugin\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;version\u0026amp;gt;${sofa.ark.version}\u0026amp;lt;/version\u0026amp;gt; \u0026amp;lt;executions\u0026amp;gt; \u0026amp;lt;execution\u0026amp;gt; \u0026amp;lt;id\u0026amp;gt;default-cli\u0026amp;lt;/id\u0026amp;gt; \u0026amp;lt;goals\u0026amp;gt; \u0026amp;lt;goal\u0026amp;gt;repackage\u0026amp;lt;/goal\u0026amp;gt; \u0026amp;lt;/goals\u0026amp;gt; \u0026amp;lt;/excution\u0026amp;gt; \u0026amp;lt;/executions\u0026amp;gt; \u0026amp;lt;configuration\u0026amp;gt; \u0026amp;lt;!-- Configuration information --\u0026amp;gt; \u0026amp;lt;/configuration\u0026amp;gt; \u0026amp;lt;/plugin\u0026amp;gt; \u0026amp;lt;/build\u0026amp;gt; Complete configuration template Complete sofa-Ark-maven-plugin configuration template is as follows:\n\u0026amp;lt;plugins\u0026amp;gt; \u0026amp;lt;plugin\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;com.alipay.sofa\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;sofa-ark-maven-plugin\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;version\u0026amp;gt;0.1.0\u0026amp;lt;/version\u0026amp;gt; \u0026amp;lt;executions\u0026amp;gt; \u0026amp;lt;execution\u0026amp;gt; \u0026amp;lt;id\u0026amp;gt;default-cli\u0026amp;lt;/id\u0026amp;gt; \u0026amp;lt;goals\u0026amp;gt; \u0026amp;lt;goal\u0026amp;gt;repackage\u0026amp;lt;/goal\u0026amp;gt; \u0026amp;lt;/goals\u0026amp;gt; \u0026amp;lt;configuration\u0026amp;gt; \u0026amp;lt;!--The default packaging storage directory for Ark package and Ark biz is the project build directory--\u0026amp;gt; \u0026amp;lt;outputDirectory\u0026amp;gt;../target\u0026amp;lt;/outputDirectory\u0026amp;gt; \u0026amp;lt;!--The name of the generated Ark package file is ${artifactId} by default--\u0026amp;gt; \u0026amp;lt;finalName\u0026amp;gt;demo-ark\u0026amp;lt;/finalName\u0026amp;gt; \u0026amp;lt;!--Whether to skip execution of goal:repackage (false by default)--\u0026amp;gt; \u0026amp;lt;skip\u0026amp;gt;false\u0026amp;lt;/skip\u0026amp;gt; \u0026amp;lt;!--Whether to package, install, and release Ark biz (false by default). Refer to the Ark Biz file for details --\u0026amp;gt; \u0026amp;lt;attach\u0026amp;gt;true\u0026amp;lt;/attach\u0026amp;gt; \u0026amp;lt;!--Set the classifier of Ark package, which is null by default--\u0026amp;gt; \u0026amp;lt;arkClassifier\u0026amp;gt;ark-classifier\u0026amp;lt;/arkClassifier\u0026amp;gt; \u0026amp;lt;!-- Set the classifier of Ark biz, which is Ark-biz by default --\u0026amp;gt; \u0026amp;lt;bizClassifier\u0026amp;gt;ark-biz-classifier\u0026amp;lt;/bizClassifier\u0026amp;gt; \u0026amp;lt;!--Exclude the specified package dependency when packaging the Ark biz. The format is: ${groupId:artifactId} or ${groupId:artifactId:classifier}--\u0026amp;gt; \u0026amp;lt;excludes\u0026amp;gt; \u0026amp;lt;exclude\u0026amp;gt;org.apache.commons:commons-lang3\u0026amp;lt;/exclude\u0026amp;gt; \u0026amp;lt;/excludes\u0026amp;gt; \u0026amp;lt;!--Exclude the package dependency that is the same as the specified groupId …","date":-62135596800,"description":"","dir":"projects/sofa-boot/sofa-ark-ark-jar/","fuzzywordcount":1400,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"c2a9b8ad142f15b9ee82d7d9d8237850","permalink":"/en/projects/sofa-boot/sofa-ark-ark-jar/","publishdate":"0001-01-01T00:00:00Z","readingtime":7,"relpermalink":"/en/projects/sofa-boot/sofa-ark-ark-jar/","summary":"﻿This section will introduce the directory structure of standard Ark package and how to use the maven plugin of sofa-Ark-maven-plugin to package and release an Ark package.\nMaven plugin The officially provided Maven plugin sofa-Ark-maven-plugin can package common Java projects or Spring Boot projects into standard-format Ark packages. Based on [Fat Jar] (https://docs.spring.io/spring-boot/docs/current/reference/html/executable-jar.html#executable-jar-jar-file-structure) technology, we can directly start an Ark package with the java -jar command. The Maven plugin coordinates are:","tags":null,"title":"Ark JAR package","type":"projects","url":"/en/projects/sofa-boot/sofa-ark-ark-jar/","wordcount":1316},{"author":null,"categories":null,"content":"﻿This section will introduce the standard specifications and directory structure of Ark Plugin and how to use the maven plugin of sofa-ark-plugin-maven-plugin to package and release it.\nPlugin Specifications A standard Ark Plugin should meet the following specifications:\n  The plugin should have a name (default is ${artifactId}). At runtime, duplicate names are not allowed. In other words, the name will be used as the unique ID of Ark Plugin;\n  A plugin must be configured with a priority (default is 1,000): the lower the number, the higher the priority;\n  A plugin should be configured with no more than one entry class activator, a portal for the container startup plugin used to implement the com.alipay.sofa.ark.spi.service.PluginActivator interface class in a uniform way. The plugin with higher priority will start up first;\n  Import classes support both package and class levels. They are loaded first from other plugins;\n  Export classes support package and class levels. Plugins with higher priority will be exported first;\n  Support importing resources from the classpath (wildcard is not supported). Specified resources will be searched for from other plugins first;\n  Support exporting resources from the classpath (wildcard is not supported); resources with higher priority will be exported first;\n  Maven plugins The officially provided Maven plugin sofa-ark-plugin-maven-plugin can package projects into a standard-format Ark Plugin. The coordinates of Maven plugin are:\n\u0026amp;lt;plugin\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;com.alipay.sofa\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;sofa-ark-plugin-maven-plugin\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;version\u0026amp;gt;${sofa.ark.version}\u0026amp;lt;/version\u0026amp;gt; \u0026amp;lt;/plugin\u0026amp;gt; Goals The sofa-ark-plugin-maven-plugin plugin provides goal: ark-plugin, which can be used to package the project into a standard-format Ark Plugin. Configurations are as follows:\n\u0026amp;lt;build\u0026amp;gt; \u0026amp;lt;plugin\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;com.alipay.sofa\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;sofa-ark-plugin-maven-plugin\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;version\u0026amp;gt;${sofa.ark.version}\u0026amp;lt;/version\u0026amp;gt; \u0026amp;lt;executions\u0026amp;gt; \u0026amp;lt;execution\u0026amp;gt; \u0026amp;lt;id\u0026amp;gt;default-cli\u0026amp;lt;/id\u0026amp;gt; \u0026amp;lt;goals\u0026amp;gt; \u0026amp;lt;goal\u0026amp;gt;ark-plugin\u0026amp;lt;/goal\u0026amp;gt; \u0026amp;lt;/goals\u0026amp;gt; \u0026amp;lt;/excution\u0026amp;gt; \u0026amp;lt;/executions\u0026amp;gt; \u0026amp;lt;configuration\u0026amp;gt; \u0026amp;lt;!-- Configuration information --\u0026amp;gt; \u0026amp;lt;/configuration\u0026amp;gt; \u0026amp;lt;/plugin\u0026amp;gt; \u0026amp;lt;/build\u0026amp;gt; Complete configuration template The complete configuration template of the sofa-ark-plugin-maven-plugin plugin is shown as follows:\n\u0026amp;lt;plugins\u0026amp;gt; \u0026amp;lt;plugin\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;com.alipay.sofa\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;sofa-ark-plugin-maven-plugin\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;version\u0026amp;gt;${sofa.ark.version}\u0026amp;lt;/version\u0026amp;gt; \u0026amp;lt;executions\u0026amp;gt; \u0026amp;lt;execution\u0026amp;gt; \u0026amp;lt;id\u0026amp;gt;default-cli\u0026amp;lt;/id\u0026amp;gt; \u0026amp;lt;goals\u0026amp;gt; \u0026amp;lt;goal\u0026amp;gt;ark-plugin\u0026amp;lt;/goal\u0026amp;gt; \u0026amp;lt;/goals\u0026amp;gt; \u0026amp;lt;configuration\u0026amp;gt; \u0026amp;lt;!-- Specify the directory to package ${pluginName}.ark.plugin (${project. build. directory} is the default location) --\u0026amp;gt; …","date":-62135596800,"description":"","dir":"projects/sofa-boot/sofa-ark-ark-plugin/","fuzzywordcount":1300,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"684dc1caa0f834eec498905f95913f83","permalink":"/en/projects/sofa-boot/sofa-ark-ark-plugin/","publishdate":"0001-01-01T00:00:00Z","readingtime":6,"relpermalink":"/en/projects/sofa-boot/sofa-ark-ark-plugin/","summary":"﻿This section will introduce the standard specifications and directory structure of Ark Plugin and how to use the maven plugin of sofa-ark-plugin-maven-plugin to package and release it.\nPlugin Specifications A standard Ark Plugin should meet the following specifications:\n  The plugin should have a name (default is ${artifactId}). At runtime, duplicate names are not allowed. In other words, the name will be used as the unique ID of Ark Plugin;","tags":null,"title":"Ark Plugin","type":"projects","url":"/en/projects/sofa-boot/sofa-ark-ark-plugin/","wordcount":1240},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-boot/sofa-ark-ark-plugin/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"684dc1caa0f834eec498905f95913f83","permalink":"/projects/sofa-boot/sofa-ark-ark-plugin/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-boot/sofa-ark-ark-plugin/","summary":"","tags":null,"title":"Ark Plugin","type":"projects","url":"/projects/sofa-boot/sofa-ark-ark-plugin/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-boot/sofa-ark-ark-event/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"b0f233742572536edc8a517cf7547269","permalink":"/projects/sofa-boot/sofa-ark-ark-event/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-boot/sofa-ark-ark-event/","summary":"","tags":null,"title":"Ark 事件机制","type":"projects","url":"/projects/sofa-boot/sofa-ark-ark-event/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-boot/sofa-ark-ark-jar/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"c2a9b8ad142f15b9ee82d7d9d8237850","permalink":"/projects/sofa-boot/sofa-ark-ark-jar/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-boot/sofa-ark-ark-jar/","summary":"","tags":null,"title":"Ark 包","type":"projects","url":"/projects/sofa-boot/sofa-ark-ark-jar/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-boot/sofa-ark-startup/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"ad60e803febd20607686a1b4ea98efc3","permalink":"/projects/sofa-boot/sofa-ark-startup/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-boot/sofa-ark-startup/","summary":"","tags":null,"title":"Ark 容器启动流程","type":"projects","url":"/projects/sofa-boot/sofa-ark-startup/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-boot/sofa-ark-plugin/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"b552fc51eb84cc0fa4c26860bd316490","permalink":"/projects/sofa-boot/sofa-ark-plugin/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-boot/sofa-ark-plugin/","summary":"","tags":null,"title":"Ark 容器插件机制","type":"projects","url":"/projects/sofa-boot/sofa-ark-plugin/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-boot/sofa-ark-classloader/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"5803b870aae47885c37e4bbb02cb0a06","permalink":"/projects/sofa-boot/sofa-ark-classloader/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-boot/sofa-ark-classloader/","summary":"","tags":null,"title":"Ark 容器类加载机制","type":"projects","url":"/projects/sofa-boot/sofa-ark-classloader/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-boot/sofa-ark-ark-extension/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"685e049f442cde4f3f51fefad5453dae","permalink":"/projects/sofa-boot/sofa-ark-ark-extension/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-boot/sofa-ark-ark-extension/","summary":"","tags":null,"title":"Ark 扩展机制","type":"projects","url":"/projects/sofa-boot/sofa-ark-ark-extension/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-boot/sofa-ark-ark-log/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"a514225510e53e9bf7173734c1f878e1","permalink":"/projects/sofa-boot/sofa-ark-ark-log/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-boot/sofa-ark-ark-log/","summary":"","tags":null,"title":"Ark 日志","type":"projects","url":"/projects/sofa-boot/sofa-ark-ark-log/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-boot/sofa-ark-ark-service/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"81b7e697b890139c03831cdb648e094b","permalink":"/projects/sofa-boot/sofa-ark-ark-service/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-boot/sofa-ark-ark-service/","summary":"","tags":null,"title":"Ark 服务机制","type":"projects","url":"/projects/sofa-boot/sofa-ark-ark-service/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-boot/sofa-ark-ark-jvm/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"1bf80b24428da0f91edc6af7b63f6047","permalink":"/projects/sofa-boot/sofa-ark-ark-jvm/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-boot/sofa-ark-ark-jvm/","summary":"","tags":null,"title":"Ark 服务通信","type":"projects","url":"/projects/sofa-boot/sofa-ark-ark-jvm/","wordcount":0},{"author":null,"categories":null,"content":"Use java.lang.Runnable in thread If you start a thread via java.lang.Runnable in the code or use a thread pool to process some businesses asynchronously, SOFATracer log context needs to be passed from the parent thread to the child thread. com.alipay.common.tracer.core.async.SofaTracerRunnable provided by SOFATracer is reponsible for completing this operation by default. You can use it as follows:\nThread thread = new Thread(new SofaTracerRunnable(new Runnable() { @Override public void run() { //do something your business code  } })); thread.start(); Use java.util.concurrent.Callable in thread If you start a thread via java.util.concurrent.Callable in the code or use a thread pool to process some businesses asynchronously, SOFATracer log context needs to be passed from the parent thread to the child thread. com.alipay.common.tracer.core.async.SofaTracerCallable provided by SOFATracer is reponsible for completing this operation by default. You can use it as follows:\nExecutorService executor = Executors.newCachedThreadPool(); SofaTracerCallable\u0026amp;lt;Object\u0026amp;gt; sofaTracerSpanSofaTracerCallable = new SofaTracerCallable\u0026amp;lt;Object\u0026amp;gt;(new Callable\u0026amp;lt;Object\u0026amp;gt;() { @Override public Object call() throws Exception { return new Object(); } }); Future\u0026amp;lt;Object\u0026amp;gt; futureResult = executor.submit(sofaTracerSpanSofaTracerCallable); //do something in current thread  Thread.sleep(1000); //another thread execute success and get result  Object objectReturn = futureResult.get(); This example assumes that the object type returned by java.util.concurrent.Callable is java.lang.Object. You can replace it with the expected type based on actual situation.\nSOFATracer support for thread pool and asynchronous call scenarios Asynchronous  Asynchronous invocation, in RPC calls, for example,each time the rpc call request goes out, it will not wait until the result is returned before initiating the next call. There is a time difference here, before the callback of the previous rpc call comes back, another new one begin. At this time, the TracerContext in the current thread is not cleaned up, the spanId will be incremented, and the tracerId is the same.\n For the above situation, when the SOFATracer is processed for the asynchronous situation, it will not wait for the callback to execute, and then the cr phase will be cleaned up. Instead, the current thread\u0026amp;rsquo;s tracerContext context will be cleaned up in advance to ensure the correctness of the link.\nThread Pool For now, whether it\u0026amp;rsquo;s SOFARPC or Dubbo\u0026amp;rsquo;s trace implementation, the situation is the same when using single-thread or thread pools:\n Synchronous call. A thread in the thread pool is allocated to handle the RPC request. This does not cause the next RPC request to take the tracerContext data of the previous request by mistake Asynchronous calls, since the asynchronous callback is not in the callback to clean up the context, but in advance, there is no dirty data problem. callback, which is essentially an …","date":-62135596800,"description":"","dir":"projects/sofa-tracer/async/","fuzzywordcount":500,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"e755346c441115663c101638667fe4c0","permalink":"/en/projects/sofa-tracer/async/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/en/projects/sofa-tracer/async/","summary":"Use java.lang.Runnable in thread If you start a thread via java.lang.Runnable in the code or use a thread pool to process some businesses asynchronously, SOFATracer log context needs to be passed from the parent thread to the child thread. com.alipay.common.tracer.core.async.SofaTracerRunnable provided by SOFATracer is reponsible for completing this operation by default. You can use it as follows:\nThread thread = new Thread(new SofaTracerRunnable(new Runnable() { @Override public void run() { //do something your business code  } })); thread.","tags":null,"title":"Asynchronous thread processing","type":"projects","url":"/en/projects/sofa-tracer/async/","wordcount":436},{"author":null,"categories":null,"content":"﻿## Model\nApplications Jarslink manages the life cycle of multiple applications. During runtime dynamic deployment, it usually converts a Jar file entity into an abstract model Biz.\n Biz: abstract model of the application at runtime  Instruction Currently, Jarslink supports the telnet protocol and accepts the entered instructions. In the future, it will also support instruction execution through APIs. Acceptable instruction types:\n InstallCommand: install the application UninstallCommand: uninstall the application CheckCommand: check the application state SwitchCommand: switch the application state  Service The Jarslink plugin has expanded the SOFAArk container\u0026amp;rsquo;s services of BizDeployer and CommandProvider and referenced the SOFAArk container\u0026amp;rsquo;s exposed services of BizManagerService and BizFactoryService.\n BizDeployer is the application deployment extension point provided by the SOFAArk container, and it is used to control the Biz startup in the Ark package. Jarslink has registered its own implementation with the SOFAArk container. CommandProvider is the command processing extension point provided by the SOFAArk container, and it is used to process the commands received by the SOFAArk container through a telnet link. BizManagerService is the Biz manager exposed by the SOFAArk container, and it is used for registration, deregistration, and other operations. BizFactoryService is the Biz generator exposed by the SOFAArk container, and it is used to abstract static Biz package files into runtime Biz models.  ","date":-62135596800,"description":"","dir":"projects/sofa-boot/sofa-jarslink-model/","fuzzywordcount":300,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"991cb277d50874fa27095b920ac9b736","permalink":"/en/projects/sofa-boot/sofa-jarslink-model/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/en/projects/sofa-boot/sofa-jarslink-model/","summary":"﻿## Model\nApplications Jarslink manages the life cycle of multiple applications. During runtime dynamic deployment, it usually converts a Jar file entity into an abstract model Biz.\n Biz: abstract model of the application at runtime  Instruction Currently, Jarslink supports the telnet protocol and accepts the entered instructions. In the future, it will also support instruction execution through APIs. Acceptable instruction types:\n InstallCommand: install the application UninstallCommand: uninstall the application CheckCommand: check the application state SwitchCommand: switch the application state  Service The Jarslink plugin has expanded the SOFAArk container\u0026rsquo;s services of BizDeployer and CommandProvider and referenced the SOFAArk container\u0026rsquo;s exposed services of BizManagerService and BizFactoryService.","tags":null,"title":"Basic model","type":"projects","url":"/en/projects/sofa-boot/sofa-jarslink-model/","wordcount":212},{"author":null,"categories":null,"content":"Messages All messages are internally passed through SofaRequest and SofaResponse.\nTo convert to other protocols, you need to transform the messages to the objects that are to be actually transferred when calling and receiving requests.\nThe modules that can write SofaRequest and SofaResponse are as follows:\n Invoker Filter ServerHandler Serialization  The modules that can only read message bodies are as follows:\n Cluster Router LoadBalance  Logs The log initialization is based on the extension mechanism. Since the log loading should be done earliest, there is a separate key in rpc-config.json.\n{ / / Log implementation is done earlier than configuration loading, so it cannot adapt to the extension mechanism \u0026amp;#34;logger.impl\u0026amp;#34;: \u0026amp;#34;com.alipay.sofa.rpc.log.MiddlewareLoggerImpl\u0026amp;#34; } Configuration items RPC configuration for users The user configuration includes port configuration (although the fields for setting port in the objects have been opened, SOFA gets those fields from the configuration file by default), thread pool size configuration, and other configurations.\n Load the configuration via SofaConfigs and call ExternalConfigLoader to read external properties. Get the configuration through the API provided by SofaConfigs. All the internally configured keys are in the SofaOptions class. Priority: System.property \u0026amp;gt; sofa-config.properties (one for each application) \u0026amp;gt; rpc-config.properties.  RPC framework configuration The configuration of the framework itself, such as default serialization and default timeout. In the future, SOFARPC may support the configuration for multiple ClassLoaders.\n Load the configuration file via RpcConfigs. Get and listen to data changes via the API provided by RpcConfigs All internally configured keys are in the RpcOptions class Priority: System.property \u0026amp;gt; custom rpc-config.json (There may be multiple custom configuration files which are sorted in certain order) \u0026amp;gt; rpc-config-default.json.  Constants   The global basic constants are in RpcConstants. For example:  Calling method (sync/oneway) Protocol (bolt/grpc/rest); serialization (hessian/java/protobuf) Context key    If the extension implements its own constants, you need to maintain the constants yourself. For example:\n The constants of BOLT protocol  SERIALIZE_CODE_HESSIAN = 1 PROTOCOL_TR = 13   The constants related with DSR Configuration Center  The keys specific for DSR Configuration Center, such as _WEIGHT and _CONNECTTIMEOUT      Address  The address information of provider is placed in the ProviderInfo class. The value of ProviderInfo is mainly divided into three parts:  Fields, which are generally required items, such as IP, port and status. Static fields, such as application name. Dynamic fields, such as warm-up weight.   Field enumerations are maintained in the ProviderInfoAttrs class.  ","date":-62135596800,"description":"","dir":"projects/sofa-rpc/common-model/","fuzzywordcount":400,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"b2cc3f7ed134408d6adc25e418e1978b","permalink":"/en/projects/sofa-rpc/common-model/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/en/projects/sofa-rpc/common-model/","summary":"Messages All messages are internally passed through SofaRequest and SofaResponse.\nTo convert to other protocols, you need to transform the messages to the objects that are to be actually transferred when calling and receiving requests.\nThe modules that can write SofaRequest and SofaResponse are as follows:\n Invoker Filter ServerHandler Serialization  The modules that can only read message bodies are as follows:\n Cluster Router LoadBalance  Logs The log initialization is based on the extension mechanism.","tags":null,"title":"Basic model","type":"projects","url":"/en/projects/sofa-rpc/common-model/","wordcount":386},{"author":null,"categories":null,"content":"Publish Service To use SOFARPC to publish a Bolt-protocol service, you only need to add a Binding named bolt. The ways to add Bolt Binding are as follows:\nXML To publish a Bolt service using XML, simply add the \u0026amp;lt;sofa:binding.bolt\u0026amp;gt; tag to the \u0026amp;lt;sofa:service\u0026amp;gt; tag:\n\u0026amp;lt;sofa:service ref=\u0026amp;#34;sampleService\u0026amp;#34; interface=\u0026amp;#34;com.alipay.sofa.rpc.sample.SampleService\u0026amp;#34;\u0026amp;gt; \u0026amp;lt;sofa:binding.bolt/\u0026amp;gt; \u0026amp;lt;/sofa:service\u0026amp;gt; Annotation To publish a Bolt service using Annotation, you only need to set the bindingType of @SofaServiceBinding to bolt:\n@Service @SofaService(bindings = {@SofaServiceBinding(bindingType = \u0026amp;#34;bolt\u0026amp;#34;)}) Public class SampleServiceImpl implements SampleService { } API in Spring environment To publish a Bolt-protocol service in Spring or Spring Boot environment, just add BoltBindingParam to ServiceParam:\nServiceParam serviceParam = new ServiceParam(); serviceParam.setInterfaceType(SampleService.class); // Set the service interface serviceParam.setInstance(new SampleServiceImpl()); // Set the implementation of the service interface  List\u0026amp;lt;BindingParam\u0026amp;gt; params = new ArrayList\u0026amp;lt;BindingParam\u0026amp;gt;(); BindingParam serviceBindingParam = new BoltBindingParam(); Params.add(serviceBindingParam); serviceParam.setBindingParams(params); API in non-Spring environment To provide the Bolt-protocol service using the bare API of SOFARPC in a non-Spring environment, just set the ServerConfig whose protocol is Bolt to the corresponding ProviderConfig:\nRegistryConfig registryConfig = new RegistryConfig() .setProtocol(\u0026amp;#34;zookeeper\u0026amp;#34;) .setAddress(\u0026amp;#34;127.0.0.1:2181\u0026amp;#34;); // Create a new ServerConfig with Bolt protocol ServerConfig serverConfig = new ServerConfig() .setPort(8803) .setProtocol(\u0026amp;#34;bolt\u0026amp;#34;); ProviderConfig\u0026amp;lt;SampleService\u0026amp;gt; providerConfig = new ProviderConfig\u0026amp;lt;SampleService\u0026amp;gt;() .setInterfaceId(SampleService.class.getName()) .setRef(new SampleServiceImpl()) .setServer(serverConfig) // Set ServerConfig to ProviderConfig to indicate that the protocol published by this service is Bolt.  .setRegistry(registryConfig); providerConfig.export(); Reference Service To reference a Bolt-protocol service using SOFARPC, just add a Binding named bolt. The ways to use Bolt Binding are as follows:\nXML To reference a Bolt-protocol service using XML, simply add the \u0026amp;lt;sofa:binding.bolt\u0026amp;gt; tag to the \u0026amp;lt;sofa:reference\u0026amp;gt; tag:\n\u0026amp;lt;sofa:reference id=\u0026amp;#34;sampleService\u0026amp;#34; interface=\u0026amp;#34;com.alipay.sofa.rpc.sample.SampleService\u0026amp;#34;\u0026amp;gt; \u0026amp;lt;sofa:binding.bolt/\u0026amp;gt; \u0026amp;lt;/sofa:reference\u0026amp;gt; Annotation To reference a Bolt-protocol service using Annotation, just set the bindingType of @SofaReferenceBinding to bolt:\n@SofaReference(binding = @SofaReferenceBinding(bindingType = \u0026amp;#34;bolt\u0026amp;#34;)) Private SampleService sampleService; API in Spring environment To reference a Bolt-protocol service in a Spring or Spring Boot environment, simply add a BoltBindingParam to ReferenceParam:\nReferenceClient referenceClient = …","date":-62135596800,"description":"","dir":"projects/sofa-rpc/bolt-usage/","fuzzywordcount":400,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"dd929c0a3cd2f4620ddf0d30d98ba85d","permalink":"/en/projects/sofa-rpc/bolt-usage/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/en/projects/sofa-rpc/bolt-usage/","summary":"Publish Service To use SOFARPC to publish a Bolt-protocol service, you only need to add a Binding named bolt. The ways to add Bolt Binding are as follows:\nXML To publish a Bolt service using XML, simply add the \u0026lt;sofa:binding.bolt\u0026gt; tag to the \u0026lt;sofa:service\u0026gt; tag:\n\u0026lt;sofa:service ref=\u0026#34;sampleService\u0026#34; interface=\u0026#34;com.alipay.sofa.rpc.sample.SampleService\u0026#34;\u0026gt; \u0026lt;sofa:binding.bolt/\u0026gt; \u0026lt;/sofa:service\u0026gt; Annotation To publish a Bolt service using Annotation, you only need to set the bindingType of @SofaServiceBinding to bolt:\n@Service @SofaService(bindings = {@SofaServiceBinding(bindingType = \u0026#34;bolt\u0026#34;)}) Public class SampleServiceImpl implements SampleService { } API in Spring environment To publish a Bolt-protocol service in Spring or Spring Boot environment, just add BoltBindingParam to ServiceParam:","tags":null,"title":"Basic usage of Bolt protocol","type":"projects","url":"/en/projects/sofa-rpc/bolt-usage/","wordcount":364},{"author":null,"categories":null,"content":"In SOFARPC, to use different communication protocols, it is only required to use different Bindings. If you need to use the Dubbo protocol, just set Binding to Dubbo. The following shows an example using Annotation. For other usage methods, refer to Basic usage of Bolt protocol.\nPublish Service To publish a Dubbo service, just set the bindingType of @SofaServiceBinding to dubbo:\n@Service @SofaService(bindings = {@SofaServiceBinding(bindingType = \u0026amp;#34;dubbo\u0026amp;#34;)}) public class SampleServiceImpl implements SampleService { } Reference Service To reference a Dubbo service, just set the bindingType of @SofaReferenceBinding to dubbo:\n@SofaReference(binding = @SofaReferenceBinding(bindingType = \u0026amp;#34;dubbo\u0026amp;#34;), jvmFirst = false) private SampleService sampleService; Set the Group of Dubbo Service In the SOFARPC program model, there is no field called Group, but there is a model of uniqueId, which can be directly mapped to the Group in Dubbo model. For example, the following code is to publish a service whose Group is groupDemo:\n@Service @SofaService(bindings = {@SofaServiceBinding(bindingType = \u0026amp;#34;dubbo\u0026amp;#34;)}, uniqueId = \u0026amp;#34;groupDemo\u0026amp;#34;) public class SampleServiceImpl implements SampleService { } The following code is to reference a service whose Group is groupDemo:\n@SofaReference(binding = @SofaReferenceBinding(bindingType = \u0026amp;#34;dubbo\u0026amp;#34;), uniqueId = \u0026amp;#34;groupDemo\u0026amp;#34;, jvmFirst = false) private SampleService sampleService;  Note that Dubbo protocol currently only supports Zookeeper as service registry center.\n ","date":-62135596800,"description":"","dir":"projects/sofa-rpc/dubbo-usage/","fuzzywordcount":300,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"1bf72c194a20a5dccea70423690191f4","permalink":"/en/projects/sofa-rpc/dubbo-usage/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/en/projects/sofa-rpc/dubbo-usage/","summary":"In SOFARPC, to use different communication protocols, it is only required to use different Bindings. If you need to use the Dubbo protocol, just set Binding to Dubbo. The following shows an example using Annotation. For other usage methods, refer to Basic usage of Bolt protocol.\nPublish Service To publish a Dubbo service, just set the bindingType of @SofaServiceBinding to dubbo:\n@Service @SofaService(bindings = {@SofaServiceBinding(bindingType = \u0026#34;dubbo\u0026#34;)}) public class SampleServiceImpl implements SampleService { } Reference Service To reference a Dubbo service, just set the bindingType of @SofaReferenceBinding to dubbo:","tags":null,"title":"Basic usage of Dubbo protocol","type":"projects","url":"/en/projects/sofa-rpc/dubbo-usage/","wordcount":203},{"author":null,"categories":null,"content":"In SOFARPC, to use different communication protocols, it is only required to use different Bindings. If you need to use the H2C protocol, just set Binding to H2C. The following shows an example using Annotation. For other usage methods, refer to Basic usage of Bolt protocol.\nPublish Service To publish an H2C service, just set the bindingType of @SofaServiceBinding to h2c:\n@Service @SofaService(bindings = {@SofaServiceBinding(bindingType = \u0026amp;#34;h2c\u0026amp;#34;)}) public class SampleServiceImpl implements SampleService { } Reference Service To reference a H2C service, just set the bindingType of @SofaReferenceBinding to h2c:\n@SofaReference(binding = @SofaReferenceBinding(bindingType = \u0026amp;#34;h2c\u0026amp;#34;), jvmFirst = false) private SampleService sampleService; ","date":-62135596800,"description":"","dir":"projects/sofa-rpc/h2c-usage/","fuzzywordcount":200,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"fa75eff1e99b3acad5087160a1b44a09","permalink":"/en/projects/sofa-rpc/h2c-usage/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/en/projects/sofa-rpc/h2c-usage/","summary":"In SOFARPC, to use different communication protocols, it is only required to use different Bindings. If you need to use the H2C protocol, just set Binding to H2C. The following shows an example using Annotation. For other usage methods, refer to Basic usage of Bolt protocol.\nPublish Service To publish an H2C service, just set the bindingType of @SofaServiceBinding to h2c:\n@Service @SofaService(bindings = {@SofaServiceBinding(bindingType = \u0026#34;h2c\u0026#34;)}) public class SampleServiceImpl implements SampleService { } Reference Service To reference a H2C service, just set the bindingType of @SofaReferenceBinding to h2c:","tags":null,"title":"Basic usage of H2C protocol","type":"projects","url":"/en/projects/sofa-rpc/h2c-usage/","wordcount":100},{"author":null,"categories":null,"content":"In SOFARPC (Not In SOFABoot/SpringBoot)，when use Http as a protocol of server，we can use Json as the way of serialization，for some basic test scenes.\nSOFARPC API Usage Service Publish ServerConfig serverConfig = new ServerConfig() .setStopTimeout(60000) .setPort(12300) .setProtocol(RpcConstants.PROTOCOL_TYPE_HTTP) .setDaemon(true); ProviderConfig\u0026amp;lt;HttpService\u0026amp;gt; providerConfig = new ProviderConfig\u0026amp;lt;HttpService\u0026amp;gt;() .setInterfaceId(HttpService.class.getName()) .setRef(new HttpServiceImpl()) .setApplication(new ApplicationConfig().setAppName(\u0026amp;#34;serverApp\u0026amp;#34;)) .setServer(serverConfig) .setUniqueId(\u0026amp;#34;uuu\u0026amp;#34;) .setRegister(false); providerConfig.export(); Service Consume Because of the Http+Json，So users can use HttpClient to start a normal call, this is a piece of code in test.\nprivate ObjectMapper mapper = new ObjectMapper(); HttpClient httpclient = HttpClientBuilder.create().build(); // POST normal request String url = \u0026amp;#34;http://127.0.0.1:12300/com.alipay.sofa.rpc.server.http.HttpService:uuu/object\u0026amp;#34;; HttpPost httpPost = new HttpPost(url); httpPost.setHeader(RemotingConstants.HEAD_SERIALIZE_TYPE, \u0026amp;#34;json\u0026amp;#34;); ExampleObj obj = new ExampleObj(); obj.setId(1); obj.setName(\u0026amp;#34;xxx\u0026amp;#34;); byte[] bytes = mapper.writeValueAsBytes(obj); ByteArrayEntity entity = new ByteArrayEntity(bytes, ContentType.create(\u0026amp;#34;application/json\u0026amp;#34;)); httpPost.setEntity(entity); HttpResponse httpResponse = httpclient.execute(httpPost); Assert.assertEquals(200, httpResponse.getStatusLine().getStatusCode()); byte[] data = EntityUtils.toByteArray(httpResponse.getEntity()); ExampleObj result = mapper.readValue(data, ExampleObj.class); Assert.assertEquals(\u0026amp;#34;xxxxx\u0026amp;#34;, result.getName()); You will get some result.\n","date":-62135596800,"description":"","dir":"projects/sofa-rpc/http-json/","fuzzywordcount":200,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"28abdf6369247346bad670c639a422b8","permalink":"/en/projects/sofa-rpc/http-json/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/en/projects/sofa-rpc/http-json/","summary":"In SOFARPC (Not In SOFABoot/SpringBoot)，when use Http as a protocol of server，we can use Json as the way of serialization，for some basic test scenes.\nSOFARPC API Usage Service Publish ServerConfig serverConfig = new ServerConfig() .setStopTimeout(60000) .setPort(12300) .setProtocol(RpcConstants.PROTOCOL_TYPE_HTTP) .setDaemon(true); ProviderConfig\u0026lt;HttpService\u0026gt; providerConfig = new ProviderConfig\u0026lt;HttpService\u0026gt;() .setInterfaceId(HttpService.class.getName()) .setRef(new HttpServiceImpl()) .setApplication(new ApplicationConfig().setAppName(\u0026#34;serverApp\u0026#34;)) .setServer(serverConfig) .setUniqueId(\u0026#34;uuu\u0026#34;) .setRegister(false); providerConfig.export(); Service Consume Because of the Http+Json，So users can use HttpClient to start a normal call, this is a piece of code in test.","tags":null,"title":"Basic usage of HTTP protocol","type":"projects","url":"/en/projects/sofa-rpc/http-json/","wordcount":140},{"author":null,"categories":null,"content":"In SOFARPC, using different communication protocols is equal to using different Bindings. If you need to use the RESTful protocol, just set Binding to REST.\nPublish Service When defining a RESTful service interface, you need to add meta information to the interface using the annotations in JAXRS standard, such as the following interface:\n@Path(\u0026amp;#34;sample\u0026amp;#34;) public interface SampleService { @GET @Path(\u0026amp;#34;hello\u0026amp;#34;) String hello(); }  The annotations in JAXRS standard can be found in RESTEasy documentation.\n After the interface is defined, you can publish the implementation of the interface as a service, for example, by means of Annotation:\n@Service @SofaService(bindings = {@SofaServiceBinding(bindingType = \u0026amp;#34;rest\u0026amp;#34;)}) public class RestfulSampleServiceImpl implements SampleService { @Override public String hello() { return \u0026amp;#34;Hello\u0026amp;#34;; } } If you want to publish the service by other methods, please refer to Basic usage of Bolt protocol.\nAccess services through browser After the service is published, you can directly access the service through the browser. For the above service, the access address is as follows:\nhttp://localhost:8341/sample/hello The default port for SOFARPC RESTful service is 8341.\nReference Service In addition to accessing RESTful services published by SOFARPC through a browser, you can also reference services through the standard SOFARPC service reference methods, such as Annotation:\n@SofaReference(binding = @SofaReferenceBinding(bindingType = \u0026amp;#34;rest\u0026amp;#34;)) private SampleService sampleService; If you want to reference the service by other methods, please refer to Basic usage of Bolt protocol.\n","date":-62135596800,"description":"","dir":"projects/sofa-rpc/restful-basic/","fuzzywordcount":300,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"d41f976864ba8f8221f5b5d26f354d1c","permalink":"/en/projects/sofa-rpc/restful-basic/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/en/projects/sofa-rpc/restful-basic/","summary":"In SOFARPC, using different communication protocols is equal to using different Bindings. If you need to use the RESTful protocol, just set Binding to REST.\nPublish Service When defining a RESTful service interface, you need to add meta information to the interface using the annotations in JAXRS standard, such as the following interface:\n@Path(\u0026#34;sample\u0026#34;) public interface SampleService { @GET @Path(\u0026#34;hello\u0026#34;) String hello(); }  The annotations in JAXRS standard can be found in RESTEasy documentation.","tags":null,"title":"Basic usage of RESTful protocol","type":"projects","url":"/en/projects/sofa-rpc/restful-basic/","wordcount":228},{"author":null,"categories":null,"content":"Test code\nTest environment and conditions  Three 16-core 20 GB memory Docker containers as the server nodes (3 replicas) Two to eight 8-core Docker containers as clients 24 Raft groups. Each server node has eight leaders responsible for processing read/right requests. Followers do not have the permission to read. The target of stress testing is the RheaKV module of JRaft. Only the put and get APIs are subject to stress testing. Linearizable reads are guaranteed for the get API. The key size and value size are both 16 bytes. The read percentage is 10% and the write percentage is 90%.  Currently, the test scenarios are relatively simple. We will add more test scenarios in the future.\nTest scenario 1 Scenario 1: Test conditions    Number of clients Client batching Storage type Read/write ratio Replicator pipeline Key size Value size     8 Enabled MemoryDB 1:9 Enabled 16 bytes 16 bytes    Scenario 1: Result summary  Eight clients achieved 400,000+ ops, and the p95 RT is within 8 ms. Three server nodes didn\u0026amp;rsquo;t reach their maximum load. The load is about 15, and the CPU usage is about 40%.  Scenario 1: Load of three servers Scenario 1: Server 1 top - 20:11:14 up 10 days, 23:09, 1 user, load average: 12.29, 6.92, 4.00 Tasks: 36 total, 1 running, 35 sleeping, 0 stopped, 0 zombie %Cpu0 : 24.3 us, 17.7 sy, 0.0 ni, 50.0 id, 2.0 wa, 0.0 hi, 0.0 si, 6.0 st %Cpu1 : 21.9 us, 18.5 sy, 0.0 ni, 49.5 id, 2.0 wa, 0.0 hi, 0.0 si, 8.1 st %Cpu2 : 20.6 us, 18.6 sy, 0.0 ni, 53.2 id, 2.0 wa, 0.0 hi, 0.0 si, 5.6 st %Cpu3 : 23.3 us, 20.0 sy, 0.0 ni, 50.3 id, 1.3 wa, 0.0 hi, 0.0 si, 5.0 st %Cpu4 : 24.1 us, 19.1 sy, 0.0 ni, 49.8 id, 2.3 wa, 0.0 hi, 0.0 si, 4.7 st %Cpu5 : 21.3 us, 18.9 sy, 0.0 ni, 53.2 id, 2.0 wa, 0.0 hi, 0.0 si, 4.7 st %Cpu6 : 24.7 us, 18.4 sy, 0.0 ni, 50.2 id, 2.0 wa, 0.0 hi, 0.0 si, 4.7 st %Cpu7 : 24.8 us, 17.8 sy, 0.0 ni, 50.0 id, 1.7 wa, 0.0 hi, 0.0 si, 5.7 st %Cpu8 : 26.0 us, 18.3 sy, 0.0 ni, 51.3 id, 2.3 wa, 0.0 hi, 0.0 si, 2.0 st %Cpu9 : 26.6 us, 16.9 sy, 0.0 ni, 52.2 id, 2.0 wa, 0.0 hi, 0.0 si, 2.3 st %Cpu10 : 31.7 us, 17.7 sy, 0.0 ni, 46.3 id, 2.3 wa, 0.0 hi, 0.0 si, 2.0 st %Cpu11 : 23.2 us, 18.9 sy, 0.0 ni, 53.3 id, 2.3 wa, 0.0 hi, 0.0 si, 2.3 st %Cpu12 : 25.6 us, 18.3 sy, 0.0 ni, 51.5 id, 2.3 wa, 0.0 hi, 0.0 si, 2.3 st %Cpu13 : 22.6 us, 18.3 sy, 0.0 ni, 54.5 id, 2.3 wa, 0.0 hi, 0.0 si, 2.3 st %Cpu14 : 24.7 us, 17.3 sy, 0.0 ni, 54.0 id, 1.7 wa, 0.0 hi, 0.0 si, 2.3 st %Cpu15 : 61.8 us, 8.3 sy, 0.0 ni, 28.2 id, 0.3 wa, 0.0 hi, 0.0 si, 1.3 st KiB Mem : 62914560 total, 6854596 free, 39128016 used, 16931948 buff/cache KiB Swap: 2097148 total, 2097148 free, 0 used. 6854596 avail Mem PID USER PR NI VIRT RES SHR S %CPU %MEM TIME+ COMMAND 15682 root 20 0 12.853g 8.859g 24064 S 708.7 14.8 26:49.38 java Scenario 1: Server 2 top - 20:11:47 up 10 days, 23:03, 1 user, load average: 17.68, 8.50, 4.56 Tasks: 33 total, 1 running, 31 sleeping, 0 stopped, 1 zombie %Cpu0 : 22.7 us, 17.3 sy, 0.0 ni, 35.0 id, 8.3 wa, 0.0 hi, 0.0 si, 16.7 st %Cpu1 : 20.1 us, 19.4 sy, …","date":-62135596800,"description":"","dir":"projects/sofa-jraft/benchmark-performance/","fuzzywordcount":8900,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"4530827525ca87732eaf76ae34f03603","permalink":"/en/projects/sofa-jraft/benchmark-performance/","publishdate":"0001-01-01T00:00:00Z","readingtime":42,"relpermalink":"/en/projects/sofa-jraft/benchmark-performance/","summary":"Test code\nTest environment and conditions  Three 16-core 20 GB memory Docker containers as the server nodes (3 replicas) Two to eight 8-core Docker containers as clients 24 Raft groups. Each server node has eight leaders responsible for processing read/right requests. Followers do not have the permission to read. The target of stress testing is the RheaKV module of JRaft. Only the put and get APIs are subject to stress testing.","tags":null,"title":"Benchmark data","type":"projects","url":"/en/projects/sofa-jraft/benchmark-performance/","wordcount":8817},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-jraft/benchmark-performance/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"4530827525ca87732eaf76ae34f03603","permalink":"/projects/sofa-jraft/benchmark-performance/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-jraft/benchmark-performance/","summary":"","tags":null,"title":"Benchmark 数据","type":"projects","url":"/projects/sofa-jraft/benchmark-performance/","wordcount":0},{"author":null,"categories":null,"content":"Bolt protocol is a TCP-based custom protocol that performs better than HTTP. Within Ant Financial, a large number of RPCs use the Bolt protocol to communicate:\n Basic usage Calling type Timeout control Generic call Serialization protocol Custom thread pool  ","date":-62135596800,"description":"","dir":"projects/sofa-rpc/bolt/","fuzzywordcount":100,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"b812f6aadadf38b79140a711ff6aa6cd","permalink":"/en/projects/sofa-rpc/bolt/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/en/projects/sofa-rpc/bolt/","summary":"Bolt protocol is a TCP-based custom protocol that performs better than HTTP. Within Ant Financial, a large number of RPCs use the Bolt protocol to communicate:\n Basic usage Calling type Timeout control Generic call Serialization protocol Custom thread pool  ","tags":null,"title":"Bolt protocol","type":"projects","url":"/en/projects/sofa-rpc/bolt/","wordcount":39},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-rpc/bolt/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"b812f6aadadf38b79140a711ff6aa6cd","permalink":"/projects/sofa-rpc/bolt/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-rpc/bolt/","summary":"","tags":null,"title":"Bolt 协议","type":"projects","url":"/projects/sofa-rpc/bolt/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-rpc/bolt-usage/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"dd929c0a3cd2f4620ddf0d30d98ba85d","permalink":"/projects/sofa-rpc/bolt-usage/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-rpc/bolt-usage/","summary":"","tags":null,"title":"Bolt 协议基本使用","type":"projects","url":"/projects/sofa-rpc/bolt-usage/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-rpc/generic-invoke/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"84ac624dc99a42a8f89489aa10304ef7","permalink":"/projects/sofa-rpc/generic-invoke/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-rpc/generic-invoke/","summary":"","tags":null,"title":"Bolt 协议泛化调用","type":"projects","url":"/projects/sofa-rpc/generic-invoke/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-rpc/invoke-type/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"e296d9344b6aa9f550e6213b97da084b","permalink":"/projects/sofa-rpc/invoke-type/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-rpc/invoke-type/","summary":"","tags":null,"title":"Bolt 协议调用方式","type":"projects","url":"/projects/sofa-rpc/invoke-type/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-rpc/bolt-timeout/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"cf14f73dc0c4672a9255ef55b56de419","permalink":"/projects/sofa-rpc/bolt-timeout/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-rpc/bolt-timeout/","summary":"","tags":null,"title":"Bolt 协议超时控制","type":"projects","url":"/projects/sofa-rpc/bolt-timeout/","wordcount":0},{"author":null,"categories":null,"content":"As one of the developing directions of cloud native technology, Serverless architecture enables you to further improve resource utilization and focus on service development. With our workshop, you can experience new features such as quick creation of Serveless applications, automatic second-level 0-1-N scaling based on service requests, and quick troubleshooting via log viewer.\nWorkshop procedure Flow diagram Preview Preparation  Access to Serverless application service address Login with account and password Git clone this project to local  Step 1-1: Publish backend Java application  Select Create quickly Select Java Runtime Upload the code package balance-mng.jar The entry method can be automatically recognized Port: 8080 Copy and save the backend service address after creation View the number of computing instances of backend service: 0  Step 1-2: Publish frontend NodeJS application  Select create an application Select the buildpack NodeJS Upload the code package stock-mng.zip The entry method can be automatically recognized Select nodejs-0.0.1.1-pre at runtime Port: 3000 Set the environment variable BALANCEMNG_URL as the backend service address  Step 2: 0-1 cold boot capability  Access frontend service View the changes in the number of the computing instances of backend service  Step 3: Log and monitoring  View application service logs via Log Shell View usage amount via monitoring  Step 4: Configure time trigger  Configure timing trigger to call application at fixed time View the triggering results via operation records  Step 5: Create versions and control traffic  Clone the frontend application and create a new version Upload the code package stock-mng-v2.zip Configure router to visit V1 and V2 at 1:1 ratio View the effect in the browser  Step 6: Quick M-n capability for high-concurrency  Simulate high concurrency situtation via scripts and access the frontend application service Check how the Serverless application perform quick M-N computing instance changes  ","date":-62135596800,"description":"With this guide, you can experience new features such as quick creation of Serveless applications, automatic second-level 0-1-N scaling based on service requests, quick troubleshooting via log viewer, and application startup at fixed time.","dir":"guides/kc-serverless-demo/","fuzzywordcount":300,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"f355d1b598fed47b730bd74ad25f3683","permalink":"/en/guides/kc-serverless-demo/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/en/guides/kc-serverless-demo/","summary":"As one of the developing directions of cloud native technology, Serverless architecture enables you to further improve resource utilization and focus on service development. With our workshop, you can experience new features such as quick creation of Serveless applications, automatic second-level 0-1-N scaling based on service requests, and quick troubleshooting via log viewer.\nWorkshop procedure Flow diagram Preview Preparation  Access to Serverless application service address Login with account and password Git clone this project to local  Step 1-1: Publish backend Java application  Select Create quickly Select Java Runtime Upload the code package balance-mng.","tags":null,"title":"Build applications on the cloud based on Serverless","type":"guides","url":"/en/guides/kc-serverless-demo/","wordcount":290},{"author":null,"categories":null,"content":"Procedure This guide introduces how to quickly build a microservice based on SOFAStack. It mainly includes the following steps.\n Publish service using SOFABoot and SOFARPC Call service using SOFABoot and SOFARPC View Tracer information reported by SOFATracer via ZipKin View Metrics information via SOFALookout  Architecture Tasks 1. Preparation Clone the project demo from GitHub to local\ngit clone https://github.com/sofastack-guides/kc-sofastack-demo.git Import the project into IDEA or Eclipse. After import, the interface is as follows:\n balance-mng: account management system, providing deduction balance service stock-mng: account system, providing deduction inventory service  2. Introduce dependencies Add the following dependencies into the pom.xml files of balance-mng and stock-mng project modules.\n\u0026amp;lt;!--SOFARPC dependency--\u0026amp;gt; \u0026amp;lt;dependency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;com.alipay.sofa\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;rpc-sofa-boot-starter\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;/dependency\u0026amp;gt; \u0026amp;lt;!--SOFATracer dependency--\u0026amp;gt; \u0026amp;lt;dependency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;com.alipay.sofa\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;tracer-sofa-boot-starter\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;/dependency\u0026amp;gt; \u0026amp;lt;!--SOFARegistry dependency--\u0026amp;gt; \u0026amp;lt;dependency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;com.alipay.sofa\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;registry-client-all\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;/dependency\u0026amp;gt; \u0026amp;lt;!--runtime dependency--\u0026amp;gt; \u0026amp;lt;dependency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;com.alipay.sofa\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;runtime-sofa-boot-starter\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;/dependency\u0026amp;gt; \u0026amp;lt;!--SOFALookout dependency--\u0026amp;gt; \u0026amp;lt;dependency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;com.alipay.sofa.lookout\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;lookout-sofa-boot-starter\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;/dependency\u0026amp;gt; For balance-mng project, you need to introduce the dependencies into the pom file of balance-mng-imp module.\nFor stock-mng project, you need to introduce the dependencies into the pom file of stock-mng module.\n3. Add configurations Copy the following configurations into the application.properties file of balance-mng and stock-mng project module.\n# 1、Add Service Registry address com.alipay.sofa.rpc.registry.address=sofa://118.31.43.62:9603 # 2、Add the zipkin address where tracer data is reported com.alipay.sofa.tracer.zipkin.base-url=http://139.224.123.199:9411 # 3、Add the server-side address where the metrics data is reported com.alipay.sofa.lookout.agent-host-address=139.224.123.35 For balance-mng project, you need to add configurations to the application.properties file in balance-mng-bootstrap module.\nFor stock-mng project, you need to add configurations to the application.properties file in stock-mng module.\n4. Modify unique id Since everyone shares a set of service discoveries, to differentiate the services published by different users, it is required to add a unique id to the service.\nKubeCon workshop will prepare a SOFAStack account for each user in the format ofuser0@sofastack.io to user99@sofastack.io. The first half of the account, namely user0 …","date":-62135596800,"description":"This guide introduces how to quickly build a microservice based on SOFAStack. ","dir":"guides/sofastack-quick-start/","fuzzywordcount":600,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"78bfd4806a86dc15ac86eee16fb85c82","permalink":"/en/guides/sofastack-quick-start/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/en/guides/sofastack-quick-start/","summary":"Procedure This guide introduces how to quickly build a microservice based on SOFAStack. It mainly includes the following steps.\n Publish service using SOFABoot and SOFARPC Call service using SOFABoot and SOFARPC View Tracer information reported by SOFATracer via ZipKin View Metrics information via SOFALookout  Architecture Tasks 1. Preparation Clone the project demo from GitHub to local\ngit clone https://github.com/sofastack-guides/kc-sofastack-demo.git Import the project into IDEA or Eclipse. After import, the interface is as follows:","tags":null,"title":"Build microservices with SOFAStack","type":"guides","url":"/en/guides/sofastack-quick-start/","wordcount":586},{"author":null,"categories":null,"content":"SOFARPC provides a variety of calling types under the Bolt protocol to meet different scenarios.\nSynchronous In the synchronous calling type, after the client initiates a call, it will wait for the server to return the result and then perform subsequent operations. This is the default calling type of SOFARPC.\nAsynchronous In the asynchronous calling type, after the client initiates a call, it will not wait for the result from the server but continue to execute the subsequent business logic. The result returned by the server will be cached by SOFARPC. When the client needs the result, it can call the API to get the result. To set a service to be asynchronous, you can configure the type attribute in the corresponding usage mode:\nXML In the XML mode, set the type attribute of the \u0026amp;lt;sofa:global-attrs\u0026amp;gt; tag to future:\n\u0026amp;lt;sofa:reference interface=\u0026amp;#34;com.example.demo.SampleService\u0026amp;#34; id=\u0026amp;#34;sampleService\u0026amp;#34;\u0026amp;gt; \u0026amp;lt;sofa:binding.bolt\u0026amp;gt; \u0026amp;lt;sofa:global-attrs type=\u0026amp;#34;future\u0026amp;#34;/\u0026amp;gt; \u0026amp;lt;/sofa:binding.bolt\u0026amp;gt; \u0026amp;lt;/sofa:reference\u0026amp;gt; Annotation In Annotation mode, set the invokeType attribute of @SofaReferenceBinding to future:\n@SofaReference(binding = @SofaReferenceBinding(bindingType = \u0026amp;#34;bolt\u0026amp;#34;, invokeType = \u0026amp;#34;future\u0026amp;#34;)) private SampleService sampleService; API in Spring environment When using the API in Spring environment, you just need to set the type attribute of BoltBindingParam:\nBoltBindingParam boltBindingParam = new BoltBindingParam(); boltBindingParam.setType(\u0026amp;#34;future\u0026amp;#34;); API in non-Spring environment When using the bare API of SOFARPC in a non-Spring environment, you just need to set the invokeType attribute of ConsumerConfig:\nConsumerConfig\u0026amp;lt;SampleService\u0026amp;gt; consumerConfig = new ConsumerConfig\u0026amp;lt;SampleService\u0026amp;gt;() .setInterfaceId(SampleService.class.getName()) .setRegistry(registryConfig) .setProtocol(\u0026amp;#34;bolt\u0026amp;#34;) .setInvokeType(\u0026amp;#34;future\u0026amp;#34;); Get the calling result Currently, there are two ways to get the result of an asynchronous call:\nGet result directly You can directly get the result of an asynchronous call in the following way:\nString result = (String)SofaResponseFuture.getResponse(0, true); The first parameter is the timeout period for getting the result, and the second parameter indicates whether to clear the result in the thread context.\nGet JDK native Future You can get the JDK native Future object in the following way, and then call the Future object from anywhere to get the result:\nFuture future = SofaResponseFuture.getFuture(true); The first parameter indicates whether to clear the result in the thread context.\nCallback By using the callback type of the SOFARPC Bolt protocol, SOFARPC doesn\u0026amp;rsquo;t need to wait for the result after initiating a call. After the client receives the result returned from the server, it can automatically call back a callback interface implemented by the user.\nTo use the callback type of the SOFARPC Bolt protocol, you first need to implement a callback …","date":-62135596800,"description":"","dir":"projects/sofa-rpc/invoke-type/","fuzzywordcount":1000,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"e296d9344b6aa9f550e6213b97da084b","permalink":"/en/projects/sofa-rpc/invoke-type/","publishdate":"0001-01-01T00:00:00Z","readingtime":5,"relpermalink":"/en/projects/sofa-rpc/invoke-type/","summary":"SOFARPC provides a variety of calling types under the Bolt protocol to meet different scenarios.\nSynchronous In the synchronous calling type, after the client initiates a call, it will wait for the server to return the result and then perform subsequent operations. This is the default calling type of SOFARPC.\nAsynchronous In the asynchronous calling type, after the client initiates a call, it will not wait for the result from the server but continue to execute the subsequent business logic.","tags":null,"title":"Calling type","type":"projects","url":"/en/projects/sofa-rpc/invoke-type/","wordcount":908},{"author":null,"categories":null,"content":"Client built-in extension metrics The extension modules currently in effect by default are lookout-ext-jvm and lookout-ext-os (from v1.5.0).\nJVM thread    metric name metric tags specification     jvm.threads.totalStarted  \u0026amp;mdash;   jvm.threads.active  \u0026amp;mdash;   jvm.threads.peak  \u0026amp;mdash;   jvm.threads.daemon  \u0026amp;mdash;    JVM class loading    metric name metric tags specification     jvm.classes.unloaded  \u0026amp;mdash;   jvm.classes.loaded  \u0026amp;mdash;   jvm.classes.total  \u0026amp;mdash;    JVM memory    metric name metric tags specification     jvm.memory.heap.init  \u0026amp;mdash;   jvm.memory.heap.used  \u0026amp;mdash;   jvm.memory.heap.max  \u0026amp;mdash;   jvm.memory.heap.committed  \u0026amp;mdash;    JVM garbage recycling    metric name metric tags specification     jvm.gc.young.time  \u0026amp;mdash;   jvm.gc.young.count  \u0026amp;mdash;   jvm.gc.old.time  \u0026amp;mdash;   jvm.gc.old.count  \u0026amp;mdash;    Machine file system information    metric name metric tags specification     instance.file.system.free.space root（the available filesystem roots） \u0026amp;mdash;   instance.file.system.total.space root \u0026amp;mdash;   instance.file.system.usabe.space root \u0026amp;mdash;    Machine information    metric name metric tags specification     instance.mem.free  \u0026amp;mdash;   instance.mem.total  \u0026amp;mdash;   instance.processors  \u0026amp;mdash;   instance.uptime  \u0026amp;mdash;   instance.systemload.average  \u0026amp;mdash;    Linux operating system information (enabled by default after version 1.5.0)    metric name metric tags specification     os.systemload.average.1min  \u0026amp;mdash;   os.systemload.average.5min  \u0026amp;mdash;   os.systemload.average.15min  \u0026amp;mdash;   os.cpu.idle  \u0026amp;mdash;   os.cpu.iowait  \u0026amp;mdash;   os.cpu.irq  \u0026amp;mdash;   os.cpu.nice  \u0026amp;mdash;   os.cpu.softirq  \u0026amp;mdash;   os.cpu.system  \u0026amp;mdash;   os.cpu.user  \u0026amp;mdash;   os.disk.usage.percent.used device,root,type \u0026amp;mdash;   os.disk.usage.total.bytes device,root,type \u0026amp;mdash;   os.disk.usage.used.bytes device,root,type \u0026amp;mdash;   os.net.stats.in.bytes intfc \u0026amp;mdash;   os.net.stats.in.compressed intfc \u0026amp;mdash;   os.net.stats.in.dropped intfc \u0026amp;mdash;   os.net.stats.in.errs intfc \u0026amp;mdash;   os.net.stats.in.fifo.errs intfc \u0026amp;mdash;   os.net.stats.in.frame.errs intfc \u0026amp;mdash;   os.net.stats.in.multicast intfc \u0026amp;mdash;   os.net.stats.in.packets intfc \u0026amp;mdash;   os.net.stats.out.bytes intfc \u0026amp;mdash;   os.net.stats.out.carrier.errs intfc \u0026amp;mdash;   os.net.stats.out.collisions intfc \u0026amp;mdash;   os.net.stats.out.compressed intfc \u0026amp;mdash;   os.net.stats.out.dropped intfc \u0026amp;mdash;   os.net.stats.out.errs intfc \u0026amp;mdash;   os.net.stats.out.fifo.errs intfc \u0026amp;mdash;   os.net.stats.out.packets intfc \u0026amp;mdash;   os.memory.stats.buffers.bytes \u0026amp;mdash; \u0026amp;gt;= 1.5.3   os.memory.stats.cached.bytes \u0026amp;mdash; \u0026amp;gt;= 1.5.3   os.memory.stats.free.bytes \u0026amp;mdash; \u0026amp;gt;= 1.5.3   os.memory.stats.total.bytes \u0026amp;mdash; \u0026amp;gt;= 1.5.3    ","date":-62135596800,"description":"","dir":"projects/sofa-lookout/client-ext-metrics/","fuzzywordcount":300,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"c8a4fb3d904e359e99db9d4e81e60812","permalink":"/en/projects/sofa-lookout/client-ext-metrics/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/en/projects/sofa-lookout/client-ext-metrics/","summary":"Client built-in extension metrics The extension modules currently in effect by default are lookout-ext-jvm and lookout-ext-os (from v1.5.0).\nJVM thread    metric name metric tags specification     jvm.threads.totalStarted  \u0026mdash;   jvm.threads.active  \u0026mdash;   jvm.threads.peak  \u0026mdash;   jvm.threads.daemon  \u0026mdash;    JVM class loading    metric name metric tags specification     jvm.classes.unloaded  \u0026mdash;   jvm.","tags":null,"title":"Client built-in extension metrics","type":"projects","url":"/en/projects/sofa-lookout/client-ext-metrics/","wordcount":224},{"author":null,"categories":null,"content":"The client module is a complex module which contains cluster, router, address holder，connection holder, and load balancer, and interacts with proxy, registry center and other modules.\nSee the following flow chart:\n","date":-62135596800,"description":"","dir":"projects/sofa-rpc/client-invoke-flow/","fuzzywordcount":100,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"310d99d64b808a3b526563e92c699952","permalink":"/en/projects/sofa-rpc/client-invoke-flow/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/en/projects/sofa-rpc/client-invoke-flow/","summary":"The client module is a complex module which contains cluster, router, address holder，connection holder, and load balancer, and interacts with proxy, registry center and other modules.\nSee the following flow chart:","tags":null,"title":"Client call flow","type":"projects","url":"/en/projects/sofa-rpc/client-invoke-flow/","wordcount":31},{"author":null,"categories":null,"content":"Client configuration example lookoutConfig.setProperty(LookoutConfig.LOOKOUT_AGENT_HOST_ADDRESS,\u0026amp;#34;127.0.0.1\u0026amp;#34;); Description of server configuration item    Configuration item Corresponding SpringBoot configuration item Default value Description     lookout.enable com.alipay.sofa.lookout.enable true Function switch, it defaults to true. If you change it to false (empty objects and empty methods), then all metrics comsume almost no memory and computing resource   lookout.max.metrics.num com.alipay.sofa.lookout.max-metrics-num 5000 Maximum number limit of metrics, over which will be automatically ignored   lookout.prometheus.exporter.server.port com.alipay.sofa.lookout.prometheus-exporter-server-port 9494 The port got by Prometheus   Lookout.exporter.enable com.alipay.sofa.lookout.exporter-enable false Whether or not to enable services that support passive collection   Lookout.agent.host.address com.alipay.sofa.lookout.agent-host-address - Proactively report the annotation address of the Agent server. Multiple addresses are separated by commas    Description of client log configuration    Configuration item of system property Corresponding SpringBoot configuration item Default Value Description     -Dlogging.level.com.alipay.lookout=? logging.level.com.alipay.lookout warn The log level of Lookout client. Debug to see the details of the report data   -Dlogging.path=? logging.path Directory of the current user Modify SpringBoot V1 log directory, including \u0026amp;ldquo;lookout/\u0026amp;rdquo; log subdirectory    Custom client configuration (suitable for SpringBoot technology stack mode) Use configuration custom extensions: MetricConfigCustomizerConfig\n@Configuration public class MetricConfigCustomizerConfig { @Bean public MetricConfigCustomizer metricConfigCustomizer() { return new MetricConfigCustomizer() { @Override public void customize(MetricConfig metricConfig) { metricConfig.addProperty(\u0026amp;#34;testaa\u0026amp;#34;, \u0026amp;#34;testbb\u0026amp;#34;); } }; } } ","date":-62135596800,"description":"","dir":"projects/sofa-lookout/client-configuration/","fuzzywordcount":200,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"5fd84950d4d565d3fb20781337792bf1","permalink":"/en/projects/sofa-lookout/client-configuration/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/en/projects/sofa-lookout/client-configuration/","summary":"Client configuration example lookoutConfig.setProperty(LookoutConfig.LOOKOUT_AGENT_HOST_ADDRESS,\u0026#34;127.0.0.1\u0026#34;); Description of server configuration item    Configuration item Corresponding SpringBoot configuration item Default value Description     lookout.enable com.alipay.sofa.lookout.enable true Function switch, it defaults to true. If you change it to false (empty objects and empty methods), then all metrics comsume almost no memory and computing resource   lookout.max.metrics.num com.alipay.sofa.lookout.max-metrics-num 5000 Maximum number limit of metrics, over which will be automatically ignored   lookout.","tags":null,"title":"Client configuration","type":"projects","url":"/en/projects/sofa-lookout/client-configuration/","wordcount":192},{"author":null,"categories":null,"content":"1. Create a Maven project After deploying the servers, we can create a new Maven project to use services provided by SOFARegistry. Create a new Maven project, and then import the following dependency:\n\u0026amp;lt;dependency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;com.alipay.sofa\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;registry-client-all\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;version\u0026amp;gt;${registry.client.version}\u0026amp;lt;/version\u0026amp;gt; \u0026amp;lt;/dependency\u0026amp;gt; 2. Publish data // Create a client instance. RegistryClientConfig config = DefaultRegistryClientConfigBuilder.start().setRegistryEndpoint(\u0026amp;#34;127.0.0.1\u0026amp;#34;).setRegistryEndpointPort(9603).build(); DefaultRegistryClient registryClient = new DefaultRegistryClient(config); registryClient.init(); // Create a publisher registry. String dataId = \u0026amp;#34;com.alipay.test.demo.service:1.0@DEFAULT\u0026amp;#34;; PublisherRegistration registration = new PublisherRegistration(dataId); // Register the registry with the client and publish data. registryClient.register(registration, \u0026amp;#34;10.10.1.1:12200?xx=yy\u0026amp;#34;); Perform the following steps to publish data by using SOFARegistry:\n Create a client instance. Create a publisher registry. Register the registry with the client and publish data.  2.1 Create a client instance The key to creating a client instance is to create a RegistryClientConfig object. When creating a RegistryClientConfig object, you need to specify the RegistryEndpoint and RegistryEndpointPort.\n RegistryEndpoint: the endpoint of any session node of SOFARegistry RegistryEndpointPort: the session.server.httpServerPort port number configured for a session node  2.2 Create a publisher registry To create a publisher registry, you only need to create a PublisherRegistration object and specify the dataId, which is the unique identifier of the publisher service.\n2.3 Publish data You can call the register method of the RegistryClient to publish data. This method requires two parameters: the first is a publisher registry with the specified dataId of a service, and the second is a string type data value.\n3. Subscribe to the data // Create a client instance. RegistryClientConfig config = DefaultRegistryClientConfigBuilder.start().setRegistryEndpoint(\u0026amp;#34;127.0.0.1\u0026amp;#34;).setRegistryEndpointPort(9603).build(); DefaultRegistryClient registryClient = new DefaultRegistryClient(config); registryClient.init(); // Create SubscriberDataObserver. SubscriberDataObserver subscriberDataObserver = new SubscriberDataObserver() { public void handleData(String dataId, UserData userData) { System.out.println(\u0026amp;#34;receive data success, dataId: \u0026amp;#34; + dataId + \u0026amp;#34;, data: \u0026amp;#34; + userData); } }; // Create a subscriber registry and specify the subscription level. ScopeEnum covers three subscription levels: zone, dataCenter, and global. String dataId = \u0026amp;#34;com.alipay.test.demo.service:1.0@DEFAULT\u0026amp;#34;; SubscriberRegistration registration = new SubscriberRegistration(dataId, subscriberDataObserver); registration.setScopeEnum(ScopeEnum.global); // Register the registry with the client and …","date":-62135596800,"description":"","dir":"projects/sofa-registry/client-quick-start/","fuzzywordcount":600,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"66e300d44b2f2a903d976bf83eb7c16e","permalink":"/en/projects/sofa-registry/client-quick-start/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/en/projects/sofa-registry/client-quick-start/","summary":"1. Create a Maven project After deploying the servers, we can create a new Maven project to use services provided by SOFARegistry. Create a new Maven project, and then import the following dependency:\n\u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.alipay.sofa\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;registry-client-all\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${registry.client.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; 2. Publish data // Create a client instance. RegistryClientConfig config = DefaultRegistryClientConfigBuilder.start().setRegistryEndpoint(\u0026#34;127.0.0.1\u0026#34;).setRegistryEndpointPort(9603).build(); DefaultRegistryClient registryClient = new DefaultRegistryClient(config); registryClient.init(); // Create a publisher registry. String dataId = \u0026#34;com.alipay.test.demo.service:1.0@DEFAULT\u0026#34;; PublisherRegistration registration = new PublisherRegistration(dataId); // Register the registry with the client and publish data.","tags":null,"title":"Client usage","type":"projects","url":"/en/projects/sofa-registry/client-quick-start/","wordcount":558},{"author":null,"categories":null,"content":" Project address\n Introduction During merged deployment, Biz packages can communicate with each other by releasing and referencing JVM services apart from using the RPC framework. This sample project is intended to demonstrate how two Biz packages communicate by JVM services.\nWithin the biz-jvm-invocation-sample project, there are three sub-projects whose functions are as follows:\n facade: A common Java module that defines the SampleJvmService interface.  package me.qlong.tech.service; public interface SampleJvmService { String service(); }  app-one: A SOFABoot Web application that defines a simple rest request and use the @SofaReference annotation to reference the SampleJvmService. When a page request is triggered, an attempt is made to call the JVM service. The key code is:  package me.qlong.controller; import com.alipay.sofa.runtime.api.annotation.SofaReference; import me.qlong.tech.service.SampleJvmService; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RestController; @RestController public class HelloController { @SofaReference private SampleJvmService sampleJvmService; @RequestMapping(\u0026amp;#34;/hello\u0026amp;#34;) public String hello() { return sampleJvmService.service(); } }  app-two: A non-web application in SOFABoot that uses the @SofaService annotation to publish the SampleJvmService.  package me.qlong.tech.service.impl; import com.alipay.sofa.runtime.api.annotation.SofaService; import me.qlong.tech.service.SampleJvmService; import org.springframework.stereotype.Component; @SofaService @Component public class AppTwoSampleService implements SampleJvmService{ public String service() { return \u0026amp;#34;App Two\u0026amp;#34;; } } Dependency To communicate between Biz packages through JVM services, you must add dependencies on the SOFARuntime package and the corresponding Ark Plugin as follows:\n\u0026amp;lt;dependency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;com.alipay.sofa\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;runtime-sofa-boot-starter\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;classifier\u0026amp;gt;ark-plugin\u0026amp;lt;/classifier\u0026amp;gt; \u0026amp;lt;/dependency\u0026amp;gt; \u0026amp;lt;dependency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;com.alipay.sofa\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;runtime-sofa-boot-starter\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;/dependency\u0026amp;gt; For detailed information about publishing and referencing JVM services, see the SOFABoot Documentation. You are advised to use annotations in Jarslink2.0.\nDemo  cd biz-jvm-invocation-sample/facade \u0026amp;amp;\u0026amp;amp; mvn clean install Execute the mvn clean install command in the facade root directory, and install the facade package in the local Maven repository so that you can add a facade dependency in app-one and app-two:  \u0026amp;lt;!--service facade--\u0026amp;gt; \u0026amp;lt;dependency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;me.qlong.tech\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;facade\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;version\u0026amp;gt;1.0.0\u0026amp;lt;/version\u0026amp;gt; \u0026amp;lt;/dependency\u0026amp;gt;   cd biz-jvm-invocation-sample/app-one \u0026amp;amp;\u0026amp;amp; mvn clean package Execute the mvn clean package command in the app-one root directory and package the application into Ark …","date":-62135596800,"description":"","dir":"projects/sofa-boot/sofa-jarslink-jarslink-invocation-demo/","fuzzywordcount":600,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"59778c5223dc6267bd537be6c79b658a","permalink":"/en/projects/sofa-boot/sofa-jarslink-jarslink-invocation-demo/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/en/projects/sofa-boot/sofa-jarslink-jarslink-invocation-demo/","summary":"Project address\n Introduction During merged deployment, Biz packages can communicate with each other by releasing and referencing JVM services apart from using the RPC framework. This sample project is intended to demonstrate how two Biz packages communicate by JVM services.\nWithin the biz-jvm-invocation-sample project, there are three sub-projects whose functions are as follows:\n facade: A common Java module that defines the SampleJvmService interface.  package me.qlong.tech.service; public interface SampleJvmService { String service(); }  app-one: A SOFABoot Web application that defines a simple rest request and use the @SofaReference annotation to reference the SampleJvmService.","tags":null,"title":"Communicate across applications","type":"projects","url":"/en/projects/sofa-boot/sofa-jarslink-jarslink-invocation-demo/","wordcount":523},{"author":null,"categories":null,"content":"SOFARPC supports different communication protocols and currently supports Bolt, RESTful and Dubbo. For details, please refer to the corresponding document of each protocol:\n Bolt Protocol  Basic usage Calling type Timeout control Generic call Serialization protocol Custom thread pool   RESTful  Basic usage Custom filter Integrate Swagger   Dubbo  Basic usage   H2C  Basic usage    ","date":-62135596800,"description":"","dir":"projects/sofa-rpc/protocol/","fuzzywordcount":100,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"18f51cb12f7a0384a71ab22349292a08","permalink":"/en/projects/sofa-rpc/protocol/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/en/projects/sofa-rpc/protocol/","summary":"SOFARPC supports different communication protocols and currently supports Bolt, RESTful and Dubbo. For details, please refer to the corresponding document of each protocol:\n Bolt Protocol  Basic usage Calling type Timeout control Generic call Serialization protocol Custom thread pool   RESTful  Basic usage Custom filter Integrate Swagger   Dubbo  Basic usage   H2C  Basic usage    ","tags":null,"title":"Communication protocols","type":"projects","url":"/en/projects/sofa-rpc/protocol/","wordcount":51},{"author":null,"categories":null,"content":"How to compile  Install JDK7 and above, and Maven 3.2.5 and above.\n Directly download the code and then execute the following command:\ncd sofa-jarslink mvn clean install Note: you cannot compile the code under a sub-directory (i.e., sub-module). Since there are many modules, the configuration is restricted to the root directory only to avoid repetitive configuration of some packaging plugins such as the formatting plugin and License plugin. There will be an error message if you execute the packaging command in a sub-module.\n","date":-62135596800,"description":"","dir":"projects/sofa-boot/sofa-jarslink-compile/","fuzzywordcount":100,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"23c8cae6050d7a772f45d3ff2b4ce889","permalink":"/en/projects/sofa-boot/sofa-jarslink-compile/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/en/projects/sofa-boot/sofa-jarslink-compile/","summary":"How to compile  Install JDK7 and above, and Maven 3.2.5 and above.\n Directly download the code and then execute the following command:\ncd sofa-jarslink mvn clean install Note: you cannot compile the code under a sub-directory (i.e., sub-module). Since there are many modules, the configuration is restricted to the root directory only to avoid repetitive configuration of some packaging plugins such as the formatting plugin and License plugin. There will be an error message if you execute the packaging command in a sub-module.","tags":null,"title":"Compile Jarslink project","type":"projects","url":"/en/projects/sofa-boot/sofa-jarslink-compile/","wordcount":83},{"author":null,"categories":null,"content":" Install JDK7 or later and Maven 3.2.5 or later.\n Download the codes directly and execute the following commands:\ncd sofa-rpc mvn clean install Note: You can not build under a subdirectory (namely the submodule). Because there are too many SOFARPC modules, if every submodule needs to be installed and deployed, there will be much useless records in the repository. This issue is considered in the process of designing the SOFARPC project structure. The current structure saves you the trouble of installing and deploying all submodules, and you just have to install and deploy one module, namely the sofa-rpc-all (all) module.\n","date":-62135596800,"description":"","dir":"projects/sofa-rpc/how-to-build/","fuzzywordcount":200,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"52ad3debb35be8743c97bb4b6b77f22b","permalink":"/en/projects/sofa-rpc/how-to-build/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/en/projects/sofa-rpc/how-to-build/","summary":"Install JDK7 or later and Maven 3.2.5 or later.\n Download the codes directly and execute the following commands:\ncd sofa-rpc mvn clean install Note: You can not build under a subdirectory (namely the submodule). Because there are too many SOFARPC modules, if every submodule needs to be installed and deployed, there will be much useless records in the repository. This issue is considered in the process of designing the SOFARPC project structure.","tags":null,"title":"Compile SOFARPC project","type":"projects","url":"/en/projects/sofa-rpc/how-to-build/","wordcount":100},{"author":null,"categories":null,"content":"Provide all the parameters that can be configured.\n Service publishing and reference configuration Warm-up forwarding configuration Fault tolerance configuration  ","date":-62135596800,"description":"","dir":"projects/sofa-rpc/configuration/","fuzzywordcount":100,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"b1a8a8c426beab292165716f1dff1ae4","permalink":"/en/projects/sofa-rpc/configuration/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/en/projects/sofa-rpc/configuration/","summary":"Provide all the parameters that can be configured.\n Service publishing and reference configuration Warm-up forwarding configuration Fault tolerance configuration  ","tags":null,"title":"Configuration parameters","type":"projects","url":"/en/projects/sofa-rpc/configuration/","wordcount":19},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/mosn/configuration/listener/network-filter/connection-manager/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"88e2d06bd6137225eeebf9015b2192a2","permalink":"/projects/mosn/configuration/listener/network-filter/connection-manager/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/mosn/configuration/listener/network-filter/connection-manager/","summary":"","tags":null,"title":"connection_manager","type":"projects","url":"/projects/mosn/configuration/listener/network-filter/connection-manager/","wordcount":0},{"author":null,"categories":null,"content":"To use Consul as service registry center, you need to add this dependency\n\u0026amp;lt;dependency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;com.ecwid.consul\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;consul-api\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;version\u0026amp;gt;1.4.2\u0026amp;lt;/version\u0026amp;gt; \u0026amp;lt;/dependency\u0026amp;gt; and need to configure it in application.properties as follows:\ncom.alipay.sofa.rpc.registry.address=consul://127.0.0.1:8500 The value after consul: is the connection address of the consul. If you need to set some other parameters, you can also configure as follows:\ncom.alipay.sofa.rpc.registry.address=consul://127.0.0.1:8500?a=1\u0026amp;amp;b=2 ","date":-62135596800,"description":"","dir":"projects/sofa-rpc/registry-consul/","fuzzywordcount":100,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"e6b0aa843ea0ad401c3184f6ce87649b","permalink":"/en/projects/sofa-rpc/registry-consul/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/en/projects/sofa-rpc/registry-consul/","summary":"To use Consul as service registry center, you need to add this dependency\n\u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.ecwid.consul\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;consul-api\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.4.2\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; and need to configure it in application.properties as follows:\ncom.alipay.sofa.rpc.registry.address=consul://127.0.0.1:8500 The value after consul: is the connection address of the consul. If you need to set some other parameters, you can also configure as follows:\ncom.alipay.sofa.rpc.registry.address=consul://127.0.0.1:8500?a=1\u0026amp;b=2 ","tags":null,"title":"Consul","type":"projects","url":"/en/projects/sofa-rpc/registry-consul/","wordcount":54},{"author":null,"categories":null,"content":" You can visit Development Route first to learn more about development tasks and future planning.\n Preparations Before contributing any code, we need to know how to use the Git tool and the GitHub website.\n Refer to the Git official books for the Git tool usage. The first few chapters will help you get a quick start. Read Git collaboration process through  GitHub Code Contribution Process Submitting an issue Whether you want to fix a bug of SOFAArk or add a new feature of SOFAArk, you have to submit an issue to describe your demand before you submit the code on GitHub address in SOFAArk. There are several advantages of doing so:\n There will not be any conflict with other developers or their plans for this project to result in repetitive work. The maintenance personnel of SOFAArk will discuss about the bug or new function you submitted, to determine if the modification is necessary, or if there is any room for improvement or any better solution. Start developing and submitting code after agreement to reduce the cost of communication between both parties as well as the number of rejected pull requests.  Getting the source code To modify or add a function, click the fork button in the upper left corner to copy a SOFAArk trunk code to your code repository, after submitting an issue.\nPulling a branch Perform all the SOFAArk modifications on the branch, and submit a pull request after the modifications, which will be merged to the trunk by the project maintenance personnel after Code Review.\nTherefore, after getting the introduction to source code steps, you need to:\n  Download the code locally. You may select the git/https mode in this step.\ngit clone https://github.com/{your account}/sofa-ark.git   Pull a branch to prepare for code modification.\ngit branch add_xxx_feature   After the preceding command is executed, your code repository will switch to the corresponding branch. To view the current branch, execute the following command:\ngit branch -a If you want to switch back to the trunk, execute the following command:\ngit checkout -b master If you want to switch back to the branch, execute the following command:\ngit checkout -b \u0026amp;#34;branchName\u0026amp;#34; Modify the code and submit it locally. After a branch is pulled, you can modify the code.\nWhen modifying the code, note the following:   Keep the code style consistent. SOFAArk uses the Maven plug-in to keep the code style consistent. Before submitting the code, execute the following commands locally:\nmvn clean compile   Supplement unit test code.\n  New modifications should have passed existing unit tests.\n  You should provide the new unit test to prove that the previous code has bugs and the new code has fixed such bugs. Execute the following command to run all tests:\nmvn clean test   Other do\u0026amp;rsquo;s and don\u0026amp;rsquo;ts  Retain the original style of the code you are editing, especially the spaces and line feeds in the code. Delete useless annotations. Annotate the places where the logic and functionality are …","date":-62135596800,"description":"","dir":"projects/sofa-boot/sofa-ark-contribution/","fuzzywordcount":800,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"dbf77f98884a71c5c7a3fbb4dd189cfe","permalink":"/en/projects/sofa-boot/sofa-ark-contribution/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/en/projects/sofa-boot/sofa-ark-contribution/","summary":"You can visit Development Route first to learn more about development tasks and future planning.\n Preparations Before contributing any code, we need to know how to use the Git tool and the GitHub website.\n Refer to the Git official books for the Git tool usage. The first few chapters will help you get a quick start. Read Git collaboration process through  GitHub Code Contribution Process Submitting an issue Whether you want to fix a bug of SOFAArk or add a new feature of SOFAArk, you have to submit an issue to describe your demand before you submit the code on GitHub address in SOFAArk.","tags":null,"title":"Contribution","type":"projects","url":"/en/projects/sofa-boot/sofa-ark-contribution/","wordcount":792},{"author":null,"categories":null,"content":" You can go into the development route to learn more about development tasks and future planning.\n Preparations Before contributing any code, we need to know how to use the Git tool and the GitHub website.\n For the use of git tools, refer to official books on git and get familiarized by reading the first few chapters. For the git collaboration process, refer to the article named Git Collaboration Process.  GitHub Code Contribution Process Submitting an issue No Matter whether you are fixing a Jarslink bug or adding a Jarslink feature, submit an issue on the Jarslink GitHub address to describe the bug you are going to fix or the feature you intend to add before you submit the code. There are several advantages of doing so:\n There will not be any conflict with other developers or their plans for this project to result in repetitive work. The Jarslink maintenance personnel will discuss the bug or new feature you submitted to determine whether the modification is necessary, or if there is any room for improvement or a better solution. Start developing and submitting code after agreement to reduce the cost of communication between both parties as well as the number of rejected pull requests.  Getting the source code To modify or add a feature, click the fork button in the upper left corner to copy Jarslink trunk code to your code repository, after submitting an issue.\nPulling a branch Perform all the Jarslink modifications on the branch, and submit a pull request after the modifications, which will be merged into the trunk by the project maintenance personnel after the code review.\nTherefore, after getting the introduction to source code steps, you need to:\n  Download the code locally. You may select the git/https mode in this step.\ngit clone https://github.com/your account name/sofa-jarslink.git   Pull a branch to prepare for code modification.\ngit branch add_xxx_feature After the preceding command is executed, your code repository will switch to the corresponding branch. To view the current branch, execute the following command:\ngit branch -a If you want to switch back to the trunk, execute the following command:\ngit checkout -b master If you want to switch back to the branch, execute the following command:\ngit checkout -b \u0026amp;quot;branchName\u0026amp;quot;   Modify the code and submit it locally. After a branch is pulled, you can modify the code.\nWhen modifying the code, note the following:   Keep the code style consistent.\nJarslink uses the Maven plugin to keep the code style consistent. Before submitting the code, be sure to execute the following commands locally\nmvn clean compile   Supplement unit test code.\n  New modifications should have passed existing unit tests.\n  You should provide the new unit test to prove that the previous code has bugs and the new code has fixed such bugs.\nExecute the following command to run all tests:\nmvn clean test You can also use the IDE to help execute a command.\n  Other do\u0026amp;rsquo;s and don\u0026amp;rsquo;ts  Retain the original style …","date":-62135596800,"description":"","dir":"projects/sofa-boot/sofa-jarslink-contribution/","fuzzywordcount":900,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"d4c1185c6a691679f6dc9dba033550ce","permalink":"/en/projects/sofa-boot/sofa-jarslink-contribution/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/en/projects/sofa-boot/sofa-jarslink-contribution/","summary":"You can go into the development route to learn more about development tasks and future planning.\n Preparations Before contributing any code, we need to know how to use the Git tool and the GitHub website.\n For the use of git tools, refer to official books on git and get familiarized by reading the first few chapters. For the git collaboration process, refer to the article named Git Collaboration Process.","tags":null,"title":"Contribution","type":"projects","url":"/en/projects/sofa-boot/sofa-jarslink-contribution/","wordcount":827},{"author":null,"categories":null,"content":" Before you read this document, you are suggested to read the SOFARPC development roadmap to learn about development tasks and future plans.\n Preparations Before you contribute code, you need to learn the basic use of Git tool and GitHub website.\n For how to use the Git tool, see Git official documenation and pay attention to the first few chapters. For Git collaboration process, see Git collaboration process.  GitHub code contribution process Submit an issue No matter to fix SOFARPC bugs or add SOFARPC features, before submitting the codes, you must submit an issue on SOFARPC\u0026amp;rsquo;s GitHub to describe the bugs to be fixed and the functions you want to add.\nThere are several benefits of doing this:\n Avoid the conflict with other developers or their plans for this project, thus eliminating repetitive work. SOFARPC operations staff discuss your bugs or new features to determine if the changes are necessary and whether there is space for improvement or a better approach. Reduce communication cost between you and the SOFARPC operations staff, thus reducing the cases that pull request is rejected.  Get source codes To modify or add features, after you submit the issue, you can click Fork in the upper left corner to copy the SOFARPC trunk code to your code repository.\nPull branches All SOFARPC modifications are made on the branch. After modification, submit the pull request. After the code review, the project operations staff merge the branches to the trunk.\nTherefore, you must complete the following steps after getting the source codes:\n  Download the codes locally through Git or HTTPs.``` git clone https://github.com/your account name/sofa-rpc.git\n   Pull branches for code modifications.``` git branch add_xxx_feature ```    After executing the above command, your code repository switches to the corresponding branch. Execute the following command to see your current branch:``` git branch -a ```  If you want to switch back to the trunk, execute the following command:git checkout -b master\nIf you want to switch back to the branch, execute the following command:git checkout -b \u0026amp;quot;branchName\u0026amp;quot;\nModify and submit codes locally Once the branch is pulled, you can modify the code.\nAttentions for modifying codes   Keep a consistent code style.SOFARPC keeps the code format consistent through the Maven plugin. You must execute the following command locally before committing the code:\nmvn clean compile   Supplemental unit test code.\n  New modifications should have passed the existing unit tests.\n  Provide new unit tests to prove that the previous code has bugs, and the new code has fixed these bugs.You can run all tests with the following command:\nmvn clean test You can also use IDE to assist the test running.\n  Other attentions  Keep the original code style, especially the spacing and alignment. Delete the useless comments directly. Add comments for the logics and functions that cannot be easily understood. Update documentation timely.  After …","date":-62135596800,"description":"","dir":"projects/sofa-rpc/contributing/","fuzzywordcount":800,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"448a7b9a949bd2d9e2e71ac6c237f9df","permalink":"/en/projects/sofa-rpc/contributing/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/en/projects/sofa-rpc/contributing/","summary":"Before you read this document, you are suggested to read the SOFARPC development roadmap to learn about development tasks and future plans.\n Preparations Before you contribute code, you need to learn the basic use of Git tool and GitHub website.\n For how to use the Git tool, see Git official documenation and pay attention to the first few chapters. For Git collaboration process, see Git collaboration process.  GitHub code contribution process Submit an issue No matter to fix SOFARPC bugs or add SOFARPC features, before submitting the codes, you must submit an issue on SOFARPC\u0026rsquo;s GitHub to describe the bugs to be fixed and the functions you want to add.","tags":null,"title":"Contribution","type":"projects","url":"/en/projects/sofa-rpc/contributing/","wordcount":748},{"author":null,"categories":null,"content":"SOFARPC uses some third-party open-source components which include but not limited to:\n  Major dependencies\n Netty under Apache License 2.0 SLF4j under MIT License SOFA Bolt under Apache License 2.0 Javassist under Apache License 2.0 Resteasy under Apache License 2.0 SOFA Hessian under Apache License 2.0    Extended dependencies\n protobuf under New BSD License Snappy under New BSD License dubbo under Apache License 2.0    ","date":-62135596800,"description":"","dir":"projects/sofa-rpc/notice/","fuzzywordcount":100,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"b6c87388d5c1462f13d92012639a08b2","permalink":"/en/projects/sofa-rpc/notice/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/en/projects/sofa-rpc/notice/","summary":"SOFARPC uses some third-party open-source components which include but not limited to:\n  Major dependencies\n Netty under Apache License 2.0 SLF4j under MIT License SOFA Bolt under Apache License 2.0 Javassist under Apache License 2.0 Resteasy under Apache License 2.0 SOFA Hessian under Apache License 2.0    Extended dependencies\n protobuf under New BSD License Snappy under New BSD License dubbo under Apache License 2.0    ","tags":null,"title":"Copyright","type":"projects","url":"/en/projects/sofa-rpc/notice/","wordcount":62},{"author":null,"categories":null,"content":"Copyright statement of dependent components SOFADashboard uses some third-party open-source components, including but not limited to:\n Spring under Apache 2.0 license Spring Boot under Apache 2.0 license SLF4j under the MIT License SOFABolt under Apache License 2.0 SOFABolt under Apache License 2.0 Curator under Apache License 2.0  ","date":-62135596800,"description":"","dir":"projects/sofa-dashboard/notice/","fuzzywordcount":100,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"a9ebe38d245302f94ab7bfa793329926","permalink":"/en/projects/sofa-dashboard/notice/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/en/projects/sofa-dashboard/notice/","summary":"Copyright statement of dependent components SOFADashboard uses some third-party open-source components, including but not limited to:\n Spring under Apache 2.0 license Spring Boot under Apache 2.0 license SLF4j under the MIT License SOFABolt under Apache License 2.0 SOFABolt under Apache License 2.0 Curator under Apache License 2.0  ","tags":null,"title":"Copyright statement","type":"projects","url":"/en/projects/sofa-dashboard/notice/","wordcount":47},{"author":null,"categories":null,"content":"Copyright statement of dependent components SOFARegistry uses some third-party open-source components, including but not limited to:\n Spring under Apache 2.0 license Spring Boot under Apache 2.0 license Netty under Apache License 2.0 SLF4j under the MIT License jersey under CDDL Version 1.1 SOFAJRaft under Apache License 2.0 SOFABolt under Apache License 2.0 SOFAHessian under Apache License 2.0  If you find anything we have missed, please let us know.\n","date":-62135596800,"description":"","dir":"projects/sofa-registry/notice/","fuzzywordcount":100,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"c40263ffd56a2f1292756c9fafea55e2","permalink":"/en/projects/sofa-registry/notice/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/en/projects/sofa-registry/notice/","summary":"Copyright statement of dependent components SOFARegistry uses some third-party open-source components, including but not limited to:\n Spring under Apache 2.0 license Spring Boot under Apache 2.0 license Netty under Apache License 2.0 SLF4j under the MIT License jersey under CDDL Version 1.1 SOFAJRaft under Apache License 2.0 SOFABolt under Apache License 2.0 SOFAHessian under Apache License 2.0  If you find anything we have missed, please let us know.","tags":null,"title":"Copyright statement","type":"projects","url":"/en/projects/sofa-registry/notice/","wordcount":68},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-jraft/counter-example/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"f9c54b9f7883ccb1d7c259b7101f4674","permalink":"/projects/sofa-jraft/counter-example/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-jraft/counter-example/","summary":"","tags":null,"title":"Counter 例子详解","type":"projects","url":"/projects/sofa-jraft/counter-example/","wordcount":0},{"author":null,"categories":null,"content":" Project address\n Introduction Jarslink 2.0 is available for both Spring Boot and SOFABoot; we just need to add the specified dependencies. To be convenient, it is recommended to use Jarslink 2.0 in the form of SOFABoot projects. This sample project is intended to demonstrate how to quickly reform a Spring Boot project into a SOFABoot project.\nReform After creating a Spring Boot project in the official Spring Boot website, we only need to introduce the SOFABoot dependencies. First, modify the configuration file pom.xml of the Maven project.\n\u0026amp;lt;parent\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;org.springframework.boot\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;spring-boot-starter-parent\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;version\u0026amp;gt;${spring.boot.version}\u0026amp;lt;/version\u0026amp;gt; \u0026amp;lt;relativePath/\u0026amp;gt; \u0026amp;lt;/parent\u0026amp;gt; Replace as\n\u0026amp;lt;parent\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;com.alipay.sofa\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;sofaboot-dependencies\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;version\u0026amp;gt;2.5.0-SNAPSHOT\u0026amp;lt;/version\u0026amp;gt; \u0026amp;lt;/parent\u0026amp;gt; Note: Currently Jarslink 2.0.0 is still at its snapshot version, and the SOFABoot 2.5.0 that it depends on will be released in the near future, so for the moment, the SOFABoot 2.5.0-SNAPSHOT version has to be introduced as the dependency. The pull of the SNAPSHOT package requires special configuration, for which you can refer to FAQ: How do I configure for pulling a SNAPSHOT dependency package?\nThen, add a Spring Boot or SOFABoot official Starter, such as:\n\u0026amp;lt;dependencies\u0026amp;gt; \u0026amp;lt;!-- Jarslink2.0 --\u0026amp;gt; \u0026amp;lt;dependency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;com.alipay.sofa\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;sofa-jarslink-ark-starter\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;classifier\u0026amp;gt;ark-plugin\u0026amp;lt;/classifier\u0026amp;gt; \u0026amp;lt;version\u0026amp;gt;2.0.0-SNAPSHOT\u0026amp;lt;/version\u0026amp;gt; \u0026amp;lt;/dependency\u0026amp;gt; \u0026amp;lt;!-- Web --\u0026amp;gt; \u0026amp;lt;dependency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;org.springframework.boot\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;spring-boot-starter-web\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;/dependency\u0026amp;gt; \u0026amp;lt;/dependencies\u0026amp;gt; To package the application into an Ark package or Biz package, we need to configure the sofa-Ark-maven-plugin packaging plugin in the main pom.xml file, and delete the native packaging plugin the Spring Boot configuration.\n\u0026amp;lt;build\u0026amp;gt; \u0026amp;lt;plugins\u0026amp;gt; \u0026amp;lt;plugin\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;com.alipay.sofa\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;sofa-ark-maven-plugin\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;executions\u0026amp;gt; \u0026amp;lt;execution\u0026amp;gt; \u0026amp;lt;!--goal executed to generate executable-ark-jar --\u0026amp;gt; \u0026amp;lt;goals\u0026amp;gt; \u0026amp;lt;goal\u0026amp;gt;repackage\u0026amp;lt;/goal\u0026amp;gt; \u0026amp;lt;/goals\u0026amp;gt; \u0026amp;lt;configuration\u0026amp;gt; \u0026amp;lt;!--specify destination where executable-ark-jar will be saved, default saved to ${project.build.directory}--\u0026amp;gt; \u0026amp;lt;outputDirectory\u0026amp;gt;./target\u0026amp;lt;/outputDirectory\u0026amp;gt; \u0026amp;lt;!--default none--\u0026amp;gt; \u0026amp;lt;arkClassifier\u0026amp;gt;executable-ark\u0026amp;lt;/arkClassifier\u0026amp;gt; \u0026amp;lt;/configuration\u0026amp;gt; \u0026amp;lt;/execution\u0026amp;gt; \u0026amp;lt;/executions\u0026amp;gt; \u0026amp;lt;/plugin\u0026amp;gt; \u0026amp;lt;/plugins\u0026amp;gt; \u0026amp;lt;/build\u0026amp;gt; Finally, add a parameter that SOFABoot must use under the application.properties file for the project, including spring.application.name (used to mark the name …","date":-62135596800,"description":"","dir":"projects/sofa-boot/sofa-jarslink-jarslink-app-demo/","fuzzywordcount":500,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"46cb9153d039f01a375a569c2a9a5535","permalink":"/en/projects/sofa-boot/sofa-jarslink-jarslink-app-demo/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/en/projects/sofa-boot/sofa-jarslink-jarslink-app-demo/","summary":"Project address\n Introduction Jarslink 2.0 is available for both Spring Boot and SOFABoot; we just need to add the specified dependencies. To be convenient, it is recommended to use Jarslink 2.0 in the form of SOFABoot projects. This sample project is intended to demonstrate how to quickly reform a Spring Boot project into a SOFABoot project.\nReform After creating a Spring Boot project in the official Spring Boot website, we only need to introduce the SOFABoot dependencies.","tags":null,"title":"Create a SOFABoot application","type":"projects","url":"/en/projects/sofa-boot/sofa-jarslink-jarslink-app-demo/","wordcount":417},{"author":null,"categories":null,"content":"SOFARPC provides a good extensibility mechanism, which provide SPI capabilities for each module. SOFARPC uses multiple filters to intercept requests and responses. These filters can be customized and extended by users. The execution order of custom filters is after the built-in filters. The procedure is as follows:\nBolt filter 1 Create a new custom filter.\npublic class CustomFilter extends Filter { @Override public boolean needToLoad(FilterInvoker invoker) { return true; } @Override public SofaResponse invoke(FilterInvoker invoker, SofaRequest request) throws SofaRpcException { SofaResponse response = invoker.invoke(request); return response; } } 2 The custom filter will be added into the interceptor chain. There are three specific ways to do this step.\n Method 1: In API. In this way, the custom filter can take effect in the specified provider or consumer.  // Service provider providerConfig.setFilterRef(Arrays.asList(new CustomFilter())); // Service caller consumerConfig.setFilterRef(Arrays.asList(new CustomFilter()));  Method 2: Add @Extension annotation + configuration extension file to the class.  @Extension(\u0026amp;#34;customer\u0026amp;#34;) public class CustomFilter extends Filter { @Override public boolean needToLoad(FilterInvoker invoker) { return true; } @Override public SofaResponse invoke(FilterInvoker invoker, SofaRequest request) throws SofaRpcException { SofaResponse response = invoker.invoke(request); return response; } } Create a new extension file META-INF/services/sofa-rpc/com.alipay.sofa.rpc.filter.Filter with the following content:\ncustomer=com.alipay.sofa.rpc.custom.CustomFilter Code injection.\n// Service provider providerConfig.setFilter(Arrays.asList(\u0026amp;#34;customer\u0026amp;#34;)); // Service caller consumerConfig.setFilter(Arrays.asList(\u0026amp;#34;customer\u0026amp;#34;));  Method 3: Add @Extension annotation + @AutoActive annotation + configuration extension file to the class. In this way, the code injection step in method 2 is replaced with the @AutoActive annotation. The custom filter can take effect in all providers or consumers. The providerSide parameter indicates whether it takes effect on the server, and the consumerSide parameter indicates whether it takes effect on the client.  @Extension(\u0026amp;#34;customer\u0026amp;#34;) @AutoActive(providerSide = true, consumerSide = true) public class customerFilter extends Filter { // ... } ","date":-62135596800,"description":"","dir":"projects/sofa-rpc/custom-filter/","fuzzywordcount":300,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"30ff5937b52a7c2dd8028e878979a33d","permalink":"/en/projects/sofa-rpc/custom-filter/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/en/projects/sofa-rpc/custom-filter/","summary":"SOFARPC provides a good extensibility mechanism, which provide SPI capabilities for each module. SOFARPC uses multiple filters to intercept requests and responses. These filters can be customized and extended by users. The execution order of custom filters is after the built-in filters. The procedure is as follows:\nBolt filter 1 Create a new custom filter.\npublic class CustomFilter extends Filter { @Override public boolean needToLoad(FilterInvoker invoker) { return true; } @Override public SofaResponse invoke(FilterInvoker invoker, SofaRequest request) throws SofaRpcException { SofaResponse response = invoker.","tags":null,"title":"Custom filter","type":"projects","url":"/en/projects/sofa-rpc/custom-filter/","wordcount":285},{"author":null,"categories":null,"content":"The route service address in SOFARPC is abstracted into a processing chain, and is processed by each router. Like filter, SOFARPC provides the same extensibility for router.\n@Extension(value = \u0026amp;#34;customerRouter\u0026amp;#34;) @AutoActive(consumerSide = true) public class CustomerRouter extends Router { @Override public void init(ConsumerBootstrap consumerBootstrap) { } @Override public boolean needToLoad(ConsumerBootstrap consumerBootstrap) { return true; } @Override public List\u0026amp;lt;ProviderInfo\u0026amp;gt; route(SofaRequest request, List\u0026amp;lt;ProviderInfo\u0026amp;gt; providerInfos) { return providerInfos; } Create a extension file META-INF/services/sofa-rpc/com.alipay.sofa.rpc.client.Router with the following content:\ncustomerRouter=com.alipay.sofa.rpc.custom.CustomRouter This file customized a CustomerRouter, which takes effect in all consumers. The parameter ConsumerBootstrap in init method is a wrapper class of the referenced service, and can get objects such as ConsumerConfig, proxy class, and service address pool. needToLoad indicates whether the Router is valid, and the route method is the method for filtering addresses.\n","date":-62135596800,"description":"","dir":"projects/sofa-rpc/custom-router/","fuzzywordcount":200,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"236e8d4bda3e856267a3575853aa900c","permalink":"/en/projects/sofa-rpc/custom-router/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/en/projects/sofa-rpc/custom-router/","summary":"The route service address in SOFARPC is abstracted into a processing chain, and is processed by each router. Like filter, SOFARPC provides the same extensibility for router.\n@Extension(value = \u0026#34;customerRouter\u0026#34;) @AutoActive(consumerSide = true) public class CustomerRouter extends Router { @Override public void init(ConsumerBootstrap consumerBootstrap) { } @Override public boolean needToLoad(ConsumerBootstrap consumerBootstrap) { return true; } @Override public List\u0026lt;ProviderInfo\u0026gt; route(SofaRequest request, List\u0026lt;ProviderInfo\u0026gt; providerInfos) { return providerInfos; } Create a extension file META-INF/services/sofa-rpc/com.","tags":null,"title":"Custom router","type":"projects","url":"/en/projects/sofa-rpc/custom-router/","wordcount":131},{"author":null,"categories":null,"content":"SOFARPC supports custom business thread pools. A separate business thread pool can be set up for the specified service, isolated from SOFARPC\u0026amp;rsquo;s global business thread pool. Multiple services can share a single thread pool.\nSOFARPC requires that the type of custom thread pool must be com.alipay.sofa.rpc.server.UserThreadPool.\nUse XML If you publish the service using XML, you can first set the bean of the thread pool whose class is com.alipay.sofa.rpc.server.UserThreadPool, and then set the bean in the thread-pool-ref attribute of \u0026amp;lt;sofa:global-attrs\u0026amp;gt; tag.\n\u0026amp;lt;bean id=\u0026amp;#34;helloService\u0026amp;#34; class=\u0026amp;#34;com.alipay.sofa.rpc.quickstart.HelloService\u0026amp;#34;/\u0026amp;gt; \u0026amp;lt;!-- Customize a thread pool --\u0026amp;gt; \u0026amp;lt;bean id=\u0026amp;#34;customExecutor\u0026amp;#34; class=\u0026amp;#34;com.alipay.sofa.rpc.server.UserThreadPool\u0026amp;#34; init-method=\u0026amp;#34;init\u0026amp;#34;\u0026amp;gt; \u0026amp;lt;property name=\u0026amp;#34;corePoolSize\u0026amp;#34; value=\u0026amp;#34;10\u0026amp;#34; /\u0026amp;gt; \u0026amp;lt;property name=\u0026amp;#34;maximumPoolSize\u0026amp;#34; value=\u0026amp;#34;10\u0026amp;#34; /\u0026amp;gt; \u0026amp;lt;property name=\u0026amp;#34;queueSize\u0026amp;#34; value=\u0026amp;#34;0\u0026amp;#34; /\u0026amp;gt; \u0026amp;lt;/bean\u0026amp;gt; \u0026amp;lt;sofa:service ref=\u0026amp;#34;helloService\u0026amp;#34; interface=\u0026amp;#34;XXXService\u0026amp;#34;\u0026amp;gt; \u0026amp;lt;sofa:binding.bolt\u0026amp;gt; \u0026amp;lt;!-- Set the thread pool to a Service --\u0026amp;gt; \u0026amp;lt;sofa:global-attrs thread-pool-ref=\u0026amp;#34;customExecutor\u0026amp;#34;/\u0026amp;gt; \u0026amp;lt;/sofa:binding.bolt\u0026amp;gt; \u0026amp;lt;/sofa:service\u0026amp;gt; Use Annotation If you publish the service using Annotation, you can set the bean of the custom thread pool by setting the userThreadPool attribute of @SofaServiceBinding:\n@SofaService(bindings = {@SofaServiceBinding(bindingType = \u0026amp;#34;bolt\u0026amp;#34;, userThreadPool = \u0026amp;#34;customThreadPool\u0026amp;#34;)}) public class SampleServiceImpl implements SampleService { } Use API in Spring environment If you publish a service using the API in Spring environment, you can configure a custom thread pool by calling the setUserThreadPool method of BoltBindingParam:\nBoltBindingParam boltBindingParam = new BoltBindingParam(); boltBindingParam.setUserThreadPool(new UserThreadPool()); Use API in non-Spring environment If you publish service using the API in non-Spring environment, you can set a custom thread pool as follows:\nUserThreadPool threadPool = new UserThreadPool(); threadPool.setCorePoolSize(10); threadPool.setMaximumPoolSize(100); threadPool.setKeepAliveTime(200); threadPool.setPrestartAllCoreThreads(false); threadPool.setAllowCoreThreadTimeOut(false); threadPool.setQueueSize(200); UserThreadPoolManager.registerUserThread(ConfigUniqueNameGenerator.getUniqueName(providerConfig), threadPool); As above, a custom thread pool is set up for the HelloService service.\n","date":-62135596800,"description":"","dir":"projects/sofa-rpc/custom-thread-pool/","fuzzywordcount":300,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"4d582a7894b2381248522f3a1fc400c9","permalink":"/en/projects/sofa-rpc/custom-thread-pool/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/en/projects/sofa-rpc/custom-thread-pool/","summary":"SOFARPC supports custom business thread pools. A separate business thread pool can be set up for the specified service, isolated from SOFARPC\u0026rsquo;s global business thread pool. Multiple services can share a single thread pool.\nSOFARPC requires that the type of custom thread pool must be com.alipay.sofa.rpc.server.UserThreadPool.\nUse XML If you publish the service using XML, you can first set the bean of the thread pool whose class is com.alipay.sofa.rpc.server.UserThreadPool, and then set the bean in the thread-pool-ref attribute of \u0026lt;sofa:global-attrs\u0026gt; tag.","tags":null,"title":"Custom thread pool","type":"projects","url":"/en/projects/sofa-rpc/custom-thread-pool/","wordcount":252},{"author":null,"categories":null,"content":"You can view basic information of your application on SOFADashboard, including the IP address, ports, and health check status. This feature is dependent on the SOFADashboard client. If you want to display the information about an application on the SOFADashboard control page, import the sofa-dashboard-client dependency.\n\u0026amp;lt;denpendency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;com.alipay.sofa\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;sofa-dashboard-client\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;/denpendency\u0026amp;gt; Function display ","date":-62135596800,"description":"","dir":"projects/sofa-dashboard/dashboard-client/","fuzzywordcount":100,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"60586c6dfee1f2afcdac88cbe7a36b83","permalink":"/en/projects/sofa-dashboard/dashboard-client/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/en/projects/sofa-dashboard/dashboard-client/","summary":"You can view basic information of your application on SOFADashboard, including the IP address, ports, and health check status. This feature is dependent on the SOFADashboard client. If you want to display the information about an application on the SOFADashboard control page, import the sofa-dashboard-client dependency.\n\u0026lt;denpendency\u0026gt; \u0026lt;groupId\u0026gt;com.alipay.sofa\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;sofa-dashboard-client\u0026lt;/artifactId\u0026gt; \u0026lt;/denpendency\u0026gt; Function display ","tags":null,"title":"Dashboard client","type":"projects","url":"/en/projects/sofa-dashboard/dashboard-client/","wordcount":52},{"author":null,"categories":null,"content":"In this document will demonstrate how to use SOFATracer to track of Datasource.\nAssuming you have built a simple Spring Web project based on SOFABoot, Then you can be operated by the following steps:\nIntroduce SOFATracer Introduce SOFATracer dependency in the new Spring Boot project:\n\u0026amp;lt;dependency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;com.alipay.sofa\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;tracer-sofa-boot-starter\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;version\u0026amp;gt;2.2.0\u0026amp;lt;/version\u0026amp;gt; \u0026amp;lt;/dependency\u0026amp;gt; Introduce h2database dependencies For convenience, we use the h2database memory database for test. So, we need to introduce the following dependencies:\n\u0026amp;lt;dependency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;com.h2database\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;h2\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;scope\u0026amp;gt;runtime\u0026amp;lt;/scope\u0026amp;gt; \u0026amp;lt;/dependency\u0026amp;gt; \u0026amp;lt;dependency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;mysql\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;mysql-connector-java\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;/dependency\u0026amp;gt; Introduce the required connection pool dependencies Introduce the required connection pool dependency packages, such as druid, c3p0, tomcat, dbcp, Hikari, and so on.\n\u0026amp;lt;dependency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;com.alibaba\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;druid\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;version\u0026amp;gt;1.0.12\u0026amp;lt;/version\u0026amp;gt; \u0026amp;lt;/dependency\u0026amp;gt; \u0026amp;lt;dependency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;c3p0\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;c3p0\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;version\u0026amp;gt;0.9.1.1\u0026amp;lt;/version\u0026amp;gt; \u0026amp;lt;/dependency\u0026amp;gt; \u0026amp;lt;dependency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;org.apache.tomcat\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;tomcat-jdbc\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;version\u0026amp;gt;8.5.31\u0026amp;lt;/version\u0026amp;gt; \u0026amp;lt;/dependency\u0026amp;gt; \u0026amp;lt;dependency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;commons-dbcp\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;commons-dbcp\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;version\u0026amp;gt;1.4\u0026amp;lt;/version\u0026amp;gt; \u0026amp;lt;/dependency\u0026amp;gt; \u0026amp;lt;dependency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;com.zaxxer\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;HikariCP-java6\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;version\u0026amp;gt;2.3.8\u0026amp;lt;/version\u0026amp;gt; \u0026amp;lt;/dependency\u0026amp;gt; Configure data source Taking HikariCP as the example, we create a new Spring configuration file named datasource.xml, which defines the followings:\n\u0026amp;lt;?xml version=\u0026amp;#34;1.0\u0026amp;#34; encoding=\u0026amp;#34;UTF-8\u0026amp;#34;?\u0026amp;gt; \u0026amp;lt;beans xmlns=\u0026amp;#34;http://www.springframework.org/schema/beans\u0026amp;#34; xmlns:xsi=\u0026amp;#34;http://www.w3.org/2001/XMLSchema-instance\u0026amp;#34; xsi:schemaLocation=\u0026amp;#34;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\u0026amp;#34;\u0026amp;gt; \u0026amp;lt;!-- dataSource pool --\u0026amp;gt; \u0026amp;lt;bean id=\u0026amp;#34;simpleDataSource\u0026amp;#34; class=\u0026amp;#34;com.zaxxer.hikari.HikariDataSource\u0026amp;#34; destroy-method=\u0026amp;#34;close\u0026amp;#34; primary=\u0026amp;#34;true\u0026amp;#34;\u0026amp;gt; \u0026amp;lt;property name=\u0026amp;#34;driverClassName\u0026amp;#34; value=\u0026amp;#34;org.h2.Driver\u0026amp;#34;/\u0026amp;gt; \u0026amp;lt;property name=\u0026amp;#34;jdbcUrl\u0026amp;#34; value=\u0026amp;#34;jdbc:h2:~/test\u0026amp;#34;/\u0026amp;gt; \u0026amp;lt;property name=\u0026amp;#34;username\u0026amp;#34; value=\u0026amp;#34;sofa\u0026amp;#34;/\u0026amp;gt; \u0026amp;lt;property name=\u0026amp;#34;password\u0026amp;#34; value=\u0026amp;#34;123456\u0026amp;#34;/\u0026amp;gt; \u0026amp;lt;/bean\u0026amp;gt; \u0026amp;lt;/beans\u0026amp;gt; Application configuration  Required configuration  It should be noted that it is required to configure the application …","date":-62135596800,"description":"","dir":"projects/sofa-tracer/usage-of-datasource/","fuzzywordcount":700,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"d9d8f6756a294104647067eaa7827f61","permalink":"/en/projects/sofa-tracer/usage-of-datasource/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/en/projects/sofa-tracer/usage-of-datasource/","summary":"In this document will demonstrate how to use SOFATracer to track of Datasource.\nAssuming you have built a simple Spring Web project based on SOFABoot, Then you can be operated by the following steps:\nIntroduce SOFATracer Introduce SOFATracer dependency in the new Spring Boot project:\n\u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.alipay.sofa\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;tracer-sofa-boot-starter\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.2.0\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; Introduce h2database dependencies For convenience, we use the h2database memory database for test. So, we need to introduce the following dependencies:","tags":null,"title":"DataSource Integration","type":"projects","url":"/en/projects/sofa-tracer/usage-of-datasource/","wordcount":641},{"author":null,"categories":null,"content":"Datasource Log Format SOFATracer tracks the standard JDBC data source and outputs the chain data of SQL statement execution, in the default JSON format.\nDataSource digest log (datasource-client-digest.log) The data is output in JSON format. Each key meaning is as follows:\n   Key Meaning     Time log printing time   Local.app Current application name   traceId TraceId   spanId SpanId   Database.name Database name   Sql SQL execution statement   Result.code SQL execution status code   Total.time SQL statement execution total time   Connection.establish.span SQL execution connection establishment time   Db.execute.cost SQL execution time   Database.type Database type   Database.endpoint Database url   Current.thread.name Current thread name   Baggage Transparently transmitted baggage data    Example:\n{\u0026amp;#34;time\u0026amp;#34;:\u0026amp;#34;2018-09-28 01:11:56.715\u0026amp;#34;,\u0026amp;#34;local.app\u0026amp;#34;:\u0026amp;#34;SOFATracerDataSource\u0026amp;#34;,\u0026amp;#34;traceId\u0026amp;#34;:\u0026amp;#34;1e1bcab91538068316462100111113\u0026amp;#34;,\u0026amp;#34;spanId\u0026amp;#34;:\u0026amp;#34;0.1.2\u0026amp;#34;,\u0026amp;#34;database.name\u0026amp;#34;:\u0026amp;#34;test\u0026amp;#34;,\u0026amp;#34;sql\u0026amp;#34;:\u0026amp;#34;CREATE TABLE TEST(ID INT PRIMARY KEY%2C NAME VARCHAR(255));\u0026amp;#34;,\u0026amp;#34;result.code\u0026amp;#34;:\u0026amp;#34;success\u0026amp;#34;,\u0026amp;#34;total.time\u0026amp;#34;:\u0026amp;#34;228ms\u0026amp;#34;,\u0026amp;#34;connection.establish.span\u0026amp;#34;:\u0026amp;#34;220ms\u0026amp;#34;,\u0026amp;#34;db.execute.cost\u0026amp;#34;:\u0026amp;#34;3ms\u0026amp;#34;,\u0026amp;#34;database.type\u0026amp;#34;:\u0026amp;#34;h2\u0026amp;#34;,\u0026amp;#34;database.endpoint\u0026amp;#34;:\u0026amp;#34;jdbc:h2:~/test:-1\u0026amp;#34;,\u0026amp;#34;current.thread.name\u0026amp;#34;:\u0026amp;#34;http-nio-8080-exec-1\u0026amp;#34;,\u0026amp;#34;baggage\u0026amp;#34;:\u0026amp;#34;\u0026amp;#34;} DataSource statistical Log (datasource-client-stat.log) stat.key is the set of statistical keywords in this period, which uniquely determines a set of statistical data, including local.app, database.name, and SQL field.\nExample:\n{\u0026amp;#34;time\u0026amp;#34;:\u0026amp;#34;2018-09-28 01:12:43.647\u0026amp;#34;,\u0026amp;#34;stat.key\u0026amp;#34;:{\u0026amp;#34;local.app\u0026amp;#34;:\u0026amp;#34;SOFATracerDataSource\u0026amp;#34;,\u0026amp;#34;database.name\u0026amp;#34;:\u0026amp;#34;test\u0026amp;#34;, \u0026amp;#34;sql\u0026amp;#34;:\u0026amp;#34;CREATE TABLE TEST(ID INT PRIMARY KEY%2C NAME VARCHAR(255));\u0026amp;#34;},\u0026amp;#34;count\u0026amp;#34;:1,\u0026amp;#34;total.cost.milliseconds\u0026amp;#34;:228,\u0026amp;#34;success\u0026amp;#34;:\u0026amp;#34;true\u0026amp;#34;,\u0026amp;#34;load.test\u0026amp;#34;:\u0026amp;#34;F\u0026amp;#34;} ","date":-62135596800,"description":"","dir":"projects/sofa-tracer/log-format-datasource/","fuzzywordcount":200,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"647de768aff8ececc8276d247c5afee1","permalink":"/en/projects/sofa-tracer/log-format-datasource/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/en/projects/sofa-tracer/log-format-datasource/","summary":"Datasource Log Format SOFATracer tracks the standard JDBC data source and outputs the chain data of SQL statement execution, in the default JSON format.\nDataSource digest log (datasource-client-digest.log) The data is output in JSON format. Each key meaning is as follows:\n   Key Meaning     Time log printing time   Local.app Current application name   traceId TraceId   spanId SpanId   Database.","tags":null,"title":"DataSource log","type":"projects","url":"/en/projects/sofa-tracer/log-format-datasource/","wordcount":147},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-tracer/usage-of-datasource/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"d9d8f6756a294104647067eaa7827f61","permalink":"/projects/sofa-tracer/usage-of-datasource/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-tracer/usage-of-datasource/","summary":"","tags":null,"title":"DataSource 埋点接入","type":"projects","url":"/projects/sofa-tracer/usage-of-datasource/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-tracer/log-format-datasource/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"647de768aff8ececc8276d247c5afee1","permalink":"/projects/sofa-tracer/log-format-datasource/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-tracer/log-format-datasource/","summary":"","tags":null,"title":"DataSource 日志","type":"projects","url":"/projects/sofa-tracer/log-format-datasource/","wordcount":0},{"author":null,"categories":null,"content":"﻿SOFABoot is based on Spring Boot. It means SOFABoot manages SOFA middleware dependencies and provides the Starter for Spring Boot, facilitating the use of SOFA middleware in Spring Boot.\nSOFABoot dependency management You must load SOFABoot\u0026amp;rsquo;s management dependencies before using SOFA middleware. In a way similar to use Spring Boot, add the configuration tag \u0026amp;lt;parent/\u0026amp;gt; in the project settings:\n\u0026amp;lt;parent\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;com.alipay.sofa\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;sofaboot-dependencies\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;version\u0026amp;gt;${sofa.boot.version}\u0026amp;lt;/version\u0026amp;gt; \u0026amp;lt;/parent\u0026amp;gt; Where ${sofa.boot.version} represents the SOFABoot version (refer to release history).\nUse Middleware of SOFAStack For SOFABoot, use -sofa-boot-starter suffixes to name middleware components. If you want to use middleware, simply add its dependencies; To use SOFARPC, for example, simply add the following Maven dependencies:\n\u0026amp;lt;dependency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;com.alipay.sofa\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;rpc-sofa-boot-starter\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;/dependency\u0026amp;gt; Note that there is no version declaration in the above Maven dependencies as the version has already been declared in sofabook-dependencies. This allows for unified upgrade of all SOFA middleware versions, allaying concerns over dependency conflicts or incompatibility brought by upgrade of a single middleware version. The SOFABoot middleware under control is listed as follows:\n   Middleware starter     SOFARPC rpc-sofa-boot-starter   SOFATracer tracer-sofa-boot-starter   SOFALookout lookout-sofa-boot-starter    Introducing SOFABoot Extension Based on Spring Boot, SOFABoot provides extended capabilities such as health check, module isolation, and class isolation. In accordance with Spring Boot\u0026amp;rsquo;s the dependency-as-a-service principle, the extension capability will be ready immediately after relevant dependencies are added. Currently, there are several extension modules available:\n   Extension components starter     Health check healthcheck-sofa-boot-starter   Module isolation Isle-Sofa-boot-starter   Class isolation sofa-Ark-springboot-starter   Test extension test-Sofa-boot-starter    Introducing the SOFA middleware: the Ark plug-in SOFABoot provides a class isolation component—SOFAArk, which enables users to package third-party packages with dependency conflicts into an Ark plug-in. At run time, the Ark plug-in is loaded with a separate classloader; it is isolated from other Ark plug-ins and business dependencies to address class conflicts. SOFABoot provides SOFARPC and SOFATracer\u0026amp;rsquo;s Ark plug-ins; the Ark plug-in SOFARPC, for example, is loaded into the application to replace SOFARPC starter, to isolate the application from SOFARPC and its indirect dependencies. The controlled Ark plug-ins are listed as follows:\n   Ark plug-in plugin     SOFARPC rpc-sofa-boot-plugin   SOFATracer tracer-sofa-boot-plugin    Introducing SOFABoot namespace Before using SOFA middleware, we need to add relevant …","date":-62135596800,"description":"","dir":"projects/sofa-boot/dependency-management/","fuzzywordcount":400,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"dabdbd425f20dee4d7ab580d43574456","permalink":"/en/projects/sofa-boot/dependency-management/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/en/projects/sofa-boot/dependency-management/","summary":"﻿SOFABoot is based on Spring Boot. It means SOFABoot manages SOFA middleware dependencies and provides the Starter for Spring Boot, facilitating the use of SOFA middleware in Spring Boot.\nSOFABoot dependency management You must load SOFABoot\u0026rsquo;s management dependencies before using SOFA middleware. In a way similar to use Spring Boot, add the configuration tag \u0026lt;parent/\u0026gt; in the project settings:\n\u0026lt;parent\u0026gt; \u0026lt;groupId\u0026gt;com.alipay.sofa\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;sofaboot-dependencies\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${sofa.boot.version}\u0026lt;/version\u0026gt; \u0026lt;/parent\u0026gt; Where ${sofa.boot.version} represents the SOFABoot version (refer to release history).","tags":null,"title":"Dependency management","type":"projects","url":"/en/projects/sofa-boot/dependency-management/","wordcount":391},{"author":null,"categories":null,"content":"Environment preparation To use SOFARegistry, you need to prepare the basic environment first. SOFARegistry depends on the following environment:\n Linux, UNIX, Mac, and Windows are supported. JDK8 Compile it with Apache Maven 3.2.5 or later versions.  Two deployment modes  Integrated deployment  Package and integrate the three roles of meta, data, and session into one jvm, which can be deployed on a standalone machine or a cluster. The deployment is simple.   Independent deployment  Deploy the meta, data, and session roles separately. You can deploy each of them on a standalone machine or a cluster. You can deploy different numbers of servers for each role as needed. We recommend that you use this deployment mode in the production environment.    Deployment steps 1. Download source code, and compile and package the code 1.1 Download the source code git clone https://github.com/sofastack/sofa-registry.git cd sofa-registry 1.2 Compile and package the code mvn clean package -DskipTests 2. Deploy SOFARegistry 2.1 Integrated deployment Package and integrate the three roles of meta, data, and session into one jvm, which can be deployed on a standalone machine or a cluster.\n2.1.1 Standalone deployment For more information about the standalone deployment mode of integrated deployment, see Quick start- Server deployment.\n2.1.2 Cluster deployment  Decompress registry-integration.tgz and modify the configuration file.  Cluster deployment: In this mode, you need to build a cluster of two or more servers. We recommend that you use at least three servers. Note: Currently, you cannot deploy more than one SOFARegistry instance on the same server, which means you must have at least three different servers. The method for deploying SOFARegistry on each server is basically the same as that in standalone deployment:\ncp server/distribution/integration/target/registry-integration.tgz \u0026amp;lt;somewhere\u0026amp;gt; cd \u0026amp;lt;somewhere\u0026amp;gt; \u0026amp;amp;\u0026amp;amp; mkdir registry-integration tar -zxvf registry-integration.tgz -C registry-integration The difference is that, when you deploy each server in the cluster deployment mode, you need to modify the conf/application.properties configuration:\n# Enter the IP addresses or hostnames of the three servers in the following fields (the hostname will be resolved to the IP address within SOFARegistry) nodes.metaNode=DefaultDataCenter:\u0026amp;lt;hostname1\u0026amp;gt;,\u0026amp;lt;hostname2\u0026amp;gt;,\u0026amp;lt;hostname3\u0026amp;gt; nodes.localDataCenter=DefaultDataCenter nodes.localRegion=DefaultZone  Start registry-integration  After modifying the configuration file for each server, you can start registry-integration as specified in Server deployment.\n Linux/Unix/Mac: sh bin/startup.sh. Windows: Double click the startup.bat file under the bin directory. Check the running status: For each server, you can access the healthcheck API provided by these three roles, or view logs/registry-startup.log to check the running status.  # View the healthcheck API of the meta role (one leader and two followers): $ …","date":-62135596800,"description":"","dir":"projects/sofa-registry/deployment/","fuzzywordcount":1000,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"7e28583bc38be66af8d704d7fbcd9dd4","permalink":"/en/projects/sofa-registry/deployment/","publishdate":"0001-01-01T00:00:00Z","readingtime":5,"relpermalink":"/en/projects/sofa-registry/deployment/","summary":"Environment preparation To use SOFARegistry, you need to prepare the basic environment first. SOFARegistry depends on the following environment:\n Linux, UNIX, Mac, and Windows are supported. JDK8 Compile it with Apache Maven 3.2.5 or later versions.  Two deployment modes  Integrated deployment  Package and integrate the three roles of meta, data, and session into one jvm, which can be deployed on a standalone machine or a cluster. The deployment is simple.","tags":null,"title":"Deployment","type":"projects","url":"/en/projects/sofa-registry/deployment/","wordcount":951},{"author":null,"categories":null,"content":"1. How to compile  Install JDK7 or later versions, and Maven 3.2.5 or later versions. Directly download the code, and execute the following command in the code directory:\n mvn clean install 2. Version release Version number ACTS uses a three-digit version number in the form of major, minor, and patch, for example, 1.0.1.\nFor more information, see https://semver.org/.\n Major version number: All versions within a major version number must be compatible with each other. They are not necessarily compatible with other major versions. However, it is best to be downward compatible. Minor version number: represents feature enhancement. The larger the version number, more features it has. Patch number: represents the BugFix version. Such versions are only used for bug fixing. The larger the version number, the more stable the application is.  Version maintenance At most two versions can be maintained simultaneously.\nFor example, if the current version of the master branch code is 1.3.0, the BugFix branch of version 1.2.x will be maintained, but bugs in branch 1.1.x will no longer be fixed. Therefore, a version upgrade for 1.1.x is recommended.\nRelease process  The develop branches use SNAPSHOT versions, for example, 1.3.0-SNAPSHOT. Upon formal release, SNAPSHOT is replaced with a formal version number, for example 1.3.0. After the formal release, the next version is pulled, for example, 1.3.1-SNAPSHOT.  3. Testing Unit test Add the unit test case to the model that you have developed. The package name of the test class is identical to that of the tested class.\n","date":-62135596800,"description":"","dir":"projects/sofa-acts/developer-guide/","fuzzywordcount":300,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"fcacc7e89b979f3aec8dc3333a7a3c37","permalink":"/en/projects/sofa-acts/developer-guide/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/en/projects/sofa-acts/developer-guide/","summary":"1. How to compile  Install JDK7 or later versions, and Maven 3.2.5 or later versions. Directly download the code, and execute the following command in the code directory:\n mvn clean install 2. Version release Version number ACTS uses a three-digit version number in the form of major, minor, and patch, for example, 1.0.1.\nFor more information, see https://semver.org/.\n Major version number: All versions within a major version number must be compatible with each other.","tags":null,"title":"Developer guide","type":"projects","url":"/en/projects/sofa-acts/developer-guide/","wordcount":249},{"author":null,"categories":null,"content":"Develope guide of code contribution First refer to the basic Notes for code contribution  Note the test case coverage; Note the code format;  Verify samples  Import the sample Maven project separately; Modify the dependency version in the corresponding Pom file; Verify that samples can work correctly as well.  ","date":-62135596800,"description":"","dir":"projects/sofa-lookout/development-use-guide/","fuzzywordcount":100,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"423a54ec3f5fbfc9c0e150eb853738ae","permalink":"/en/projects/sofa-lookout/development-use-guide/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/en/projects/sofa-lookout/development-use-guide/","summary":"Develope guide of code contribution First refer to the basic Notes for code contribution  Note the test case coverage; Note the code format;  Verify samples  Import the sample Maven project separately; Modify the dependency version in the corresponding Pom file; Verify that samples can work correctly as well.  ","tags":null,"title":"Development guide","type":"projects","url":"/en/projects/sofa-lookout/development-use-guide/","wordcount":48},{"author":null,"categories":null,"content":"SOFARPC supports scenarios where a specified address is called.\nThe use of direct call in Java API is as follows, only set the direct connection address:\nConsumerConfig\u0026amp;lt;HelloService\u0026amp;gt; consumer = new ConsumerConfig\u0026amp;lt;HelloService\u0026amp;gt;() .setInterfaceId(HelloService.class.getName()) .setRegistry(registryConfig) .setDirectUrl(\u0026amp;#34;bolt://127.0.0.1:12201\u0026amp;#34;); The use of direct call in XML is as follows:\n\u0026amp;lt;sofa:reference interface=\u0026amp;#34;com.alipay.sample.HelloService\u0026amp;#34; id=\u0026amp;#34;helloService\u0026amp;#34;\u0026amp;gt; \u0026amp;lt;sofa:binding.bolt\u0026amp;gt; \u0026amp;lt;sofa:route target-url=\u0026amp;#34;127.0.0.1:12200\u0026amp;#34;/\u0026amp;gt; \u0026amp;lt;/sofa:binding.bolt\u0026amp;gt; \u0026amp;lt;/sofa:reference\u0026amp;gt; The use of direct call in Annotation is as follows:\n@SofaReference(binding = @SofaReferenceBinding(bindingType = \u0026amp;#34;bolt\u0026amp;#34;, directUrl = \u0026amp;#34;127.0.0.1:12220\u0026amp;#34;)) private SampleService sampleService; ","date":-62135596800,"description":"","dir":"projects/sofa-rpc/peer-to-peer/","fuzzywordcount":100,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"b1815c322f5dc9528f6429d1d5e38369","permalink":"/en/projects/sofa-rpc/peer-to-peer/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/en/projects/sofa-rpc/peer-to-peer/","summary":"SOFARPC supports scenarios where a specified address is called.\nThe use of direct call in Java API is as follows, only set the direct connection address:\nConsumerConfig\u0026lt;HelloService\u0026gt; consumer = new ConsumerConfig\u0026lt;HelloService\u0026gt;() .setInterfaceId(HelloService.class.getName()) .setRegistry(registryConfig) .setDirectUrl(\u0026#34;bolt://127.0.0.1:12201\u0026#34;); The use of direct call in XML is as follows:\n\u0026lt;sofa:reference interface=\u0026#34;com.alipay.sample.HelloService\u0026#34; id=\u0026#34;helloService\u0026#34;\u0026gt; \u0026lt;sofa:binding.bolt\u0026gt; \u0026lt;sofa:route target-url=\u0026#34;127.0.0.1:12200\u0026#34;/\u0026gt; \u0026lt;/sofa:binding.bolt\u0026gt; \u0026lt;/sofa:reference\u0026gt; The use of direct call in Annotation is as follows:\n@SofaReference(binding = @SofaReferenceBinding(bindingType = \u0026#34;bolt\u0026#34;, directUrl = \u0026#34;127.0.0.1:12220\u0026#34;)) private SampleService sampleService; ","tags":null,"title":"Direct call","type":"projects","url":"/en/projects/sofa-rpc/peer-to-peer/","wordcount":73},{"author":null,"categories":null,"content":"Fault Recover Including Fault-Hystrix and Fault-Tolerance features.\n","date":-62135596800,"description":"","dir":"projects/sofa-rpc/fault/","fuzzywordcount":100,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"e567dc5e291867e92c8dd1c4f953b768","permalink":"/en/projects/sofa-rpc/fault/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/en/projects/sofa-rpc/fault/","summary":"Fault Recover Including Fault-Hystrix and Fault-Tolerance features.","tags":null,"title":"Disaster recovery","type":"projects","url":"/en/projects/sofa-rpc/fault/","wordcount":7},{"author":null,"categories":null,"content":"Distributed consensus algorithm Understand distributed consensus  Multiple participants reach a complete consensus on one thing: one conclusion for one thing. The conclusion cannot be overthrown.  Typical distributed consensus algorithms  Paxos: It is considered as the foundation of distributed consensus algorithms. Other algorithms are its variants. However, the Paxos paper only provides the process of a single proposal, without describing the details of multi-paxos that is required for state machine replication. Paxos implementation involves high engineering complexity, for example, multiple-point writes and log hole tolerance. Zab: It is applied in ZooKeeper and widely used in the industry. However, it is not available as a universal library. Raft: It is known for being easy to understand. There are many renowned Raft implementations in the industry, such as etcd, Braft, and TiKV.  Introduction to Raft Raft is in nature a Paxos-based distributed consensus algorithm that is much easier to understand than Paxos. Unlike Paxos, Raft divides the protocols into independent modules, and uses a streamlined design, making the Raft protocol easier to implement.\nSpecifically, Raft divides consensus protocols into almost completely decoupled modules, such as leader election, membership change, log replication, and snapshot.\nRaft adopts a more streamlined design by preventing reordering commits, simplifying roles (it has only three roles: leader, follower, and candidate), allowing only the leader to write, and using randomized timeout values to design leader election.\nFeature: strong leader  The system can have only one leader at the same time, and only the leader can accept requests sent by clients. The leader is responsible for communication with all followers, sending proposals to all followers, and receiving responses from the majority of followers. The leader also needs to send heartbeats to all followers to maintain its leadership.  To summarize, a strong leader tells its followers: \u0026amp;ldquo;Do not say anything. Do what I said and let me know when you finish!\u0026amp;quot; In addition, a leader must always remain active by sending heartbeats to followers. Otherwise, a follower will take its place.\nReplicated state machine Assume we have an infinitely incrementing sequence (system) a[1, 2, 3…]. If for any integer i, the value of a[i] meets the distributed consensus requirement, the system meets the requirement of a consensus state machine. Basically, all real life systems are subject to continuous operations, and reaching consensus on a single value is definitely not enough. To make sure all replicas of a real life system are consistent, we usually convert the operations into entries of a write-ahead-log(WAL). Then, we make sure all replicas of the system reach a consensus on the WAL entries, so that each replica performs operations of the WAL entries in order. As a result, the replicas are in consistent states.\n A client sent a write (operation) request to the …","date":-62135596800,"description":"","dir":"projects/sofa-jraft/consistency-raft-jraft/","fuzzywordcount":4900,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"a0e98df1bec305cca7db6fc34fc97771","permalink":"/en/projects/sofa-jraft/consistency-raft-jraft/","publishdate":"0001-01-01T00:00:00Z","readingtime":23,"relpermalink":"/en/projects/sofa-jraft/consistency-raft-jraft/","summary":"Distributed consensus algorithm Understand distributed consensus  Multiple participants reach a complete consensus on one thing: one conclusion for one thing. The conclusion cannot be overthrown.  Typical distributed consensus algorithms  Paxos: It is considered as the foundation of distributed consensus algorithms. Other algorithms are its variants. However, the Paxos paper only provides the process of a single proposal, without describing the details of multi-paxos that is required for state machine replication.","tags":null,"title":"Distributed consensus - Raft and JRaft","type":"projects","url":"/en/projects/sofa-jraft/consistency-raft-jraft/","wordcount":4868},{"author":null,"categories":null,"content":"SOFARPC provides support for the Dubbo protocol, making it convenient for you to interface with existing Dubbo service.\n Basic usage  ","date":-62135596800,"description":"","dir":"projects/sofa-rpc/dubbo/","fuzzywordcount":100,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"87d78ed0c2d06fe7e1dbf9cb9d6c1c9d","permalink":"/en/projects/sofa-rpc/dubbo/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/en/projects/sofa-rpc/dubbo/","summary":"SOFARPC provides support for the Dubbo protocol, making it convenient for you to interface with existing Dubbo service.\n Basic usage  ","tags":null,"title":"Dubbo","type":"projects","url":"/en/projects/sofa-rpc/dubbo/","wordcount":20},{"author":null,"categories":null,"content":"Dubbo Integration In this document will demonstrate how to use SOFATracer to track of Dubbo, this example [address] (https://github.com/sofastack-guides/sofa-tracer-guides/tree/master/tracer-sample-with-dubbo).\nPrepare Environment The versions of the framework components used in this case are as follows:\n SOFABoot 3.1.1/SpringBoot 2.1.0.RELEASE SOFATracer 2.4.0/3.0.4 JDK 8  This case includes three submodules:\n tracer-sample-with-dubbo-consumer service provider tracer-sample-with-dubbo-provider service consumer tracer-sample-with-dubbo-facade service interface define  New SOFABoot project as parent project After creating a Spring Boot project, you need to introduce the SOFABoot\u0026amp;rsquo;s dependency. First, you need to unzip the generated zip package of Spring Boot project and modify the Maven project configuration file pom.xml.\n\u0026amp;lt;parent\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;org.springframework.boot\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;spring-boot-starter-parent\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;version\u0026amp;gt;${spring.boot.version}\u0026amp;lt;/version\u0026amp;gt; \u0026amp;lt;relativePath/\u0026amp;gt; \u0026amp;lt;/parent\u0026amp;gt; Replace the above with the followings:\n\u0026amp;lt;parent\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;com.alipay.sofa\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;sofaboot-dependencies\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;version\u0026amp;gt;${sofa.boot.version}\u0026amp;lt;/version\u0026amp;gt; \u0026amp;lt;/parent\u0026amp;gt; The ${sofa.boot.version} specifies the latest version of SOFABoot. For more information about SOFABoot versions, refer to Release notes.\nNew tracer-sample-with-dubbo-facade Module provider a service interface\npublic interface HelloService { String SayHello(String name); } New tracer-sample-with-dubbo-provider Module   provider SOFATracer dependency\n\u0026amp;lt;dependency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;com.alipay.sofa\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;tracer-sofa-boot-starter\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;/dependency\u0026amp;gt;  SOFATracer versions are controlled by SOFABoot versions. If the SOFABoot versions used do not match, you need to manually specify a tracer version that is higher than 2.4.0.\n   application.properties Configuration\n# Spring boot application spring.application.name=dubbo-provider # Base packages to scan Dubbo Component: @org.apache.dubbo.config.annotation.Service dubbo.scan.base-packages=com.alipay.sofa.tracer.examples.dubbo.impl ## Filter dubbo.provider.filter=dubboSofaTracerFilter # Dubbo Protocol dubbo.protocol.name=dubbo ## Dubbo Registry dubbo.registry.address=zookeeper://localhost:2181 logging.path=./logs   Publish the Dubbo service using annotations\n@Service public class HelloServiceImpl implements HelloService { @Override public String SayHello(String name) { return \u0026amp;#34;Hello , \u0026amp;#34;+name; } }   New tracer-sample-with-dubbo-consumer Module   provider SOFATracer dependency\n\u0026amp;lt;dependency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;com.alipay.sofa\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;tracer-sofa-boot-starter\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;/dependency\u0026amp;gt;   application.properties Configuration\nspring.application.name=dubbo-consumer dubbo.registry.address=zookeeper://localhost:2181 …","date":-62135596800,"description":"","dir":"projects/sofa-tracer/usage-of-dubbo/","fuzzywordcount":300,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"03f845606b454a7224333238aeecd9ab","permalink":"/en/projects/sofa-tracer/usage-of-dubbo/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/en/projects/sofa-tracer/usage-of-dubbo/","summary":"Dubbo Integration In this document will demonstrate how to use SOFATracer to track of Dubbo, this example [address] (https://github.com/sofastack-guides/sofa-tracer-guides/tree/master/tracer-sample-with-dubbo).\nPrepare Environment The versions of the framework components used in this case are as follows:\n SOFABoot 3.1.1/SpringBoot 2.1.0.RELEASE SOFATracer 2.4.0/3.0.4 JDK 8  This case includes three submodules:\n tracer-sample-with-dubbo-consumer service provider tracer-sample-with-dubbo-provider service consumer tracer-sample-with-dubbo-facade service interface define  New SOFABoot project as parent project After creating a Spring Boot project, you need to introduce the SOFABoot\u0026rsquo;s dependency.","tags":null,"title":"Dubbo Integration","type":"projects","url":"/en/projects/sofa-tracer/usage-of-dubbo/","wordcount":296},{"author":null,"categories":null,"content":"Dubbo Log Format SOFATracer integrates Dubbo and outputs the requested link log data format. The default is JSON data format.\nDubbo service consumer digest log（dubbo-client-digest.log） The data is output in JSON format. Each key meaning is as follows:\n   key Meaning     time Log printing time   traceId TraceId   spanId SpanId   span.kind span Type   local.app Current application name   protocol protocol   service service interface   method service method   invoke.type invoke type   remote.host remote host   remote.port remote port   local.host local host   client.serialize.time request serialize time   client.deserialize.time response deserialize time   req.size.bytes Request Body Size   resp.size.bytes Response Body Size   result.code result code   current.thread.name Current thread name   time.cost.milliseconds Request time (ms)   baggage Transparently transmitted baggage data    Example:\n{\u0026amp;#34;time\u0026amp;#34;:\u0026amp;#34;2019-04-03 11:36:01.909\u0026amp;#34;,\u0026amp;#34;traceId\u0026amp;#34;:\u0026amp;#34;0a0fe8451554262561656100126684\u0026amp;#34;,\u0026amp;#34;spanId\u0026amp;#34;:\u0026amp;#34;0\u0026amp;#34;,\u0026amp;#34;span.kind\u0026amp;#34;:\u0026amp;#34;client\u0026amp;#34;,\u0026amp;#34;local.app\u0026amp;#34;:\u0026amp;#34;dubbo-consumer\u0026amp;#34;,\u0026amp;#34;protocol\u0026amp;#34;:\u0026amp;#34;dubbo\u0026amp;#34;,\u0026amp;#34;service\u0026amp;#34;:\u0026amp;#34;com.alipay.sofa.tracer.examples.dubbo.facade.HelloService\u0026amp;#34;,\u0026amp;#34;method\u0026amp;#34;:\u0026amp;#34;SayHello\u0026amp;#34;,\u0026amp;#34;invoke.type\u0026amp;#34;:\u0026amp;#34;sync\u0026amp;#34;,\u0026amp;#34;remote.host\u0026amp;#34;:\u0026amp;#34;10.15.232.69\u0026amp;#34;,\u0026amp;#34;remote.port\u0026amp;#34;:\u0026amp;#34;20880\u0026amp;#34;,\u0026amp;#34;local.host\u0026amp;#34;:\u0026amp;#34;10.15.232.69\u0026amp;#34;,\u0026amp;#34;client.serialize.time\u0026amp;#34;:35,\u0026amp;#34;client.deserialize.time\u0026amp;#34;:0,\u0026amp;#34;req.size.bytes\u0026amp;#34;:323,\u0026amp;#34;resp.size.bytes\u0026amp;#34;:323,\u0026amp;#34;result.code\u0026amp;#34;:\u0026amp;#34;00\u0026amp;#34;,\u0026amp;#34;current.thread.name\u0026amp;#34;:\u0026amp;#34;main\u0026amp;#34;,\u0026amp;#34;time.cost.milliseconds\u0026amp;#34;:252,\u0026amp;#34;baggage\u0026amp;#34;:\u0026amp;#34;\u0026amp;#34;} Dubbo service provider digest log（dubbo-server-digest.log） The data is output in JSON format. Each key meaning is as follows:\n   key Meaning     time Log printing time   traceId TraceId   spanId SpanId   span.kind span Type   local.app current application name   service service inteface   method service method   local.host local host   local.host local port   protocol protocol   server.serialize.time response serialize time   server.deserialize.time request deserialize time   result.code result code   current.thread.name current thread name   time.cost.milliseconds Request time (ms)   baggage Transparently transmitted baggage data    Example\n{\u0026amp;#34;time\u0026amp;#34;:\u0026amp;#34;2019-04-03 …","date":-62135596800,"description":"","dir":"projects/sofa-tracer/log-format-dubbo/","fuzzywordcount":300,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"9bac8256ee1a74546b74799f9f1c0de9","permalink":"/en/projects/sofa-tracer/log-format-dubbo/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/en/projects/sofa-tracer/log-format-dubbo/","summary":"Dubbo Log Format SOFATracer integrates Dubbo and outputs the requested link log data format. The default is JSON data format.\nDubbo service consumer digest log（dubbo-client-digest.log） The data is output in JSON format. Each key meaning is as follows:\n   key Meaning     time Log printing time   traceId TraceId   spanId SpanId   span.kind span Type   local.app Current application name   protocol protocol   service service interface   method service method   invoke.","tags":null,"title":"Dubbo log","type":"projects","url":"/en/projects/sofa-tracer/log-format-dubbo/","wordcount":219},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-rpc/dubbo/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"87d78ed0c2d06fe7e1dbf9cb9d6c1c9d","permalink":"/projects/sofa-rpc/dubbo/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-rpc/dubbo/","summary":"","tags":null,"title":"Dubbo 协议","type":"projects","url":"/projects/sofa-rpc/dubbo/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-rpc/dubbo-usage/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"1bf72c194a20a5dccea70423690191f4","permalink":"/projects/sofa-rpc/dubbo-usage/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-rpc/dubbo-usage/","summary":"","tags":null,"title":"Dubbo 协议基本使用","type":"projects","url":"/projects/sofa-rpc/dubbo-usage/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-tracer/usage-of-dubbo/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"03f845606b454a7224333238aeecd9ab","permalink":"/projects/sofa-tracer/usage-of-dubbo/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-tracer/usage-of-dubbo/","summary":"","tags":null,"title":"Dubbo 埋点接入","type":"projects","url":"/projects/sofa-tracer/usage-of-dubbo/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-tracer/log-format-dubbo/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"9bac8256ee1a74546b74799f9f1c0de9","permalink":"/projects/sofa-tracer/log-format-dubbo/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-tracer/log-format-dubbo/","summary":"","tags":null,"title":"Dubbo 日志","type":"projects","url":"/projects/sofa-tracer/log-format-dubbo/","wordcount":0},{"author":null,"categories":null,"content":"The engine architecture is shown in the following diagram. Node A node in a Raft cluster connects and encapsulates all underlayer service modules, and main service interfaces that are visible to users. Specifically, the leader node of a raft group calls apply(task) to commit new tasks to the state machine replication cluster made up by the Raft group, which will then apply the task to the business state machine.\nStorage  It stores Raft configuration changes and log entries converted from requests submitted by users, and replicates log entries from the leader\u0026amp;rsquo;s log to followers\u0026#39; logs. LogStorage stores logs, while LogManager is responsible for calling the underlayer storage, caching and batch submitting storage calls, and conducting necessary checks and optimization. MetaStorage stores the metadata and records the internal states of the Raft implementation, for example, the current term of the node and the node to vote for. Optional. Snapshot storage is used to store users\u0026#39; state-machine snapshots and meta information. SnapshotStorage stores snapshots, while SnapshotExecutor manages the actual storage, remote installation, and replication of snapshots.  State machine  StateMachine is an implementation of users\u0026#39; core logic. It calls the onApply(Iterator) method to apply log entries that are submitted with Node#apply(task) to the business state machine. FSMCaller encapsulates state transition calls that are sent to the User StateMachine, writes log entries, implements a finite-state machine (FSM), conducts necessary checks, and merges requests for batch submission and concurrent processing.  Replication  Replicator is used by the leader to replicate log entries to followers. It does the same thing as an AppendEntries RPC of Raft. Without log entries, it is sent by the leader as heartbeats. ReplicatorGroup is used by a Raft group to manage all replicators, and to perform necessary permission checks and dispatches.  RPC The RPC module is used for network communication between nodes.\n The RPC server is built in a node to receive requests from other nodes or clients, and to redirect such requests to the corresponding service modules. The RPC client is used to issue requests to other nodes, such as requests for votes, log replication requests, and heartbeats.  ","date":-62135596800,"description":"","dir":"projects/sofa-jraft/engine-architecture/","fuzzywordcount":400,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"d2cc9de133aed20695229d0cde5b6ff9","permalink":"/en/projects/sofa-jraft/engine-architecture/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/en/projects/sofa-jraft/engine-architecture/","summary":"The engine architecture is shown in the following diagram. Node A node in a Raft cluster connects and encapsulates all underlayer service modules, and main service interfaces that are visible to users. Specifically, the leader node of a raft group calls apply(task) to commit new tasks to the state machine replication cluster made up by the Raft group, which will then apply the task to the business state machine.\nStorage  It stores Raft configuration changes and log entries converted from requests submitted by users, and replicates log entries from the leader\u0026rsquo;s log to followers' logs.","tags":null,"title":"Engine architecture","type":"projects","url":"/en/projects/sofa-jraft/engine-architecture/","wordcount":347},{"author":null,"categories":null,"content":"ExtensionLoader To ensure that all steps of SOFARPC have sufficient scalability, SOFARPC defines a very flexible extension mechanism in which all extension implementations are equal.\nThis mechanism is very useful for both SOFARPC developers and users. SOFARPC abstracts itself into multiple modules which have no explicit dependencies on each other and interact via SPI.\nThis extension mechanism abstracts the interaction method of SPI. If you have read the documents about Filter and Router, you may have such experience.\nThe following sections introduce how to extend through the SPI interaction method.\nSOFARPC provides the capabilities of ExtensionLoader.\nDesign extension points SOFARPC defines an annotation @Extensible, which is on the interface or abstract class to identify that the class is an extension point. Namely, it informs SOFARPC that the class is extensible and SOFARPC needs to find the implementation of the extension point. In addition, the annotation defines the file name of the implementation class and whether the class is a singleton.\n@Documented @Retention(RetentionPolicy.RUNTIME) @Target({ ElementType.TYPE }) public @interface Extensible { /** * Specify the name of the custom extension file, which is the full class name by default * * @return Custom extension file name */ String file() default \u0026amp;#34;\u0026amp;#34;; /** * Whether the extension class uses a singleton, yes by default * * @return Whether to use a singleton */ boolean singleton() default true; /** * Whether the extension class needs to be encoded, not by default * * @return Whether to encode */ boolean coded() default false; } SOFARPC also defines the @Extension annotation, which indicates an extension implementation class. It also defines the name that the extension point uses when looking for an extension implementation in the file.\n@Documented @Retention(RetentionPolicy.RUNTIME) @Target({ ElementType.TYPE }) public @interface Extension { /** * Extension point name * * @return Extension point name */ String value(); /** * Extension point coding, not required by default; it is required when the interface needs to be encoded * * @return Extension point encoding * @see Extensible#coded() */ byte code() default -1; /** * Priority sorting, not required by default, the larger number, the higher priority * * @return Sort */ int order() default 0; /** * Whether to override other extensions with low {@link #order()} * * @return Whether to override other low-order extensions * @since 5.2.0 */ boolean override() default false; /** * Exclude other extensions, namely exclude other extensions with low {@link #order()} * * @return Excludes other extensions * @since 5.2.0 */ String[] rejection() default {}; } Add extension point  Define extension points.  @Extensible public interface Person { void getName(); } Define the extension implementation.  @Extension(\u0026amp;#34;A\u0026amp;#34;) public class PersonA implements Person{ @Override public void getName() { System.out.println(\u0026amp;#34;li wei\u0026amp;#34;); } } Compile …","date":-62135596800,"description":"","dir":"projects/sofa-rpc/extension-loader/","fuzzywordcount":700,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"acc5628da3a7ea2df5eb68bd8ec17159","permalink":"/en/projects/sofa-rpc/extension-loader/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/en/projects/sofa-rpc/extension-loader/","summary":"ExtensionLoader To ensure that all steps of SOFARPC have sufficient scalability, SOFARPC defines a very flexible extension mechanism in which all extension implementations are equal.\nThis mechanism is very useful for both SOFARPC developers and users. SOFARPC abstracts itself into multiple modules which have no explicit dependencies on each other and interact via SPI.\nThis extension mechanism abstracts the interaction method of SPI. If you have read the documents about Filter and Router, you may have such experience.","tags":null,"title":"Extension mechanism","type":"projects","url":"/en/projects/sofa-rpc/extension-loader/","wordcount":603},{"author":null,"categories":null,"content":"Customize different engine stages You can rewrite APIs provided by ActsTestBase in the test script or in the base class.\n Rewrite the prepare, execute, check, and clear actions. For example, you can add some actions before or after super.prepare(). Rewrite the process method. You can add some actions before or after super.process() to reorchestrate the entire script. For example, you can add some personalized steps in the existing clear \u0026amp;gt; prepare \u0026amp;gt; execute \u0026amp;gt; check process. Rewrite beforeActsTest and afterActsTest to add some personalized actions before or after the running of each test case, such as preparing the context and refreshing the cache.  Parameterization In response expectation and database expectation data, you can use $Variable name to define a value as a variable. You can set values of the variable in the test script. Supported scope: request parameters, responses, and database table fields. Supported types: Currently, only string parameterization is supported.\nUsage:\n(1) Add $ before a value to define it as a variable in the interface.\n(2) Assign values to the variables in the test script.\n@Override public void beforeActsTest(ActsRuntimeContext actsRuntimeContext) { actsRuntimeContext.paramMap.put(\u0026amp;#34;roleId\u0026amp;#34;, \u0026amp;#34;123\u0026amp;#34;); actsRuntimeContext.refreshDataParam(); } When you write the database expectation, you can use the equal sign = to assign a value to the variable. This indicates that the value is a query result, and subsequent tables can use this variable as the value.\nAssume that the interface will insert data into two tables.\n   id_A value_A     123 abc       id_B value_B     abc efg    When you query these two tables, first query for value_A based on id_A in Table A that is returned by the interface. Then use value_A as a condition for the query in Table B. You can set the values as follows in the plug-in.\n   Field Flag Value     id_A C $param1   value_A Y =param2       Field Flag Value     id_B C $param2   value_B Y efg    Operation description:\n =param2 and $param2 indicate that the ACTS framework will first query for value_A in Table A, and then select from B where id_B = value_A to obtain the property value of id_B in Table B. $param1 indicates that you can assign a value to id_A in the code, for example:  actsRuntimeContext.paramMap.put(\u0026amp;#34;param1\u0026amp;#34;,\u0026amp;#34;123\u0026amp;#34;); This snippet assigns the value 123 to the variable param1. You can write this snippet to beforeActsTest in the test script to make the ACTS framework query table A before assigning the value 123 to id_A.\nComponentization Currently, only string componentization is supported.\nIf a property is a dynamically generated string, for example, some IDs. You can use the at sign @ to call a component to generate this property. The component must be placed in the component package at the same level as the test module, namely: com.corpname.appname.acts.component (appname is the name of the system, and corpname is the name of the company, for example, …","date":-62135596800,"description":"","dir":"projects/sofa-acts/usage-api/","fuzzywordcount":1200,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"ce7e264713a6f7a3f0672e2432489f59","permalink":"/en/projects/sofa-acts/usage-api/","publishdate":"0001-01-01T00:00:00Z","readingtime":6,"relpermalink":"/en/projects/sofa-acts/usage-api/","summary":"Customize different engine stages You can rewrite APIs provided by ActsTestBase in the test script or in the base class.\n Rewrite the prepare, execute, check, and clear actions. For example, you can add some actions before or after super.prepare(). Rewrite the process method. You can add some actions before or after super.process() to reorchestrate the entire script. For example, you can add some personalized steps in the existing clear \u0026gt; prepare \u0026gt; execute \u0026gt; check process.","tags":null,"title":"Extensions","type":"projects","url":"/en/projects/sofa-acts/usage-api/","wordcount":1102},{"author":null,"categories":null,"content":"Q: What should I do if NoSuchMethodError is returned? Generally, this error is returned in the case of dependency conflicts. Commonly known dependency conflicts are listed as follows. Exclude the corresponding dependencies when you encounter relevant conflicts.\nLog conflict commons-logging conflict \u0026amp;lt;exclusion\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;commons-logging\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;commons-logging\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;/exclusion\u0026amp;gt; logback-classic conflict Rule out logback-classic by the location of the conflict. For example, application dependencies spring-boot-starter-logging and spring-test conflict with each other.\n\u0026amp;lt;dependency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;org.springframework.boot\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;spring-boot-starter-logging\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;version\u0026amp;gt;1.4.2.RELEASE\u0026amp;lt;/version\u0026amp;gt; \u0026amp;lt;exclusions\u0026amp;gt; \u0026amp;lt;exclusion\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;ch.qos.logback\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;logback-classic\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;/exclusion\u0026amp;gt; \u0026amp;lt;/exclusions\u0026amp;gt; \u0026amp;lt;/dependency\u0026amp;gt; \u0026amp;lt;dependency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;org.springframework\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;spring-test\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;version\u0026amp;gt;4.3.4.RELEASE\u0026amp;lt;/version\u0026amp;gt; \u0026amp;lt;exclusions\u0026amp;gt; \u0026amp;lt;exclusion\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;ch.qos.logback\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;logback-classic\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;/exclusion\u0026amp;gt; \u0026amp;lt;/exclusions\u0026amp;gt; \u0026amp;lt;/dependency\u0026amp;gt; snakeyaml conflict java.lang.NoSuchMethodError: org.yaml.snakeyaml.Yaml.\u0026amp;lt;init\u0026amp;gt;(Lorg/yaml/snakeyaml/constructor/BaseConstructor;)V org.yaml referenced in spring-boot-starter-test conflicts with org.yaml referenced in org.testing. In the following sample code, a conflict of org.yaml in spring-boot-starter-test is ruled out (it can also be ruled out at other conflict locations such as org.testing):\n\u0026amp;lt;dependency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;org.springframework.boot\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;spring-boot-starter-test\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;scope\u0026amp;gt;test\u0026amp;lt;/scope\u0026amp;gt; \u0026amp;lt;exclusions\u0026amp;gt; \u0026amp;lt;exclusion\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;org.yaml\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;snakeyaml\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;/exclusion\u0026amp;gt; \u0026amp;lt;/exclusions\u0026amp;gt; \u0026amp;lt;/dependency\u0026amp;gt; Q: What should I do if NoClassDefFoundError is returned? Generally, this error is returned in the case of missing dependencies or dependency conflicts.\nMockito returns a no class found error While using Mockito with SOFABoot, you do not have to import Mockito if the spring-boot-starter-test dependency already exists.\nQ: What should I do if \u0026amp;ldquo;No bean dataAccessConfigManager available\u0026amp;rdquo; is returned? This error is returned because the application starter class specified by the test script does not have the acts-core.xml file. You can add the acts-core.xml file according to the following figure.\nQ: What should I do if \u0026amp;ldquo;No runnable methods\u0026amp;rdquo; is returned? Generally, this error is caused when you run your Junit test with the ACTS test script. You can use the TestNG framework to run the ACTS test script.\nQ: What should I do in the case of a model …","date":-62135596800,"description":"","dir":"projects/sofa-acts/faq/","fuzzywordcount":700,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"5f89d1f5695cbe6b669a8738741529bd","permalink":"/en/projects/sofa-acts/faq/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/en/projects/sofa-acts/faq/","summary":"Q: What should I do if NoSuchMethodError is returned? Generally, this error is returned in the case of dependency conflicts. Commonly known dependency conflicts are listed as follows. Exclude the corresponding dependencies when you encounter relevant conflicts.\nLog conflict commons-logging conflict \u0026lt;exclusion\u0026gt; \u0026lt;artifactId\u0026gt;commons-logging\u0026lt;/artifactId\u0026gt; \u0026lt;groupId\u0026gt;commons-logging\u0026lt;/groupId\u0026gt; \u0026lt;/exclusion\u0026gt; logback-classic conflict Rule out logback-classic by the location of the conflict. For example, application dependencies spring-boot-starter-logging and spring-test conflict with each other.\n\u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-logging\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.","tags":null,"title":"FAQ","type":"projects","url":"/en/projects/sofa-acts/faq/","wordcount":633},{"author":null,"categories":null,"content":"Common issues Q: Is SOFARPC the version used inside Ant Financial? Yes, SOFARPC has excellent extension interfaces, and the version for internal use just has some additional extension implementations based on the open source version. For example, the cloud-based commercial version integrates the Ant Financial Technology\u0026amp;rsquo;s shared registry center, Distributed System Tracing (DST) and other products. The version for internal use integrates Ant Financial\u0026amp;rsquo;s internal registry center, LDC router and other individual extensions.\nQ: Does SOFARPC use ZooKeeper as the registry center internally? Can it integrate other registry centers such as etcd? Ant Financial uses its self-developed registry products internally. SOFARPC\u0026amp;rsquo;s registry modules are extensible. All the registry modules use the same set of core interfaces for both internal and external use. Currently, the open-source version has integrated with ZooKeeper, and other registry implementation communities are being integrated.\nQ: What is the difference between SOFARPC and Dubbo? Dubbo, developed by Alibaba Group, is an excellent open-source RPC framework featuring high performance and good scalability. Dubbo is a comparatively mature open source framework, with a large number of users and rich open source ecology. Now, it has joined the Apache Foundation for incubation. Dubbo was first widely used in the Alibaba B2B department.\nOriginated from HSF in Alibaba Group, SOFARPC now has grown to an independent product. SOFARPC has carried out a lot of reconstruction and optimization on the aspects of protocol, network, routing, and scalability to meet the large-scale financial business scenarios of Ant Financial. In the Ant Financial\u0026amp;rsquo;s middleware (SOFAStack) ecosystem, SOFARPC is supported by a comprehensive microservices technology stack, including Microservices R\u0026amp;amp;D framework, RPC framework, service registry center, distributed scheduling task, throttling framework, Dynamic Configuration, DST, Metrics and others. By Dec. 11, 2017, SOFARPC has been used by thousands of systems in Ant Financial, and the production environment has released more than tens of thousands of interfaces.\nHowever, in the open source field, SOFARPC is still at the initial stage, and its open source ecosystem is still under construction. With the advancement of the open source plan, various related components will be available in the subsequent versions to improve the microservices stack. You are welcome to build SOFAStack together with us.\nIn terms of performance, the technical points of both products involved in protocols are similar. As for scalability, both products have good scalability. As for other functional differences, here are some features that have been opened source or will be open sourced in the near future for reference:\n SOFARPC supports HTTP/2 and GRPC protocols and provides such capabilities as service warm-up weight, automatic degradation upon fault, negotiation mechanism, and CRC data …","date":-62135596800,"description":"","dir":"projects/sofa-rpc/faq/","fuzzywordcount":800,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"a6ec77ce5a423c5345394f42c64a416b","permalink":"/en/projects/sofa-rpc/faq/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/en/projects/sofa-rpc/faq/","summary":"Common issues Q: Is SOFARPC the version used inside Ant Financial? Yes, SOFARPC has excellent extension interfaces, and the version for internal use just has some additional extension implementations based on the open source version. For example, the cloud-based commercial version integrates the Ant Financial Technology\u0026rsquo;s shared registry center, Distributed System Tracing (DST) and other products. The version for internal use integrates Ant Financial\u0026rsquo;s internal registry center, LDC router and other individual extensions.","tags":null,"title":"FAQ","type":"projects","url":"/en/projects/sofa-rpc/faq/","wordcount":742},{"author":null,"categories":null,"content":"Usually, a service have multiple service providers in a cluster. Some of the service providers may have persistent connections still survived due to network, configuration, long-term fullgc, full thread pool, hardware failure and others, but the program cannot respond properly. The stand-alone fault tolerance function can degrade the exceptional service providers so that the client requests can be pointed to the healthy node. When the exceptional nodes become normal, the standalone fault tolerance function will restore the nodes, so that the client requests can gradually distribute traffic to the nodes. The standalone fault tolerance function solves the problem that service failures continue to affect the business, avoids the avalanche effect, reduces the long response time required for manual intervention and increases system availability.\nRunning mechanism:\n Standalone fault tolerance counts the number of calls and the number of exceptions in a time range, and calculates the abnormal rate of IP for each service and the average abnormal rate of the service. When the IP abnormal rate is greater than the service average abnormal rate to a certain ratio, the dimension of the service + ip is degraded. If the weight of the service + ip dimension is not degraded to 0, then when the call of the service + ip dimension is normal, the weight will be restored. The entire calculation and control process proceeds asynchronously, thus not blocking the call.  The standalone fault tolerance is used as follows:\nFaultToleranceConfig faultToleranceConfig = new FaultToleranceConfig(); faultToleranceConfig.setRegulationEffective(true); faultToleranceConfig.setDegradeEffective(true); faultToleranceConfig.setTimeWindow(20); faultToleranceConfig.setWeightDegradeRate(0.5); FaultToleranceConfigManager.putAppConfig(\u0026amp;#34;appName\u0026amp;#34;, faultToleranceConfig); As above, after the standalone fault tolerance switch is turned on, the application will calculate the exceptions every 20s time window. If a service + IP calling dimension is determined to be a faulty node, the weight of the service + IP will be degraded to 0.5 times.\nFor more detailed parameters, please refer to Standalone troubleshooting\n","date":-62135596800,"description":"","dir":"projects/sofa-rpc/fault-tolerance/","fuzzywordcount":400,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"7501b0fac1d1d89c61de0d591e29e1d0","permalink":"/en/projects/sofa-rpc/fault-tolerance/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/en/projects/sofa-rpc/fault-tolerance/","summary":"Usually, a service have multiple service providers in a cluster. Some of the service providers may have persistent connections still survived due to network, configuration, long-term fullgc, full thread pool, hardware failure and others, but the program cannot respond properly. The stand-alone fault tolerance function can degrade the exceptional service providers so that the client requests can be pointed to the healthy node. When the exceptional nodes become normal, the standalone fault tolerance function will restore the nodes, so that the client requests can gradually distribute traffic to the nodes.","tags":null,"title":"Fault tolerance","type":"projects","url":"/en/projects/sofa-rpc/fault-tolerance/","wordcount":306},{"author":null,"categories":null,"content":"Fault tolerance automatically monitors the RPC calls, degrades the weight of the failed node, and recovers the weight when the node restored to normal. The bolt protocol is currently supported.\nIn SOFABoot, you only need to configure fault tolerance parameters to application.properties. You can select not to configure all parameters but only configure the parameters that you care about. Then, the remaining parameters will take the default values. Note that rpc.aft.regulation.effective is a global switch for this function. If it is off, the function will not work and other parameters will not take effect.\n   Attribute Description Default value     timeWindow Time window size: the period in which statistics are calculated. 10s   leastWindowCount Minimum number of calls in the time window: Only data that has reached this minimum value in the time window will be added in calculation and control. 10 times   leastWindowExceptionRateMultiple Degradation ratio of the exception rate in the time window to the average exception rate of the service: When calculating the statistical information, the average exception rate of all valid call IPs of the service is calculated. If the exception rate of an IP is greater than or equal to the lowest ratio, the IP will be degraded. 6 times   weightDegradeRate Degradation ratio: The rate of degradation of an address when it is degraded. 1/20   weightRecoverRate Recovery ratio: The recovery ratio of the address when it is weighted. 2 times   degradeEffective Degradation switch: If the application turns on this switch, it will degrade the address that matches the degradation criteria; otherwise, only the log will be printed. false (off)   degradeLeastWeight Degradation minimum weight: If the address weight is degraded to the weight less than this minimum weight, the minimum weight will be used. 1   degradeMaxIpCount Maximum number of IPs for degradation: The number of IPs in the same service that have been degraded cannot exceed this value. 2   regulationEffective Global switch: If the switch is turned on by the application, the entire standalone fault tolerance function will be turned on; otherwise, this function will not be used at all. false (off)     Example  Com.alipay.sofa.rpc.aft.time.window=20 Com.alipay.sofa.rpc.aft.least.window.count=30 Com.alipay.sofa.rpc.aft.least.window.exception.rate.multiple=6 Com.alipay.sofa.rpc.aft.weight.degrade.rate=0.5 Com.alipay.sofa.rpc.aft.weight.recover.rate=1.2 Com.alipay.sofa.rpc.aft.degrade.effective=ture Com.alipay.sofa.rpc.aft.degrade.least.weight=1 Com.alipay.sofa.rpc.aft.degrade.max.ip.count=2 Com.alipay.sofa.rpc.aft.regulation.effective=true As configured above, the fault tolerance function and degradation switch are enabled. When a node fails too many times, its weight is degraded, and during recovery, the weight will be restored. The node healthy is measured every 20s, and the nodes called for more than 30 times in 20s are recognized as calculation data. If the exception …","date":-62135596800,"description":"","dir":"projects/sofa-rpc/configuration-fault-tolerance/","fuzzywordcount":500,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"a132b54b2398534d1773489e2b0db166","permalink":"/en/projects/sofa-rpc/configuration-fault-tolerance/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/en/projects/sofa-rpc/configuration-fault-tolerance/","summary":"Fault tolerance automatically monitors the RPC calls, degrades the weight of the failed node, and recovers the weight when the node restored to normal. The bolt protocol is currently supported.\nIn SOFABoot, you only need to configure fault tolerance parameters to application.properties. You can select not to configure all parameters but only configure the parameters that you care about. Then, the remaining parameters will take the default values. Note that rpc.","tags":null,"title":"Fault tolerance configuration","type":"projects","url":"/en/projects/sofa-rpc/configuration-fault-tolerance/","wordcount":487},{"author":null,"categories":null,"content":"Feature architecture SOFABolt provides the following basic features:  Basic communication functions (remoting-core)  Netty-based, highly-effective network I/O and thread model practice Connection management (lock-free connection establishment, timed disconnection, automatic reconnection) Basic communication models (oneway, sync, future, callback) Timeout control Batch unpacking and batch submission processor Heartbeat and IDLE event processing   Protocol framework (protocol-skeleton)  Commands and command processor Coding and decoding processor Heartbeat trigger   Custom private protocol implementation - RPC communication protocol (protocol-implementation)  RPC communication protocol design Flexible deserialization timing control Request processing timeout FailFast mechanism User request processor (UserProcessor) Duplex communication    Usage 1 Use SOFABolt as a remote communication framework. You do not need to consider the details of how to implement a private protocol, just use our built-in RPC communication protocol. You can simply enable the client side and the server side, and simultaneously register a user request processor, thereby completing the remote calling. In addition, basic features such as connection management and heartbeat are available by default. Currently supported call types are shown in the figure below:\n For a sample demonstration, refer to our user guide.  Usage 2 Use SOFABolt as a protocol framework. You can reuse the basic functions of the basic communication model, the interface definitions included in the protocols, etc. Then, according to the private protocol you designed, you can customize the command types, command processors, decoding processors, etc. The RPC and message command definition structure is as shown in the figure below:\n","date":-62135596800,"description":"","dir":"projects/sofa-bolt/sofa-bolt-functions/","fuzzywordcount":300,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"fde29139cbd8b786326a6479e52814dd","permalink":"/en/projects/sofa-bolt/sofa-bolt-functions/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/en/projects/sofa-bolt/sofa-bolt-functions/","summary":"Feature architecture SOFABolt provides the following basic features:  Basic communication functions (remoting-core)  Netty-based, highly-effective network I/O and thread model practice Connection management (lock-free connection establishment, timed disconnection, automatic reconnection) Basic communication models (oneway, sync, future, callback) Timeout control Batch unpacking and batch submission processor Heartbeat and IDLE event processing   Protocol framework (protocol-skeleton)  Commands and command processor Coding and decoding processor Heartbeat trigger   Custom private protocol implementation - RPC communication protocol (protocol-implementation)  RPC communication protocol design Flexible deserialization timing control Request processing timeout FailFast mechanism User request processor (UserProcessor) Duplex communication    Usage 1 Use SOFABolt as a remote communication framework.","tags":null,"title":"Features","type":"projects","url":"/en/projects/sofa-bolt/sofa-bolt-functions/","wordcount":237},{"author":null,"categories":null,"content":"Features  Service publishing and reference Communication Protocol  Bolt protocol  Basic usage Calling type Timeout control Generic call Serialization protocol Custom thread pool   RESTful protocol  Basic usage Custom filter Integrated Swagger   Dubbo  Basic usage   H2C  Basic usage     Registry center Direct call Load balancing Custom filter Custom router addressing Call retry Tracing  SOFATracer Skywalking   Custom thread pool Link data transparent transmission Warm-up weight Fault tolerance Node cross-language call Graceful shutdown  ","date":-62135596800,"description":"","dir":"projects/sofa-rpc/features/","fuzzywordcount":100,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"0059809aed46360e8787e945ff098610","permalink":"/en/projects/sofa-rpc/features/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/en/projects/sofa-rpc/features/","summary":"Features  Service publishing and reference Communication Protocol  Bolt protocol  Basic usage Calling type Timeout control Generic call Serialization protocol Custom thread pool   RESTful protocol  Basic usage Custom filter Integrated Swagger   Dubbo  Basic usage   H2C  Basic usage     Registry center Direct call Load balancing Custom filter Custom router addressing Call retry Tracing  SOFATracer Skywalking   Custom thread pool Link data transparent transmission Warm-up weight Fault tolerance Node cross-language call Graceful shutdown  ","tags":null,"title":"Features","type":"projects","url":"/en/projects/sofa-rpc/features/","wordcount":68},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/mosn/configuration/listener/filter-chain/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"d79979b85edad41aa6f0b3d8fe3295ee","permalink":"/projects/mosn/configuration/listener/filter-chain/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/mosn/configuration/listener/filter-chain/","summary":"","tags":null,"title":"FilterChain 配置","type":"projects","url":"/projects/mosn/configuration/listener/filter-chain/","wordcount":0},{"author":null,"categories":null,"content":"Framework preparation Before reading, you can download and install ACTS IDE and import the ACTS framework by refering to Quick start.\nThis topic mainly describes the encoding, datasource configuration, and quick configuration to help you use the ACTS framework.\nEncoding Ensure that the encoding of ACTS and that of the system code are consistent, specifically, ensure that the encoding for script generation and the encoding of the IDEA workspace are consistent with the encoding of your application code. Otherwise, the code may get corrupted.\nThe encoding selected for test script generation is shown as follows.\nEncoding of the IDEA workspace:\nDatasource configuration The purpose of configuring data sources in ACTS is to ensure that you can use the system\u0026amp;rsquo;s data sources to properly perform database addition, deletion, and query operations during the preparation, clearance, and check stages.\nDatasource configuration Configure the mapping relationship between the ModuleName, datasource, and tables at the DAL layer in src/test/resource/config/acts-config.properties. The name of datasources starts with ds_ as follows:\ndatasource_bundle_name =com.alipay.testapp.common.dal ds_bean1=table1,table2 ds_bean2=table3,table4 #Configuration format #ds_datasource bean=logical table 1,logical table 2 Bean 1 and bean 2 are the names of the datasource beans at the DAL layer of the application code. Multiple datasources are supported. The table name supports regular expressions and sharding suffixes are not required. In the case of multiple datasources, a table must belong to only one datasource. See the following figure.\nDirect JDBC connection to the database The direct JDBC connection to the database is used to generate the DB data model. The configuration in devdb.conf or testdb.conf under src/test/resource/config/dbConf/ is as follows:\nxxx_url = jdbc:oracle:thin:@localhost:1521:cifdb xxx_username = myname xxx_password = mypswd Quick configuration description The quick test framework configuration mainly generates the basic Java classes and the necessary configuration files:\nJava classes   AppNameActsBaseUtils.java\nThe utility class that is commonly used in the test script writing process to get various data from the ACTS framework. The initial version provides only common methods. You can add desired methods by yourself.\n  AppNameActsTestBase.java\nThe encapsulated application test base class. If you have special business system requirements, you can encapsulate additional methods based on this class. If not, ignore this file.\n  Configuration files ","date":-62135596800,"description":"","dir":"projects/sofa-acts/usage-ready/","fuzzywordcount":400,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"c3a89cbf42d55c98206a08e94d05ffde","permalink":"/en/projects/sofa-acts/usage-ready/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/en/projects/sofa-acts/usage-ready/","summary":"Framework preparation Before reading, you can download and install ACTS IDE and import the ACTS framework by refering to Quick start.\nThis topic mainly describes the encoding, datasource configuration, and quick configuration to help you use the ACTS framework.\nEncoding Ensure that the encoding of ACTS and that of the system code are consistent, specifically, ensure that the encoding for script generation and the encoding of the IDEA workspace are consistent with the encoding of your application code.","tags":null,"title":"Framework preparation","type":"projects","url":"/en/projects/sofa-acts/usage-ready/","wordcount":358},{"author":null,"categories":null,"content":"Generic calls provide the ability for clients to initiate calls without having to rely on the server`s interface. Currently, the generic call of SOFARPC only supports using Hessian2 as the serialization protocol under the Bolt communication protocol.\nSOFABoot environment Publish Service There is nothing special about publishing a service. Just publish the service normally, for example:\n\u0026amp;lt;!-- generic --\u0026amp;gt; \u0026amp;lt;bean id=\u0026amp;#34;sampleGenericServiceImpl\u0026amp;#34; class=\u0026amp;#34;com.alipay.sofa.rpc.samples.generic.SampleGenericServiceImpl\u0026amp;#34;/\u0026amp;gt; \u0026amp;lt;sofa:service ref=\u0026amp;#34;sampleGenericServiceImpl\u0026amp;#34; interface=\u0026amp;#34;com.alipay.sofa.rpc.samples.generic.SampleGenericService\u0026amp;#34;\u0026amp;gt; \u0026amp;lt;sofa:binding.bolt/\u0026amp;gt; \u0026amp;lt;/sofa:service\u0026amp;gt; Reference Service \u0026amp;lt;sofa:reference jvm-first=\u0026amp;#34;false\u0026amp;#34; id=\u0026amp;#34;sampleGenericServiceReference\u0026amp;#34; interface=\u0026amp;#34;com.alipay.sofa.rpc.api.GenericService\u0026amp;#34;\u0026amp;gt; \u0026amp;lt;sofa:binding.bolt\u0026amp;gt; \u0026amp;lt;sofa:global-attrs generic-interface=\u0026amp;#34;com.alipay.sofa.rpc.samples.generic.SampleGenericService\u0026amp;#34;/\u0026amp;gt; \u0026amp;lt;/sofa:binding.bolt\u0026amp;gt; \u0026amp;lt;/sofa:reference\u0026amp;gt; The jvm-first can be left empty according to the actual situation. The interface should be the general interface of generic call. As for the generic-interface, you can just write in the name of the interface to be called.\nInitiate a call GenericService sampleGenericServiceReference = (GenericService) applicationContext .getBean(\u0026amp;#34;sampleGenericServiceReference\u0026amp;#34;); GenericObject genericResult = (GenericObject) sampleGenericServiceReference.$genericInvoke(\u0026amp;#34;sayGeneric\u0026amp;#34;, new String[] { \u0026amp;#34;com.alipay.sofa.rpc.samples.generic.SampleGenericParamModel\u0026amp;#34; }, new Object[] { genericObject }); RPC API ConsumerConfig\u0026amp;lt;GenericService\u0026amp;gt; consumerConfig = new ConsumerConfig\u0026amp;lt;GenericService\u0026amp;gt;() .setInterfaceId(\u0026amp;#34;com.alipay.sofa.rpc.quickstart.HelloService\u0026amp;#34;) .setGeneric(true); GenericService testService = consumerConfig.refer(); String result = (String) testService.$invoke(\u0026amp;#34;sayHello\u0026amp;#34;, new String[] { \u0026amp;#34;java.lang.String\u0026amp;#34; },new Object[] { \u0026amp;#34;1111\u0026amp;#34; }); You can set the service as a generic service and set the interface name of the server by setGeneric as above. GenericService is used as a generic service, and GenericService can initiate generic calls. You need to pass in the method name, method type, and method parameters when invoking a call.\nIf the parameter or return result is also required to be generalized on the client side, you can achieve this with GenericObject.\nGenericObject genericObject = new GenericObject(\u0026amp;#34;com.alipay.sofa.rpc.invoke.generic.TestObj\u0026amp;#34;); genericObject.putField(\u0026amp;#34;str\u0026amp;#34;, \u0026amp;#34;xxxx\u0026amp;#34;); genericObject.putField(\u0026amp;#34;num\u0026amp;#34;, 222); GenericObject result = (GenericObject) testService.$genericInvoke(\u0026amp;#34;echoObj\u0026amp;#34;, new String[] { \u0026amp;#34;com.alipay.sofa.rpc.invoke.generic.TestObj\u0026amp;#34; }, new Object[] { genericObject }); String str = result.getField(\u0026amp;#34;str\u0026amp;#34;); String num = result.getField(\u0026amp;#34;num\u0026amp;#34;); The …","date":-62135596800,"description":"","dir":"projects/sofa-rpc/generic-invoke/","fuzzywordcount":600,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"84ac624dc99a42a8f89489aa10304ef7","permalink":"/en/projects/sofa-rpc/generic-invoke/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/en/projects/sofa-rpc/generic-invoke/","summary":"Generic calls provide the ability for clients to initiate calls without having to rely on the server`s interface. Currently, the generic call of SOFARPC only supports using Hessian2 as the serialization protocol under the Bolt communication protocol.\nSOFABoot environment Publish Service There is nothing special about publishing a service. Just publish the service normally, for example:\n\u0026lt;!-- generic --\u0026gt; \u0026lt;bean id=\u0026#34;sampleGenericServiceImpl\u0026#34; class=\u0026#34;com.alipay.sofa.rpc.samples.generic.SampleGenericServiceImpl\u0026#34;/\u0026gt; \u0026lt;sofa:service ref=\u0026#34;sampleGenericServiceImpl\u0026#34; interface=\u0026#34;com.alipay.sofa.rpc.samples.generic.SampleGenericService\u0026#34;\u0026gt; \u0026lt;sofa:binding.bolt/\u0026gt; \u0026lt;/sofa:service\u0026gt; Reference Service \u0026lt;sofa:reference jvm-first=\u0026#34;false\u0026#34; id=\u0026#34;sampleGenericServiceReference\u0026#34; interface=\u0026#34;com.","tags":null,"title":"Generic call","type":"projects","url":"/en/projects/sofa-rpc/generic-invoke/","wordcount":501},{"author":null,"categories":null,"content":"This document introduces how to use SOFARPC for service publishing and reference in SOFABoot.\nYou can get the code sample of this document by clicking here. Note that the code sample requires a local installation of the zookeeper environment. If not, you need to remove the com.alipay.sofa.rpc.registry.address configuration in application.properties to use the local file as a registry center.\nCreate a project  Prepare environment: SOFABoot requires JDK7 or JDK8 and needs to be compiled with Apache Maven 2.2.5 or above. Build SOFABoot project: SOFABoot is based on Spring Boot. So you can use Spring Boot\u0026amp;rsquo;s project generation tool to generate a standard Spring Boot project. Add SOFABoot dependency: The generated standard Spring Boot project directly uses Spring parent dependency, which should be changed to the parent dependency provided by SOFABoot. The parent dependency provides and manages a variety of starters provided by SOFABoot.  \u0026amp;lt;parent\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;org.springframework.boot\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;spring-boot-starter-parent\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;version\u0026amp;gt;${spring.boot.version}\u0026amp;lt;/version\u0026amp;gt; \u0026amp;lt;relativePath/\u0026amp;gt; \u0026amp;lt;/parent\u0026amp;gt; Replace the above with the followings:\n\u0026amp;lt;parent\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;com.alipay.sofa\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;sofaboot-dependencies\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;version\u0026amp;gt;3.0.0\u0026amp;lt;/version\u0026amp;gt; \u0026amp;lt;/parent\u0026amp;gt; Configure application.properties: application.properties is the configuration file in SOFABoot project. Here you need to configure the application name.  spring.application.name=AppName Introduce RPC starter:  \u0026amp;lt;dependency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;com.alipay.sofa\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;rpc-sofa-boot-starter\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;/dependency\u0026amp;gt; Declare the xsd file of SOFABoot:  In the XML configuration file to be used, configure the declaration of the header xsd file to the followings. This enables development using the XML elements defined by SOFABoot.\n\u0026amp;lt;?xml version=\u0026amp;#34;1.0\u0026amp;#34; encoding=\u0026amp;#34;UTF-8\u0026amp;#34;?\u0026amp;gt; \u0026amp;lt;beans xmlns=\u0026amp;#34;http://www.springframework.org/schema/beans\u0026amp;#34; xmlns:xsi=\u0026amp;#34;http://www .w3.org/2001/XMLSchema-instance\u0026amp;#34; xmlns:sofa=\u0026amp;#34;http://sofastack.io/schema/sofaboot\u0026amp;#34; xmlns:context=\u0026amp;#34;http://www.springframework.org/schema/context\u0026amp;#34; xsi:schemaLocation =\u0026amp;#34;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://sofastack.io/schema/sofaboot http://sofastack .io/schema/sofaboot.xsd\u0026amp;#34; Define service interface and implementation public interface HelloSyncService { String saySync(String string); } public class HelloSyncServiceImpl implements HelloSyncService { @Override public String saySync(String string) { return string; } } Publish service on server Configure the followings in the xml file. When the Spring context is refreshed, SOFABoot registers the service implementation on the server, communicates with the client by bolt protocol, and publishes metadata such as address to …","date":-62135596800,"description":"","dir":"projects/sofa-rpc/getting-started-with-sofa-boot/","fuzzywordcount":500,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"0dd5e0e5116473aee630cba38679d493","permalink":"/en/projects/sofa-rpc/getting-started-with-sofa-boot/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/en/projects/sofa-rpc/getting-started-with-sofa-boot/","summary":"This document introduces how to use SOFARPC for service publishing and reference in SOFABoot.\nYou can get the code sample of this document by clicking here. Note that the code sample requires a local installation of the zookeeper environment. If not, you need to remove the com.alipay.sofa.rpc.registry.address configuration in application.properties to use the local file as a registry center.\nCreate a project  Prepare environment: SOFABoot requires JDK7 or JDK8 and needs to be compiled with Apache Maven 2.","tags":null,"title":"Get started with SOFABoot","type":"projects","url":"/en/projects/sofa-rpc/getting-started-with-sofa-boot/","wordcount":437},{"author":null,"categories":null,"content":"This document introduces how to apply SOFARPC for service publishing and reference. This example will simulate a server locally to listen to a port and publish a service, and the client will reference the service for direct call.\nYou can get the code sample of this document by clicking here.\nCreate a project You need to install JDK 6 or above and Maven 3 or above.\nCreate a new Maven project and introduce SOFARPC dependency.\n\u0026amp;lt;dependency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;com.alipay.sofa\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;sofa-rpc-all\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;version\u0026amp;gt;latest version\u0026amp;lt;/version\u0026amp;gt; \u0026amp;lt;/dependency\u0026amp;gt; Note: The latest version can be found at https://github.com/sofastack/sofa-rpc/releases.\nWrite a server implementation Step 1: Create interface\n/** * Quick Start demo interface */ public interface HelloService { String sayHello(String string); } Step 2: Create interface implementation\n/** * Quick Start demo implement */ public class HelloServiceImpl implements HelloService { @Override public String sayHello(String string { System.out.println(\u0026amp;#34;Server receive: \u0026amp;#34; + string); return \u0026amp;#34;hello \u0026amp;#34; + string + \u0026amp;#34; !\u0026amp;#34;; } } Step 3: Write the server code\n/** * Quick Start Server */ public class QuickStartServer { public static void main(String[] args) { ServerConfig serverConfig = new ServerConfig() .setProtocol(\u0026amp;#34;bolt\u0026amp;#34;) // Set a protocol, which is bolt by default  .setPort(12200) // set a port, which is 12200 by default  .setDaemon(false); // non-daemon thread  ProviderConfig\u0026amp;lt;HelloService\u0026amp;gt; providerConfig = new ProviderConfig\u0026amp;lt;HelloService\u0026amp;gt;() .setInterfaceId(HelloService.class.getName()) // Specify the interface  .setRef(new HelloServiceImpl()) // Specify the implementation  .setServer(serverConfig); // Specify the server  providerConfig.export (); // Publish service  } } Write a client implementation Step 1: Get the server interface\nIn general, the server provides the interface class to the client in the form of jar. In this example, this step is skipped since the server and client are in the same project.\nStep 2: Write the client code\n/** * Quick Start client */ public class QuickStartClient { public static void main(String[] args) { ConsumerConfig\u0026amp;lt;HelloService\u0026amp;gt; consumerConfig = new ConsumerConfig\u0026amp;lt;HelloService\u0026amp;gt;() .setInterfaceId(HelloService.class.getName()) // Specify the interface  .setProtocol(\u0026amp;#34;bolt\u0026amp;#34;) // Specify the protocol.setDirectUrl  .setDirectUrl(\u0026amp;#34;bolt://127.0.0.1:12200\u0026amp;#34;); // Specify the direct connection address  // Generate the proxy class  HelloService helloService = consumerConfig.refer(); while (true) { System.out.println(helloService.sayHello(\u0026amp;#34;world\u0026amp;#34;)); try { Thread.sleep(2000); } catch (Exception e) { } } } } Run Start the server and client separately.\nThe server outputs:\n Server receive: The world\n The client outputs:\n hello world !\n More For more examples, please refer to: example\n","date":-62135596800,"description":"","dir":"projects/sofa-rpc/getting-started-with-rpc/","fuzzywordcount":400,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"192d252b0b36266622284b68d10e9fe4","permalink":"/en/projects/sofa-rpc/getting-started-with-rpc/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/en/projects/sofa-rpc/getting-started-with-rpc/","summary":"This document introduces how to apply SOFARPC for service publishing and reference. This example will simulate a server locally to listen to a port and publish a service, and the client will reference the service for direct call.\nYou can get the code sample of this document by clicking here.\nCreate a project You need to install JDK 6 or above and Maven 3 or above.\nCreate a new Maven project and introduce SOFARPC dependency.","tags":null,"title":"Get started with SOFARPC","type":"projects","url":"/en/projects/sofa-rpc/getting-started-with-rpc/","wordcount":371},{"author":null,"categories":null,"content":"Graceful shutdown includes two parts. One is the RPC framework as client, and the other is the RPC framework as server.\nAs server As the server, the RPC framework should not be violently shutdown.\ncom.alipay.sofa.rpc.context.RpcRuntimeContext Added a ShutdownHook to the static initialization snippet:\n// Add jvm shutdown event if (RpcConfigs.getOrDefaultValue(RpcOptions.JVM_SHUTDOWN_HOOK, true)) { Runtime.getRuntime().addShutdownHook(new Thread(new Runnable() { @Override public void run() { if (LOGGER.isWarnEnabled()) { LOGGER.warn(\u0026amp;#34;SOFA RPC Framework catch JVM shutdown event, Run shutdown hook now.\u0026amp;#34;); } destroy(false); } }, \u0026amp;#34;SOFA-RPC-ShutdownHook\u0026amp;#34;)); } The logic in ShutdownHook is executed first when the publishing platform or users run the following method kill pid. In the destroy operation, the RPC framework first performs actions such as canceling service registration to the registry center and closing the service port.\nprivate static void destroy(boolean active) { RpcRunningState.setShuttingDown (true); for (Destroyable.DestroyHook destroyHook : DESTROY_HOOKS) { destroyHook.preDestroy(); } List\u0026amp;lt;ProviderConfig\u0026amp;gt; providerConfigs = new ArrayList\u0026amp;lt;ProviderConfig\u0026amp;gt;(); for (ProviderBootstrap bootstrap : EXPORTED_PROVIDER_CONFIGS) { providerConfigs.add(bootstrap.getProviderConfig()); } // First, unregister the server  List\u0026amp;lt;Registry\u0026amp;gt; registries = RegistryFactory.getRegistries(); if (CommonUtils.isNotEmpty(registries) \u0026amp;amp;\u0026amp;amp; CommonUtils.isNotEmpty(providerConfigs)) { for (Registry registry : registries) { registry.batchUnRegister(providerConfigs); } } / / Shut down the port that has been started ServerFactory.destroyAll(); // Close the published service  for (ProviderBootstrap bootstrap : EXPORTED_PROVIDER_CONFIGS) { bootstrap.unExport(); } // Close the called service  for (ConsumerBootstrap bootstrap : REFERRED_CONSUMER_CONFIGS) { ConsumerConfig config = bootstrap.getConsumerConfig(); If (!CommonUtils.isFalse(config.getParameter(RpcConstants.HIDDEN_KEY_DESTROY))) { // Unless you do not let the active unrefer  bootstrap.unRefer(); } } // Shut down the registry center  RegistryFactory.destroyAll(); / / Close some public resources of the client ClientTransportFactory.closeAll(); // Uninstall the module  if (!RpcRunningState.isUnitTestMode()) { ModuleFactory.uninstallModules(); } // Uninstall the hook  for (Destroyable.DestroyHook destroyHook : DESTROY_HOOKS) { destroyHook.postDestroy(); } // Clean up the cache  RpcCacheManager.clearAll(); RpcRunningState.setShuttingDown (false); if (LOGGER.isWarnEnabled()) { LOGGER.warn(\u0026amp;#34;SOFA RPC Framework has been release all resources {}...\u0026amp;#34;, active ? \u0026amp;#34;actively \u0026amp;#34; : \u0026amp;#34;\u0026amp;#34;); } } Taking bolt as an example, closing the port is not an immediate action.\n@Override public void destroy() { if (!started) { return; } int stopTimeout = serverConfig.getStopTimeout(); If (stopTimeout \u0026amp;gt; 0) { // need to wait for the end time  AtomicInteger count = …","date":-62135596800,"description":"","dir":"projects/sofa-rpc/graceful-shutdown/","fuzzywordcount":700,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"53af179e23ba184b01eb8234c055b15d","permalink":"/en/projects/sofa-rpc/graceful-shutdown/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/en/projects/sofa-rpc/graceful-shutdown/","summary":"Graceful shutdown includes two parts. One is the RPC framework as client, and the other is the RPC framework as server.\nAs server As the server, the RPC framework should not be violently shutdown.\ncom.alipay.sofa.rpc.context.RpcRuntimeContext Added a ShutdownHook to the static initialization snippet:\n// Add jvm shutdown event if (RpcConfigs.getOrDefaultValue(RpcOptions.JVM_SHUTDOWN_HOOK, true)) { Runtime.getRuntime().addShutdownHook(new Thread(new Runnable() { @Override public void run() { if (LOGGER.isWarnEnabled()) { LOGGER.warn(\u0026#34;SOFA RPC Framework catch JVM shutdown event, Run shutdown hook now.","tags":null,"title":"Graceful shutdown","type":"projects","url":"/en/projects/sofa-rpc/graceful-shutdown/","wordcount":669},{"author":null,"categories":null,"content":"H2C protocol SOFARPC provides support for the H2C protocol, which can be used to publish and reference services.\n Basic usage  ","date":-62135596800,"description":"","dir":"projects/sofa-rpc/h2c/","fuzzywordcount":100,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"45b6d6ba0ca1ae7f6d415d79c184f766","permalink":"/en/projects/sofa-rpc/h2c/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/en/projects/sofa-rpc/h2c/","summary":"H2C protocol SOFARPC provides support for the H2C protocol, which can be used to publish and reference services.\n Basic usage  ","tags":null,"title":"H2C","type":"projects","url":"/en/projects/sofa-rpc/h2c/","wordcount":20},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-rpc/h2c/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"45b6d6ba0ca1ae7f6d415d79c184f766","permalink":"/projects/sofa-rpc/h2c/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-rpc/h2c/","summary":"","tags":null,"title":"H2C","type":"projects","url":"/projects/sofa-rpc/h2c/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-rpc/h2c-usage/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"fa75eff1e99b3acad5087160a1b44a09","permalink":"/projects/sofa-rpc/h2c-usage/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-rpc/h2c-usage/","summary":"","tags":null,"title":"H2C 协议基本使用","type":"projects","url":"/projects/sofa-rpc/h2c-usage/","wordcount":0},{"author":null,"categories":null,"content":"SOFABoot provides Readiness Check to enhance Spring Boot\u0026amp;rsquo;s Health Check. If you need to use the SOFA middleware, you are advised to use the Health Check extension of SOFABoot to launch application examples in a more elegant way.\nEnable Health Check To enable the Health Check feature in SOFABoot, you only need to import the following starter:\n\u0026amp;lt;dependency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;com.alipay.sofa\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;healthcheck-sofa-boot-starter\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;/dependency\u0026amp;gt; Without the Health Check extension, users still can perform Liveness Check with native Spring Boot Actuator directly relying on the HealthIndicator interface.\nSecurity alert From SOFABoot 2.3.0 on, the Health Check depends on the Actuator component in SpringBoot 1.4.x, and the component opens a lot of EndPoint such as \u0026amp;lsquo;/dump \u0026#39; and \u0026amp;lsquo;/trace\u0026amp;rsquo;. So there may be a security risk. Refer to the Security Recommendations in the official document for settings.\nSpringBoot 1.5.x and SpringBoot 2.x. have fixed some security issues. SOFABoot will be supported by upgrading the SpringBoot kernel.\nView Health Check results After adding the Health Check extension, you can directly browser http://localhost:8080/health/readiness to view the Readiness Check results. To view the Liveness Check results, access the URL of the Spring Boot Health Check results. http://localhost:8080/health。\nIn SOFABoot, you can also view Health Check results by checking the specific logs in the health-check directory. Generally, such logs contain the following content:\n2018-04-06 23:29:50,240 INFO main - Readiness check result: success At present, the SOFA middleware has controlled upstream traffic access through the Readiness Check offered by SOFABoot. But, apart from the middleware, traffic of an application may come from other sources such as the load balancer. To control such traffic, users are advised to view the Readiness Check results by PAAS and determine whether to launch corresponding nodes in the load balancer based on the results.\n** Note: Versions after SOFABoot 2.x no longer indirectly introduce spring-boot-starter-web dependencies. To view Health Check results in the browser, you need to introduce Web container dependencies in the project. **\n** Note: In SOFABoot 3.x, the endpoint path has been changed from health/readiness to actuator/readiness**\nReadiness Check extension SOFABoot allows extension in every phase of the Readiness Check. Applications can be extended according to their needs. In version 2.x, the extendable points are as follows:\n   Callback interface Description     org.springframework.context.ApplicationListener If you want to do something before the Readiness Check, you can monitor the SofaBootBeforeHealthCheckEvent event of this listener.   org.springframework.boot.actuate.health.HealthIndicator If you want to add a check item to the Readiness Check in SOFABoot, you can directly extend this interface of Spring Boot. …","date":-62135596800,"description":"","dir":"projects/sofa-boot/health-check/","fuzzywordcount":800,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"a366b25125fa4aedb08a9cef572db1c8","permalink":"/en/projects/sofa-boot/health-check/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/en/projects/sofa-boot/health-check/","summary":"SOFABoot provides Readiness Check to enhance Spring Boot\u0026rsquo;s Health Check. If you need to use the SOFA middleware, you are advised to use the Health Check extension of SOFABoot to launch application examples in a more elegant way.\nEnable Health Check To enable the Health Check feature in SOFABoot, you only need to import the following starter:\n\u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.alipay.sofa\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;healthcheck-sofa-boot-starter\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; Without the Health Check extension, users still can perform Liveness Check with native Spring Boot Actuator directly relying on the HealthIndicator interface.","tags":null,"title":"Health check","type":"projects","url":"/en/projects/sofa-boot/health-check/","wordcount":707},{"author":null,"categories":null,"content":"Prerequisites Before contributing any code, you need to know how to use the Git tools and the GitHub website.\n For the use of Git tools, refer to the official Pro Git book and get familiar with it by reading the first few chapters. For the Git collaboration process, refer to the article Git Workflows.  GitHub Code Contribution Process Submit an issue Regardless of whether you are fixing an ACTS bug or adding an ACTS feature, submit an issue on ACTS GitHub to describe the bug you are going to fix or the feature you intend to add before you submit the code. There are several advantages of doing so:\n There will not be any conflict with other developers or their plans for this project to result in repetitive work. The ACTS maintenance personnel will discuss the issue or new feature you submitted to determine whether the modification is necessary, or if there is any room for improvement or a better solution. Start code development and submit the code after an agreement is reached. This reduces the cost of communication between both parties and the number of rejected pull requests.  Get the source code To modify or add a feature after submitting an issue, click the fork button in the upper left corner to copy the master branch code to your code repository.\nPull a branch All ACTS modifications are performed on branches. After the modification, submit a pull request. The modifications will then be merged into the master branch by the project maintenance personnel after the code review. Therefore, after getting familiar with how to get the source code, you need to:\n  Download the code locally. You may select the git/https mode in this step.\nGit clone https://github.com/your account name/acts.git   Pull a branch to prepare for code modification.\ngit branch add_xxx_feature After the preceding command is executed, your code repository will switch to the corresponding branch. To view the current branch, execute the following command:\ngit branch -a If you want to switch back to the master branch, execute the following command:\ngit checkout -b master If you want to switch back to the branch, execute the following command:\ngit checkout -b \u0026amp;quot;branchName\u0026amp;quot;   Modify the code and submit it locally After a branch is pulled, you can modify the code.\n  After modifying the code, execute the following command to submit all modifications to your local repository:\ngit commit -am \u0026#39;Add xx feature\u0026#39;   When modifying the code, note the following:   Keep the code style consistent.\n  ACTS uses the Maven plug-in to keep the code style consistent. Before submitting the code, be sure to execute the following command locally.\nmvn clean compile   Supplement unit test code.\n  New modifications should have passed existing unit tests.\n  Provide a new unit test to prove that the previous code has bugs and the bugs have been fixed in the new code. Execute the following command to run all tests:\nmvn clean test You can also use the IDE to help run a test.\n  Other do\u0026amp;rsquo;s and …","date":-62135596800,"description":"","dir":"projects/sofa-acts/contributing/","fuzzywordcount":900,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"cd68baede6258921f83665ef0a446f1f","permalink":"/en/projects/sofa-acts/contributing/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/en/projects/sofa-acts/contributing/","summary":"Prerequisites Before contributing any code, you need to know how to use the Git tools and the GitHub website.\n For the use of Git tools, refer to the official Pro Git book and get familiar with it by reading the first few chapters. For the Git collaboration process, refer to the article Git Workflows.  GitHub Code Contribution Process Submit an issue Regardless of whether you are fixing an ACTS bug or adding an ACTS feature, submit an issue on ACTS GitHub to describe the bug you are going to fix or the feature you intend to add before you submit the code.","tags":null,"title":"How to contribute","type":"projects","url":"/en/projects/sofa-acts/contributing/","wordcount":808},{"author":null,"categories":null,"content":" We recommend that you go to the Roadmap topic to learn about the development tasks and plans first.\n Prerequisites Before contributing any code, you need to know how to use the Git tools and the GitHub website.\n For the use of Git tools, refer to the official Pro Git book and get familiar with it by reading the first few chapters. For the Git collaboration process, refer to Git Workflows.  GitHub Code Contribution Process Submitting an issue Regardless of whether you are fixing a SOFADashboard bug or adding a SOFADashboard feature, submit an issue on SOFADashboard GitHub to describe the bug you are going to fix or the feature you intend to add before you submit the code.\nThere are several advantages of doing so:\n There will not be any conflict with other developers or their plans for this project. This avoids repetitive work. The SOFADashboard maintenance personnel will discuss the issue or new feature you submitted to determine whether the modification is necessary, or if there is any room for improvement or a better solution. Start code development and submit the code after an agreement is reached. This reduces the cost of communication between both parties and the number of rejected pull requests.  Get the source code To modify or add a feature after submitting an issue, click the fork button in the upper left corner to copy the master branch code to your code repository.\nPull a branch All SOFADashboard modifications are performed on branches. After the modification, submit a pull request. The modifications will then be merged into the master branch by the project maintenance personnel after the code review. Therefore, after getting familiar with how to get the source code, you need to:\n  Download the code locally. You may select the git/https mode in this step.\ngit clone https://github.com/your account name/sofa-dashboard.git   Pull a branch to prepare for code modification.\ngit branch add_xxx_feature   After the preceding command is executed, your code repository is switched to the corresponding branch. To view the current branch, execute the following command:\ngit branch -a   If you want to switch back to the master branch, execute the following command:\ngit checkout -b master   If you want to switch back to the branch, execute the following command:\ngit checkout -b \u0026amp;#34;branchName\u0026amp;#34;   Modify the code and submit it locally After a branch is pulled, you can modify the code.\nWhen modifying the code, note the following:   Keep the code style consistent.\nSOFADashboard uses the Maven plug-in to keep the code style consistent. Before submitting the code, be sure to execute the following command locally.\nmvn clean compile   Add the unit test code.\n  Modifications should have passed existing unit tests.\n  You should provide a new unit test to prove that the previous code has bugs and the bugshave been fixed in the new code. You can execute the following code to run all tests:\nmvn clean test   You can also use the IDE to help run a test.\n  Other …","date":-62135596800,"description":"","dir":"projects/sofa-dashboard/contribution/","fuzzywordcount":900,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"584584be9c13f2d36c85890dd192368a","permalink":"/en/projects/sofa-dashboard/contribution/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/en/projects/sofa-dashboard/contribution/","summary":"We recommend that you go to the Roadmap topic to learn about the development tasks and plans first.\n Prerequisites Before contributing any code, you need to know how to use the Git tools and the GitHub website.\n For the use of Git tools, refer to the official Pro Git book and get familiar with it by reading the first few chapters. For the Git collaboration process, refer to Git Workflows.","tags":null,"title":"How to contribute","type":"projects","url":"/en/projects/sofa-dashboard/contribution/","wordcount":836},{"author":null,"categories":null,"content":" We recommend that you go to the Roadmap topic to learn about the development tasks and plans first.\n Prerequisites Before contributing any code, you need to know how to use the Git tools and the GitHub website.\n For the use of git tools, refer to official books on gitand get familiarized by reading the first few chapters. For the Git collaboration process, refer to Git Workflows.  GitHub Code Contribution Process Submit an issue Regardless of whether you are fixing a SOFARegistry bug or adding a SOFARegistry feature, submit an issue on the SOFARegistry GitHub address to describe the bug you are going to fix or the feature you intend to add before you submit the code. There are several advantages of doing so:\n There will not be any conflict with other developers or their plans for this project. This avoids repetitive work. The SOFARegistry maintenance personnel will discuss the issue or new feature you submitted to determine whether the modification is necessary, or if there is any room for improvement or a better solution. Start code development and submit the code after an agreement is reached. This reduces the cost of communication between both parties and the number of rejected pull requests.  Get the source code To modify or add a feature after submitting an issue, click the fork button in the upper left corner to copy the master branch code to your code repository.\nPull a branch All SOFARegistry modifications are performed on branches. After the modification, submit a pull request. The modifications will then be merged into the master branch by the project maintenance personnel after the code review.\nTherefore, after getting familiar with how to get the source code, you need to:\n Download the code locally. You may select the git/https mode in this step.  git clone https://github.com/your account name/sofa-registry.git  Pull a branch to prepare for code modification.  git branch add_xxx_feature After the preceding command is executed, your code repository is switched to the corresponding branch. To view the current branch, execute the following command:\ngit branch -a If you want to switch back to the master branch, execute the following command:\ngit checkout -b master If you want to switch back to the branch, execute the following command:\ngit checkout -b \u0026amp;#34;branchName\u0026amp;#34; Modify the code and submit it locally After a branch is pulled, you can modify the code.\nWhen modifying the code, note the following:  Keep the code style consistent.  SOFARegistry uses the Maven plug-in to keep the code style consistent. Before submitting the code, be sure to execute the following command locally.\nmvn clean compile  Add the unit test code. Modifications should have passed existing unit tests. You should provide a new unit test to prove that the previous code has bugs and the bugs have been fixed in the new code. You can execute the following code to run all tests:  mvn clean test You can also use the IDE to help run a test.\nOther do\u0026amp;rsquo;s and …","date":-62135596800,"description":"","dir":"projects/sofa-registry/contributing/","fuzzywordcount":900,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"c08b5945719137833634c111c43a8d9e","permalink":"/en/projects/sofa-registry/contributing/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/en/projects/sofa-registry/contributing/","summary":"We recommend that you go to the Roadmap topic to learn about the development tasks and plans first.\n Prerequisites Before contributing any code, you need to know how to use the Git tools and the GitHub website.\n For the use of git tools, refer to official books on gitand get familiarized by reading the first few chapters. For the Git collaboration process, refer to Git Workflows.  GitHub Code Contribution Process Submit an issue Regardless of whether you are fixing a SOFARegistry bug or adding a SOFARegistry feature, submit an issue on the SOFARegistry GitHub address to describe the bug you are going to fix or the feature you intend to add before you submit the code.","tags":null,"title":"How to contribute","type":"projects","url":"/en/projects/sofa-registry/contributing/","wordcount":839},{"author":null,"categories":null,"content":"How to contribute SOFABolt\u0026amp;rsquo;s code is open source. You can submit your contributions to the code after signing the required agreement.\nContributor License Agreement Alterations and modifications made to SOFABolt\u0026amp;rsquo;s code must comply with the Contributor License Agreement.\nPrerequisites Before contributing any code, you need to know how to use the Git tool and the GitHub website.\nFor the use of Git tools, refer to the official Pro Git book and get familiar with the tools by reading the first few chapters.\nFor the Git collaboration process, refer to Git Workflows.\nGitHub Code Contribution Process Submit an issue Regardless of whether you are fixing a Bolt bug or adding a Bolt feature, submit an issue on the Bolt GitHub address to describe the bug you are going to fix or the feature you intend to add before you submit the code. There are several advantages of doing so:\n There will not be any conflict with other developers or their plans for this project. This avoids repetitive work. The Bolt maintenance personnel will discuss the issue or new feature you submitted to determine whether the modification is necessary, or if there is any room for improvement or a better solution. Start developing and submitting code after agreement to reduce the cost of communication between both parties as well as the number of rejected pull requests.  Get the source code To modify or add a feature after submitting an issue, click the fork button in the upper left corner to copy the Bolt\u0026amp;rsquo;s master branch code to your code repository.\nPull a branch All Bolt modifications are performed on branches. After the modification, submit a pull request. The modifications will then be merged into the master branch by the project maintenance personnel after the code review. Therefore, after getting familiar with the getting source code step, you need to:\n Download the code locally. You may select the git/https mode in this step.  git clone https://github.com/sofastack/sofa-bolt.git  Pull a branch to prepare for code modification.  git branch add_xxx_feature  After the preceding command is executed, your code repository is switched to the corresponding branch. To view the current branch, execute the following command:  git branch -a  If you want to switch back to the master branch, execute the following command:  git checkout -b master  If you want to switch back to your branch, execute the following command:  git checkout -b \u0026amp;#34;branchName\u0026amp;#34;  If you want to directly pull a branch from GitHub, execute the following command:  git clone -b branchname https://xxx.git Modify the code and submit it locally After a branch is pulled, you can modify the code.\nWhen modifying the code, note the following:  Keep the code style consistent. Bolt uses the Maven plug-in to keep the code style consistent. Before submitting the code, be sure to execute the following command locally.  mvn clean package  Add the unit test code. Modifications should have passed existing unit tests. …","date":-62135596800,"description":"","dir":"projects/sofa-bolt/sofa-bolt-contribution/","fuzzywordcount":1200,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"c044ad534cf99e4d6d400113b490f816","permalink":"/en/projects/sofa-bolt/sofa-bolt-contribution/","publishdate":"0001-01-01T00:00:00Z","readingtime":6,"relpermalink":"/en/projects/sofa-bolt/sofa-bolt-contribution/","summary":"How to contribute SOFABolt\u0026rsquo;s code is open source. You can submit your contributions to the code after signing the required agreement.\nContributor License Agreement Alterations and modifications made to SOFABolt\u0026rsquo;s code must comply with the Contributor License Agreement.\nPrerequisites Before contributing any code, you need to know how to use the Git tool and the GitHub website.\nFor the use of Git tools, refer to the official Pro Git book and get familiar with the tools by reading the first few chapters.","tags":null,"title":"How to contribute to SOFABolt","type":"projects","url":"/en/projects/sofa-bolt/sofa-bolt-contribution/","wordcount":1140},{"author":null,"categories":null,"content":"Prerequisites Before contributing any code, you need to know how to use the Git tools and the GitHub website.\n For the use of Git tools, refer to the official Pro Git book and get familiar with it by reading the first few chapters. For the Git collaboration process, refer to Git Workflows.  GitHub Code Contribution Process Submit an issue Regardless of whether you are fixing a SOFAJRaft bug or adding a SOFAJRaft feature, submit an issue on the SOFAJRaft GitHub to describe the bug you are going to fix or the feature you intend to add before you submit the code. There are several advantages of doing so:\n There will not be any conflict with other developers or their plans for this project. This avoids repetitive work. The SOFAJRaft maintenance personnel will discuss the issue or new feature you submitted to determine whether the modification is necessary, or if there is any room for improvement or a better solution. Start code development and submit the code after an agreement is reached. This reduces the cost of communication between both parties and the number of rejected pull requests.  Get the source code To modify or add a feature after submitting an issue, click the fork button in the upper left corner to copy the master branch code to your code repository.\nPull a branch We recommend that you first read the SOFAJRaft Branch management policy.\nAll SOFAJRaft modifications are performed on branches. After the modification, submit a pull request. The modifications will then be merged into the master branch by the project maintenance personnel after the code review. Therefore, after getting familiar with how to get the source code, you need to:\n  Download the code locally. You may select the git/https mode in this step.\ngit clone https://github.com/your account name/sofa-jraft   Pull a branch to prepare for code modification.\ngit branch add_xxx_feature   After the preceding command is executed, your code repository is switched to the corresponding branch. To view the current branch, execute the following command:\ngit branch -a   If you want to switch back to the master branch, execute the following command:\ngit checkout -b master   If you want to switch back to the branch, execute the following command:\ngit checkout -b \u0026amp;#34;branchName\u0026amp;#34;   Modify the code and submit it locally After a branch is pulled, you can modify the code.\nWhen modifying the code, note the following:   Keep the code style consistent. SOFAJRaft uses the Maven plug-in to keep the code style consistent. Before submitting the code, be sure to execute the following command locally.\nmvn clean compile   Add the unit test code.\n  New modifications should have passed existing unit tests.\n  Provide a new unit test to prove that the previous code has bugs and the bugs have been fixed in the new code. Execute the following command to run all tests:\nmvn clean test You can also use the IDE to help execute a command.\n  Other do\u0026amp;rsquo;s and don\u0026amp;rsquo;ts  Retain the original style of the code …","date":-62135596800,"description":"","dir":"projects/sofa-jraft/how-to-contribute-code-to-sofajraft/","fuzzywordcount":900,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"99034715298f73cd835672b872141609","permalink":"/en/projects/sofa-jraft/how-to-contribute-code-to-sofajraft/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/en/projects/sofa-jraft/how-to-contribute-code-to-sofajraft/","summary":"Prerequisites Before contributing any code, you need to know how to use the Git tools and the GitHub website.\n For the use of Git tools, refer to the official Pro Git book and get familiar with it by reading the first few chapters. For the Git collaboration process, refer to Git Workflows.  GitHub Code Contribution Process Submit an issue Regardless of whether you are fixing a SOFAJRaft bug or adding a SOFAJRaft feature, submit an issue on the SOFAJRaft GitHub to describe the bug you are going to fix or the feature you intend to add before you submit the code.","tags":null,"title":"How to contribute to SOFAJRaft","type":"projects","url":"/en/projects/sofa-jraft/how-to-contribute-code-to-sofajraft/","wordcount":841},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-rpc/http/","fuzzywordcount":100,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"0e92b5faec8584280cc296255f3a4541","permalink":"/en/projects/sofa-rpc/http/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/en/projects/sofa-rpc/http/","summary":"","tags":null,"title":"HTTP","type":"projects","url":"/en/projects/sofa-rpc/http/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-rpc/http-json/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"28abdf6369247346bad670c639a422b8","permalink":"/projects/sofa-rpc/http-json/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-rpc/http-json/","summary":"","tags":null,"title":"Http 协议基本使用","type":"projects","url":"/projects/sofa-rpc/http-json/","wordcount":0},{"author":null,"categories":null,"content":"HttpClient Integration In this document will demonstrate how to use SOFATracer to track of HttpClient, this example [address] (https://github.com/sofastack-guides/sofa-tracer-guides/tree/master/tracer-sample-with-httpclient).\nAssuming you have built a simple Spring Web project based on SOFABoot, Then you can be operated by the following steps:\nIntroduce dependency \u0026amp;lt;!-- SOFATracer dependency --\u0026amp;gt; \u0026amp;lt;dependency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;com.alipay.sofa\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;tracer-sofa-boot-starter\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;/dependency\u0026amp;gt; \u0026amp;lt;!-- HttpClient dependency --\u0026amp;gt; \u0026amp;lt;dependency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;org.apache.httpcomponents\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;httpclient\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;!-- 4.5.X --\u0026amp;gt; \u0026amp;lt;version\u0026amp;gt;4.5.3\u0026amp;lt;/version\u0026amp;gt; \u0026amp;lt;/dependency\u0026amp;gt; \u0026amp;lt;dependency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;org.apache.httpcomponents\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;httpasyncclient\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;!-- 4.X --\u0026amp;gt; \u0026amp;lt;version\u0026amp;gt;4.1.3\u0026amp;lt;/version\u0026amp;gt; \u0026amp;lt;/dependency\u0026amp;gt; Project Configuration Then, add the parameters to be used by SOFATracer under the project\u0026amp;rsquo;s application.properties file, including spring.application.name that indicates the current application name and logging.path that specifies the log output directory.\n# Application Name spring.application.name=HttpClientDemo # logging path logging.path=./logs Add a Controller that provides RESTful service @RestController public class SampleRestController { private final AtomicLong counter = new AtomicLong(0); /** * Request http://localhost:8080/httpclient?name= * @param name name * @return Map of Result */ @RequestMapping(\u0026amp;#34;/httpclient\u0026amp;#34;) public Map\u0026amp;lt;String, Object\u0026amp;gt; greeting(@RequestParam(value = \u0026amp;#34;name\u0026amp;#34;, defaultValue = \u0026amp;#34;httpclient\u0026amp;#34;) String name) { Map\u0026amp;lt;String, Object\u0026amp;gt; map = new HashMap\u0026amp;lt;String, Object\u0026amp;gt;(); map.put(\u0026amp;#34;count\u0026amp;#34;, counter.incrementAndGet()); map.put(\u0026amp;#34;name\u0026amp;#34;, name); return map; } } Construct HttpClient to initiate a call to the RESTful service above The code example is as follows:\n Construct an HttpClient synchronous call instance:  HttpClientBuilder httpClientBuilder = HttpClientBuilder.create(); // SOFATracer SofaTracerHttpClientBuilder.clientBuilder(httpClientBuilder); CloseableHttpClient httpClient = httpClientBuilder.setConnectionManager(connManager).disableAutomaticRetries() .build();  Construct an HttpClient asynchronous call instance:  RequestConfig requestConfig = RequestConfig.custom().setSocketTimeout(6000).setConnectTimeout(6000).setConnectionRequestTimeout(6000).build(); HttpAsyncClientBuilder httpAsyncClientBuilder = HttpAsyncClientBuilder.create(); //tracer SofaTracerHttpClientBuilder.asyncClientBuilder(httpAsyncClientBuilder); CloseableHttpAsyncClient asyncHttpclient = httpAsyncClientBuilder.setDefaultRequestConfig(requestConfig).build(); When you construct the HttpClient via the SofaTracerHttpClientBuilder (clientBuilder method for synchronous call instance, and asyncClientBuilder method for …","date":-62135596800,"description":"","dir":"projects/sofa-tracer/usage-of-httpclient/","fuzzywordcount":500,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"3efb3d0d5bd884665537aa974ec21359","permalink":"/en/projects/sofa-tracer/usage-of-httpclient/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/en/projects/sofa-tracer/usage-of-httpclient/","summary":"HttpClient Integration In this document will demonstrate how to use SOFATracer to track of HttpClient, this example [address] (https://github.com/sofastack-guides/sofa-tracer-guides/tree/master/tracer-sample-with-httpclient).\nAssuming you have built a simple Spring Web project based on SOFABoot, Then you can be operated by the following steps:\nIntroduce dependency \u0026lt;!-- SOFATracer dependency --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.alipay.sofa\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;tracer-sofa-boot-starter\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- HttpClient dependency --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.apache.httpcomponents\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;httpclient\u0026lt;/artifactId\u0026gt; \u0026lt;!-- 4.5.X --\u0026gt; \u0026lt;version\u0026gt;4.5.3\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.apache.httpcomponents\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;httpasyncclient\u0026lt;/artifactId\u0026gt; \u0026lt;!-- 4.X --\u0026gt; \u0026lt;version\u0026gt;4.1.3\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; Project Configuration Then, add the parameters to be used by SOFATracer under the project\u0026rsquo;s application.","tags":null,"title":"HttpClient Integration","type":"projects","url":"/en/projects/sofa-tracer/usage-of-httpclient/","wordcount":499},{"author":null,"categories":null,"content":"HttpClient Log Format After integrating tracer-httpclient-plugin, SOFATracer outputs the link data requested by HttpClient in JSON data by default.\nHttpClient digest log (httpclient-digest.log) The data is output in JSON format. Each key meaning is as follows:\n   Key Meaning     Time log printing time   Local.app Current application name   traceId TraceId   spanId SpanId   Request.url Request URL   Method Request HTTP method   Result.code HTTP call returns status code   req.size.bytes Request body size   resp.size.bytes Response body size   Time.cost.milliseconds Request time (ms)   Current.thread.name Thread name   Remote.app Name of the called application   Baggage Transparently transmitted baggage data    Example:\n{\u0026amp;#34;time\u0026amp;#34;:\u0026amp;#34;2018-09-27 21:58:43.067\u0026amp;#34;,\u0026amp;#34;local.app\u0026amp;#34;:\u0026amp;#34;HttpClientDemo\u0026amp;#34;,\u0026amp;#34;traceId\u0026amp;#34;:\u0026amp;#34;0a0fe8801538056723034100235072\u0026amp;#34;,\u0026amp;#34;spanId\u0026amp;#34;:\u0026amp;#34;0\u0026amp;#34;,\u0026amp;#34;request.url\u0026amp;#34;:\u0026amp;#34;http://localhost:8080/httpclient\u0026amp;#34;,\u0026amp;#34;method\u0026amp;#34;:\u0026amp;#34;GET\u0026amp;#34;,\u0026amp;#34;result.code\u0026amp;#34;:\u0026amp;#34;200\u0026amp;#34;,\u0026amp;#34;req.size.bytes\u0026amp;#34;:0,\u0026amp;#34;resp.size.bytes\u0026amp;#34;:-1,\u0026amp;#34;time.cost.milliseconds\u0026amp;#34;:33,\u0026amp;#34;current.thread.name\u0026amp;#34;:\u0026amp;#34;I/O dispatcher 1\u0026amp;#34;,\u0026amp;#34;remote.app\u0026amp;#34;:\u0026amp;#34;\u0026amp;#34;,\u0026amp;#34;baggage\u0026amp;#34;:\u0026amp;#34;\u0026amp;#34;} Note: The application name can be passed in as a parameter when constructing an HttpClient instance via SofaTracerHttpClientBuilder.\nHttpClient statistical Log (httpclient-stat.log) stat.key is the collection of statistical keywords in this period, which uniquely determines a set of statistical data, including local.app, request.url, and method field.\nExample:\n{\u0026amp;#34;time\u0026amp;#34;:\u0026amp;#34;2018-09-27 21:59:42.233\u0026amp;#34;,\u0026amp;#34;stat.key\u0026amp;#34;:{\u0026amp;#34;request.url\u0026amp;#34;:\u0026amp;#34;http://localhost:8080/httpclient\u0026amp;#34;,\u0026amp;#34;local.app\u0026amp;#34;:\u0026amp;#34;HttpClientDemo\u0026amp;#34;,\u0026amp;#34;method\u0026amp;#34;:\u0026amp;#34;GET\u0026amp;#34;},\u0026amp;#34;count\u0026amp;#34;:2,\u0026amp;#34;total.cost.milliseconds\u0026amp;#34;:562,\u0026amp;#34;success\u0026amp;#34;:\u0026amp;#34;true\u0026amp;#34;,\u0026amp;#34;load.test\u0026amp;#34;:\u0026amp;#34;F\u0026amp;#34;} ","date":-62135596800,"description":"","dir":"projects/sofa-tracer/log-format-httpclient/","fuzzywordcount":200,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"7df3d68ba21f1b2a43c0265fdc4eae3e","permalink":"/en/projects/sofa-tracer/log-format-httpclient/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/en/projects/sofa-tracer/log-format-httpclient/","summary":"HttpClient Log Format After integrating tracer-httpclient-plugin, SOFATracer outputs the link data requested by HttpClient in JSON data by default.\nHttpClient digest log (httpclient-digest.log) The data is output in JSON format. Each key meaning is as follows:\n   Key Meaning     Time log printing time   Local.app Current application name   traceId TraceId   spanId SpanId   Request.url Request URL   Method Request HTTP method   Result.","tags":null,"title":"HttpClient log","type":"projects","url":"/en/projects/sofa-tracer/log-format-httpclient/","wordcount":143},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-tracer/usage-of-httpclient/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"3efb3d0d5bd884665537aa974ec21359","permalink":"/projects/sofa-tracer/usage-of-httpclient/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-tracer/usage-of-httpclient/","summary":"","tags":null,"title":"HttpClient 埋点接入","type":"projects","url":"/projects/sofa-tracer/usage-of-httpclient/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-tracer/log-format-httpclient/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"7df3d68ba21f1b2a43c0265fdc4eae3e","permalink":"/projects/sofa-tracer/log-format-httpclient/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-tracer/log-format-httpclient/","summary":"","tags":null,"title":"HttpClient 日志","type":"projects","url":"/projects/sofa-tracer/log-format-httpclient/","wordcount":0},{"author":null,"categories":null,"content":"SOFARPC is integrated Hystrix provides fuse capability and is currently available in the first preview version. More information about Hystrix can be found in [Hystrix Official Documentation] (https://github.com/Netflix/Hystrix), Hystrix integration capabilities are provided primarily by [ScienJus] (https://github.com/ScienJus), thanks for contribution.\nNext, let\u0026amp;rsquo;s talk about how to experience the fuse capability of Hystrix. The following example uses the SOFARPC 5.5.0 version. More Hystrix configuration and SOFABoot integration usage will be provided in subsequent releases, so stay tuned.\nWork preparation The Hystrix module is not loaded directly as an optional module by default. If you need to use it, you need to actively add the Hystrix maven dependency:\n\u0026amp;lt;dependency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;com.netflix.hystrix\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;hystrix-core\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;version\u0026amp;gt;1.5.12\u0026amp;lt;/version\u0026amp;gt; \u0026amp;lt;/dependency\u0026amp;gt; By explicitly opening Hystrix by configuration, HystrixFilter will be loaded automatically:\n// Open globally RpcConfigs.putValue(HystrixConstants.SOFA_HYSTRIX_ENABLED, true); // Open for a specific Consumer ConsumerConfig\u0026amp;lt;HelloService\u0026amp;gt; consumerConfig = new ConsumerConfig\u0026amp;lt;HelloService\u0026amp;gt;() .setInterfaceId(HelloService.class.getName()) .setParameter(HystrixConstants.SOFA_HYSTRIX_ENABLED, String.valueOf(true)); FallbackFactory The FallbackFactory interface mainly provides the injection capability of the Fallback implementation, which is used to automatically perform the degraded logic when Hystrix executes an exception (throws an exception, timeout, thread pool rejection, and blown).\nDefine the interface Fallback implementation:\npublic class HelloServiceFallback implements HelloService { @Override public String sayHello(String name, int age) { return \u0026amp;#34;fallback \u0026amp;#34; + name + \u0026amp;#34; from server! age: \u0026amp;#34; + age; } } Inject Fallback implementation:\nConsumerConfig\u0026amp;lt;HelloService\u0026amp;gt; consumerConfig = new ConsumerConfig\u0026amp;lt;HelloService\u0026amp;gt;() .setInterfaceId(HelloService.class.getName()) .setParameter(HystrixConstants.SOFA_HYSTRIX_ENABLED, String.valueOf(true)); // You can directly inject Fallback implementation directly using the default FallbackFactory SofaHystrixConfig.registerFallback(consumerConfig, new HelloServiceFallback()); // You can also customize FallbackFactory to directly inject FallbackFactory SofaHystrixConfig.registerFallbackFactory(consumerConfig, new HelloServiceFallbackFactory()); When the server responds with a failure, the client automatically triggers the Fallback logic execution.\nSetterFactory SetterFactory provides Hystrix fine-grained configuration capabilities. SOFARPC has provided the default DefaultSetterFactory to generate the Setter for each caller. If there is a more customized description, it can also be provided for each ConsumerConfig. Customize SetterFactory.\nSofaHystrixConfig.registerSetterFactory(consumerConfig, new CustomSetterFactory()); In the implementation provided …","date":-62135596800,"description":"","dir":"projects/sofa-rpc/fault-hystrix/","fuzzywordcount":400,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"7482dc341bf16dd5671634ffa689604a","permalink":"/en/projects/sofa-rpc/fault-hystrix/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/en/projects/sofa-rpc/fault-hystrix/","summary":"SOFARPC is integrated Hystrix provides fuse capability and is currently available in the first preview version. More information about Hystrix can be found in [Hystrix Official Documentation] (https://github.com/Netflix/Hystrix), Hystrix integration capabilities are provided primarily by [ScienJus] (https://github.com/ScienJus), thanks for contribution.\nNext, let\u0026rsquo;s talk about how to experience the fuse capability of Hystrix. The following example uses the SOFARPC 5.5.0 version. More Hystrix configuration and SOFABoot integration usage will be provided in subsequent releases, so stay tuned.","tags":null,"title":"Hystrix fault tolerance","type":"projects","url":"/en/projects/sofa-rpc/fault-hystrix/","wordcount":337},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-rpc/fault-hystrix/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"7482dc341bf16dd5671634ffa689604a","permalink":"/projects/sofa-rpc/fault-hystrix/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-rpc/fault-hystrix/","summary":"","tags":null,"title":"Hystrix 客户端熔断","type":"projects","url":"/projects/sofa-rpc/fault-hystrix/","wordcount":0},{"author":null,"categories":null,"content":"Installation guide To use Istio in a non-Kubernetes environment, you must complete the following critical tasks first:\n Configure the Istio API server for the Istio control plane. You can also use MemStore to launch Pilot for demonstration purpose. Manually add SOFAMosn to all microservice instances and start in SideCar mode. Make sure that all requests are routed through SOFAMosn.  Set control plane The Istio control plane consists of four main services: Pilot, Mixter, Citadel, and API server.\nAPI server Istio\u0026amp;rsquo;s API server, which is based on Kubernetes API server, provides configuration management and role-based access control. The API server requires an etcd cluster as the underlying persistent storage.\nInstall locally Use the following Docker compose file to install an API server for POC:\nversion: \u0026amp;#39;2\u0026amp;#39; services: etcd: image: quay.io/coreos/etcd:latest networks: default: aliases: - etcd ports: - \u0026amp;#34;4001:4001\u0026amp;#34; - \u0026amp;#34;2380:2380\u0026amp;#34; - \u0026amp;#34;2379:2379\u0026amp;#34; environment: - SERVICE_IGNORE=1 command: [ \u0026amp;#34;/usr/local/bin/etcd\u0026amp;#34;, \u0026amp;#34;-advertise-client-urls=http://0.0.0.0:2379\u0026amp;#34;, \u0026amp;#34;-listen-client-urls=http://0.0.0.0:2379\u0026amp;#34; ] istio-apiserver: image: gcr.io/google_containers/kube-apiserver-amd64:v1.7.3 networks: default: aliases: - apiserver ports: - \u0026amp;#34;8080:8080\u0026amp;#34; privileged: true environment: - SERVICE_IGNORE=1 command: [ \u0026amp;#34;kube-apiserver\u0026amp;#34;, \u0026amp;#34;--etcd-servers\u0026amp;#34;, \u0026amp;#34;http://etcd:2379\u0026amp;#34;, \u0026amp;#34;--service-cluster-ip-range\u0026amp;#34;, \u0026amp;#34;10.99.0.0/16\u0026amp;#34;, \u0026amp;#34;--insecure-port\u0026amp;#34;, \u0026amp;#34;8080\u0026amp;#34;, \u0026amp;#34;-v\u0026amp;#34;, \u0026amp;#34;2\u0026amp;#34;, \u0026amp;#34;--insecure-bind-address\u0026amp;#34;, \u0026amp;#34;0.0.0.0\u0026amp;#34; ] Other control plane components Currently, SOFAMosn hasn\u0026amp;rsquo;t integrated with the components other than Pilot, so you don\u0026amp;rsquo;t need to install Mixer, Citadel and other components.\nAdd SOFAMosn Sidecar to microservice instances Every microservice application instance must have an associated SOFAMosn instance.\n","date":-62135596800,"description":"","dir":"projects/sofa-mesh/pilot-setup-zookeeper-installation/","fuzzywordcount":300,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"4c0bd56673dc8aebef9011a22496392d","permalink":"/en/projects/sofa-mesh/pilot-setup-zookeeper-installation/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/en/projects/sofa-mesh/pilot-setup-zookeeper-installation/","summary":"Installation guide To use Istio in a non-Kubernetes environment, you must complete the following critical tasks first:\n Configure the Istio API server for the Istio control plane. You can also use MemStore to launch Pilot for demonstration purpose. Manually add SOFAMosn to all microservice instances and start in SideCar mode. Make sure that all requests are routed through SOFAMosn.  Set control plane The Istio control plane consists of four main services: Pilot, Mixter, Citadel, and API server.","tags":null,"title":"Installation guide","type":"projects","url":"/en/projects/sofa-mesh/pilot-setup-zookeeper-installation/","wordcount":221},{"author":null,"categories":null,"content":" Project address\n Introduction SOFABoot extends the Health Check of Spring Boot. For detailed information, see SOFABoot Documentation. This sample project is intended to demonstrate how to integrate the Health Check component of SOFABoot during merged deployment. Differences between the Health Check in merged deployment and that of a single SOFABoot application are as follows:\n During static merged deployment, all Biz packages must pass the Health Check before the Ark package can be started normally. When deploying the Biz packages dynamically in Jarslink2.0, all packages must pass the Health Check before successful deployment. In merged deployment, a new check item named multiApplicationHealthChecker will be added when you access Spring Boot\u0026amp;rsquo;s default /health. The item is used to check the health of all Biz packages. Only after all Biz packages pass the Health Check can the merged package pass the Health Check.  Dependency To integrate the Health Check capability of SOFABoot in merged deployment, you need to add the following dependencies:\n\u0026amp;lt;!--health check--\u0026amp;gt; \u0026amp;lt;dependency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;com.alipay.sofa\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;runtime-sofa-boot-starter\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;classifier\u0026amp;gt;ark-plugin\u0026amp;lt;/classifier\u0026amp;gt; \u0026amp;lt;/dependency\u0026amp;gt; \u0026amp;lt;dependency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;com.alipay.sofa\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;runtime-sofa-boot-starter\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;/dependency\u0026amp;gt; \u0026amp;lt;dependency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;com.alipay.sofa\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;healthcheck-sofa-boot-starter\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;exclusions\u0026amp;gt; \u0026amp;lt;exclusion\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;org.springframework.boot\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;spring-boot-starter-web\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;/exclusion\u0026amp;gt; \u0026amp;lt;/exclusions\u0026amp;gt; \u0026amp;lt;/dependency\u0026amp;gt; Note that spring-boot-starter-web is excluded to avoid starting multiple web applications when you introduce the healthcheck-sofa-boot-starter dependency.\nDemo   cd biz-health-check-sample/app-one \u0026amp;amp;\u0026amp;amp; mvn clean package Execute the mvn clean package command in the app-one root directory and package the application into an Ark or Biz package. The file will be exported to the biz-health-check-sample/app-one/target directory.\n  cd biz-health-check-sample/app-two \u0026amp;amp;\u0026amp;amp; mvn clean package Execute the mvn clean package command in the app-two root directory and package the application into an Ark or Biz package. The file will be exported to the biz-health-check-sample/app-two/target directory.\n  Use java -jar to start the Ark package for app-one.\n  After the Ark package has started, visit http://localhost:8080/health in the browser. This is Spring Boot\u0026amp;rsquo;s default Health Check endpoint. A new check item named multiApplicationHealthChecker is added in the results and there is now only one Biz package. The page is displayed as follows: …","date":-62135596800,"description":"","dir":"projects/sofa-boot/sofa-jarslink-jarslink-health-demo/","fuzzywordcount":400,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"99832d969ec54b925c3dca1205b95165","permalink":"/en/projects/sofa-boot/sofa-jarslink-jarslink-health-demo/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/en/projects/sofa-boot/sofa-jarslink-jarslink-health-demo/","summary":"Project address\n Introduction SOFABoot extends the Health Check of Spring Boot. For detailed information, see SOFABoot Documentation. This sample project is intended to demonstrate how to integrate the Health Check component of SOFABoot during merged deployment. Differences between the Health Check in merged deployment and that of a single SOFABoot application are as follows:\n During static merged deployment, all Biz packages must pass the Health Check before the Ark package can be started normally.","tags":null,"title":"Integrate SOFABoot health check","type":"projects","url":"/en/projects/sofa-boot/sofa-jarslink-jarslink-health-demo/","wordcount":386},{"author":null,"categories":null,"content":"Since rpc-sofa-boot-starter version 6.0.1, SOFARPC provide the ability to integrate RESTful service with Swagger easily.\nIf you are using rpc-sofa-boot-starter in SOFABoot or Spring Boot environment and you want to enable Swagger support, first, you need add Swagger dependencies in your pom.xml:\n\u0026amp;lt;dependency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;io.swagger.core.v3\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;swagger-jaxrs2\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;version\u0026amp;gt;2.0.0\u0026amp;lt;/version\u0026amp;gt; \u0026amp;lt;/dependency\u0026amp;gt; \u0026amp;lt;dependency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;com.google.guava\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;guava\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;version\u0026amp;gt;20.0\u0026amp;lt;/version\u0026amp;gt; \u0026amp;lt;/dependency\u0026amp;gt; Then you need add a configuration com.alipay.sofa.rpc.restSwagger=true in application.properties.\nFinally, visit http://localhost:8341/swagger/openapi and you can get all the Swagger OpenAPI information about SOFARPC\u0026amp;rsquo;s RESTful services.\nIf you are not using rpc-sofa-boot-starter or the version of rpc-sofa-boot-starter you depends is smaller then 6.0.1, you can integration SOFARPC RESTful service with Swagger by using the following tutorial.\nCurrently, SOFARPC does not provide the ability to integrate RESTful service with Swagger via one click. The ability will be provided in future versions, but you can refer to this document to integrate RESTful service with Swagger in the existing versions of SOFARPC.\nFirst, you need to add Swagger related dependencies into your application. Since SOFARPC\u0026amp;rsquo;s RESTful protocol is based on the JAXRS, so you just need to add Swagger\u0026amp;rsquo;s JAXRS dependency:\n\u0026amp;lt;dependency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;io.swagger.core.v3\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;swagger-jaxrs2\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;version\u0026amp;gt;2.0.0\u0026amp;lt;/version\u0026amp;gt; \u0026amp;lt;/dependency\u0026amp;gt; \u0026amp;lt;dependency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;com.google.guava\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;guava\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;version\u0026amp;gt;20.0\u0026amp;lt;/version\u0026amp;gt; \u0026amp;lt;/dependency\u0026amp;gt; The 20.0 version of Guava was added to resolve Guava version conflict.\nAdd a Swagger RESTful service To enable Swagger to expose SOFARPC\u0026amp;rsquo;s RESTful services through Swagger OpenAPI, we can provide Swagger\u0026amp;rsquo;s OpenAPI services through SOFARPC\u0026amp;rsquo;s RESTful services. First, you need to create a new interface:\n@Path(\u0026amp;#34;swagger\u0026amp;#34;) public interface OpenApiService { @GET @Path(\u0026amp;#34;openapi\u0026amp;#34;) @Produces(\u0026amp;#34;application/json\u0026amp;#34;) String openApi(); } Then provide an implementation class and publish it as a RESTful service of SOFARPC:\n@Service @SofaService(bindings = {@SofaServiceBinding(bindingType = \u0026amp;#34;rest\u0026amp;#34;)}, interfaceType = OpenApiService.class) public class OpenApiServiceImpl implements OpenApiService, InitializingBean { private OpenAPI openAPI; @Override public String openApi() { return Json.pretty(openAPI); } @Override public void afterPropertiesSet() { List\u0026amp;lt;Package\u0026amp;gt; resources = new ArrayList\u0026amp;lt;\u0026amp;gt;(); Resources.add(this.getClass().getPackage()); // Scan the package of the current class, or scan the packages of other SOFARPC RESTful service interfaces. …","date":-62135596800,"description":"","dir":"projects/sofa-rpc/restful-swagger/","fuzzywordcount":500,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"d068767fe0dd2922eecef69736684be8","permalink":"/en/projects/sofa-rpc/restful-swagger/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/en/projects/sofa-rpc/restful-swagger/","summary":"Since rpc-sofa-boot-starter version 6.0.1, SOFARPC provide the ability to integrate RESTful service with Swagger easily.\nIf you are using rpc-sofa-boot-starter in SOFABoot or Spring Boot environment and you want to enable Swagger support, first, you need add Swagger dependencies in your pom.xml:\n\u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;io.swagger.core.v3\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;swagger-jaxrs2\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.0.0\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.google.guava\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;guava\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;20.0\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; Then you need add a configuration com.alipay.sofa.rpc.restSwagger=true in application.properties.\nFinally, visit http://localhost:8341/swagger/openapi and you can get all the Swagger OpenAPI information about SOFARPC\u0026rsquo;s RESTful services.","tags":null,"title":"Integrate with Swagger","type":"projects","url":"/en/projects/sofa-rpc/restful-swagger/","wordcount":462},{"author":null,"categories":null,"content":"Jarslink2.0 supports receiving dynamic commands at runtime to manage the Biz package lifecycle. Before starting an Ark package that has introduced the Jarslink2.0 plugin, you can send commands through the telnet connection protocol with port 1234. For example, execute telnet ip 1234 to enter the Jarslink2.0 command interface and type \u0026amp;ldquo;help\u0026amp;rdquo; in the interface to obtain all relevant command manuals. Next we will introduce the syntax of each Jarslink2.0 command.\n  Install the Biz package: The installation command is used to dynamically deploy of applications. Its syntax is install -b $bizFile. You can replace -b with -biz. All Jarslink2.0 commands must contain either a –b or –biz. The \u0026amp;ldquo;install\u0026amp;rdquo; command has only one parameter, the Biz package URI, which can either be the path of a local file or the link to a remote file, for example, install -b file:///Users/qilong.zql/sample-ark-biz.jar.\n  Uninstall the Biz package: The uninstall command is used to close the application. The services released by the application and the resources that it occupied will be destroyed. Command syntax: uninstall -b -n $bizName -v $bizVersion. The command must specify the name and version number of the Biz package by -n and -v, which can be replaced with -name and -version. The name and version number of a Biz package are determined at the time of packaging. For detailed information, see Application Packaging.\n  Switch the Biz package: The switch command is used for the Biz package hot update to ensure service continuity. Jarslink2.0 allows loading different versions of Biz packages with the same name at runtime. However, only one Biz package can deliver services at one time. To upgrade the loaded Biz package that is delivering services at runtime, execute the installation command to install a later version of the Biz package. After installation, the newer version is inactive because the older version is providing services. Execute the switch command to switch to the newer version without suspending the services that the application is delivering. This is called a hot update. The command syntax is switch -b -n $bizName -v $bizVersion. Parameters are the same as the above.\n  Query the Biz package: The query command is used to query the Biz packages installed in JVM and their status. The command syntax is check -b -n $bizName -v $bizVersion, where the Biz package\u0026amp;rsquo;s name and version number are optional parameters. If you do not specify the name and the version number, information for all Biz packages will be returned. If you only specify the name, information for all versions with the specified name will be returned.\n  ","date":-62135596800,"description":"","dir":"projects/sofa-boot/sofa-jarslink-jarslink-instruction/","fuzzywordcount":500,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"c7e69fe8035b59c0e191538c8ef3da18","permalink":"/en/projects/sofa-boot/sofa-jarslink-jarslink-instruction/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/en/projects/sofa-boot/sofa-jarslink-jarslink-instruction/","summary":"Jarslink2.0 supports receiving dynamic commands at runtime to manage the Biz package lifecycle. Before starting an Ark package that has introduced the Jarslink2.0 plugin, you can send commands through the telnet connection protocol with port 1234. For example, execute telnet ip 1234 to enter the Jarslink2.0 command interface and type \u0026ldquo;help\u0026rdquo; in the interface to obtain all relevant command manuals. Next we will introduce the syntax of each Jarslink2.0 command.","tags":null,"title":"Interactive instruction","type":"projects","url":"/en/projects/sofa-boot/sofa-jarslink-jarslink-instruction/","wordcount":424},{"author":null,"categories":null,"content":"Introduction Jarslink2.0 is a functional SOFABoot plugin developed based on SOFAArk. It manages the merged deployment of multiple applications on top of the SOFAArk container, with the following features:\n It supports runtime dynamic installation and uninstallation of applications. It supports runtime application hot replacement capability to ensure service continuity. For cross-application communication, it supports the JVM services publish and reference. Cross-application communication can base on RPC framework or internal JVM services. It supports application Health Check.  Background At Ant Financial, it is common to deploy multiple applications on top of the same JVM. Main advantages of this approach are as follows:\n  Merged deployment of unrelated applications: Some applications have no service dependencies on each other when they are deployed independently and their volume of business is small, so it would be a waste of resources to start the Java Virtual Machine just for them. Merged deployment of these applications can save resources.\n  Merged deployment of related applications: Some applications have service dependencies between them. When deployed independently, RPC calls are used between applications. Despite the high stability of the distributed architecture, there are still delays caused by network jitter. By merged deployment of these applications, JVM internal calls will replace RPC calls, which reduces the call overhead.\n  Not only is there merged deployment between applications, but the near-client package has the same appeal.\nThe near-client package is a three-party component that provides a series of public services, normally introduced by the application as a dependency. This development mode is likely to cause two problems:\n  The three-party dependency that is introduced by the near-client package conflicts with the dependency of the application itself, so an isolated deployment is expected.\n  Since the near-client package is introduced by the application as a dependency, any upgrade of the near-client package will require upgrade of the application as well. However, as a common functional component, many business applications rely on the near-client package as a dependency, which entails a huge amount of transformation. Consequently, a dynamic upgrade of the near-client package is expected.\n  In addition to merged deployment, many Ant Financial business scenarios require hot deployment of modules, that is, when the application is running, a specific module needs to be dynamically replaced without affecting the normal running of other modules.\nJarslink2.0 is designed to solve such problems. It is an Ark Plugin developed based on SOFAArk and used to manage the merged deployment of multiple applications. Before getting to know Jarslink2.0, you need to understand the SOFAArk framework. For detailed information of SOFAArk, visit the link.\nPrinciple Jarslink2.0 is an Ark Plugin developed based on SOFAArk. Assuming that you have …","date":-62135596800,"description":"","dir":"projects/sofa-boot/sofa-jarslink-jarslink-readme/","fuzzywordcount":700,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"48a4bc23f10f1ecca3960aecfd0a77d5","permalink":"/en/projects/sofa-boot/sofa-jarslink-jarslink-readme/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/en/projects/sofa-boot/sofa-jarslink-jarslink-readme/","summary":"Introduction Jarslink2.0 is a functional SOFABoot plugin developed based on SOFAArk. It manages the merged deployment of multiple applications on top of the SOFAArk container, with the following features:\n It supports runtime dynamic installation and uninstallation of applications. It supports runtime application hot replacement capability to ensure service continuity. For cross-application communication, it supports the JVM services publish and reference. Cross-application communication can base on RPC framework or internal JVM services.","tags":null,"title":"Introduction to Jarslink","type":"projects","url":"/en/projects/sofa-boot/sofa-jarslink-jarslink-readme/","wordcount":647},{"author":null,"categories":null,"content":"Pilot introduction The SOFAMesh project forked the Istio project to enhance Pilot\u0026amp;rsquo;s capabilities. Currently, the ongoing enhancements are focused on the following three areas:\n Support ZooKeeper as a registry center, and support SOFA, DUBBO and other microservice frameworks using ZooKeeper as a registry center. Support the common protocol framework. Use a common protocol, and support multiple protocols simultaneously based on Kubernetes DNS. Add register agent to support the container models of SOFA, Dubbo and HSF. Namely, a single application can register multiple service instances.  ","date":-62135596800,"description":"","dir":"projects/sofa-mesh/pilot-readme/","fuzzywordcount":100,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"7b098e394986596d8fb01e1fe2120829","permalink":"/en/projects/sofa-mesh/pilot-readme/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/en/projects/sofa-mesh/pilot-readme/","summary":"Pilot introduction The SOFAMesh project forked the Istio project to enhance Pilot\u0026rsquo;s capabilities. Currently, the ongoing enhancements are focused on the following three areas:\n Support ZooKeeper as a registry center, and support SOFA, DUBBO and other microservice frameworks using ZooKeeper as a registry center. Support the common protocol framework. Use a common protocol, and support multiple protocols simultaneously based on Kubernetes DNS. Add register agent to support the container models of SOFA, Dubbo and HSF.","tags":null,"title":"Introduction to Pilot","type":"projects","url":"/en/projects/sofa-mesh/pilot-readme/","wordcount":84},{"author":null,"categories":null,"content":"﻿## Product description SOFAArk is a light-weight，java based classloader isolation framework open sourced by Ant Financial. Based on Fat Jar technology, the container can pack simple single-module Java applications or Spring Boot applications into a self-contained executable Fat Jar, known as an Ark package. When the java -jar command is used to start an Ark package embedded with the SOFAArk class isolation container, the SOFAArk container will start, and it then starts each Ark plugin and application.\nBackground In Java world, dependency is always a problem, and can cause various errors, such as LinkageError, NoSuchMethodError etc. There are many ways to solve the dependency problems, the Spring Boot\u0026amp;rsquo;s way is using a dependency management to manage all the dependencies, make sure that all the dependencies in the dependency management will not conflict and can work pretty well. This is quite a simple and efficient way, it can cover most scenario, but there is some exceptions.\nFor example, there is a project that need protobuf version 2 and protobuf version 3, and because protobuf version 3 is not compatible with version 2, so the project can not simply upgrade the protobuf to version 3 to solve the problem. There is same problem for hessian version 3 and version 4.\nTo cover those exceptions, we need to introduce a classloader isolation way, make different version of a framework loaded by different classloader. There are many framework that can do classloader isolation, perhaps the most famous one is OSGi, but OSGi classloader schema is too complex, beside classloader isolation, it also has ability to do hot deploy and a lot of other functionalities that we actually don\u0026amp;rsquo;t want.\nSo this is the origin of SOFAArk, it\u0026amp;rsquo;s goal is to use a light-weight classloader isolation mechanism to solve the problem that Spring Boot did not solve. And just a remind that SOFAArk is not bind to Spring Boot, actually it is a more general classloader isolation framework that can be used with any other frameworks too.\nHow SOFAArk Works There are three concepts in SOFAArk: Ark Container, Ark-Plugin and Ark-Biz; they are organized as what the following graph shows:\nFirst of all, we explain what roles these concepts play;\n  Ark Container: It\u0026amp;rsquo;s the runtime manager of total framework; it will startup in the first place, then it resolves Ark Plugin and Ark Biz in classpath and deploys them.\n  Ark Plugin: A fat jar packaged by sofa-ark-plugin-maven-plugin, generally it would bring with a class-index configuration which describes what class would be exported and imported. Ark Plugin can resolve classes from each other.\n  Ark Biz: A fat jar packaged by sofa-ark-maven-plugin, it mainly contains all staff what a project need in runtime. Ark Biz can resolve classes form Ark Plugin, but not inverse.\n  In runtime, Ark Container would automatically recognize Ark-Plugin and Ark-Biz in classpath, and load them with the independent classloader. According to …","date":-62135596800,"description":"","dir":"projects/sofa-boot/sofa-ark-readme/","fuzzywordcount":700,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"cdb6729fc7a63954b7559c8ea319f550","permalink":"/en/projects/sofa-boot/sofa-ark-readme/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/en/projects/sofa-boot/sofa-ark-readme/","summary":"﻿## Product description SOFAArk is a light-weight，java based classloader isolation framework open sourced by Ant Financial. Based on Fat Jar technology, the container can pack simple single-module Java applications or Spring Boot applications into a self-contained executable Fat Jar, known as an Ark package. When the java -jar command is used to start an Ark package embedded with the SOFAArk class isolation container, the SOFAArk container will start, and it then starts each Ark plugin and application.","tags":null,"title":"Introduction to SOFAArk","type":"projects","url":"/en/projects/sofa-boot/sofa-ark-readme/","wordcount":642},{"author":null,"categories":null,"content":"   MOSN, the short name of Modular Observable Smart Network, is a powerful proxy acting as Service Mesh\u0026amp;rsquo;s data plane like Envoy but written in Go. MOSN supports Envoy and Istio\u0026amp;rsquo;s APIs and can be integrated with Istio, so we use MOSN instead of Envoy in SOFAMesh. The initial version of MOSN was jointly contributed by Ant Financial and UC Business Unit of Alibaba, and we look forward to the community to participate in the follow-up development and build an open source excellent project together.\nCore competence  Integrated with Istio  Integrated with Istio 1.0 and V4 APIs to run based on full dynamic resource configuration   Core forwarding  Self-contained Web server Support TCP proxy Support TProxy mode   Multi-protocol  Support HTTP/1.1 and HTTP/2 Support SOFARPC Support Dubbo protocol (under development)   Core routing  Support Virtual Host routing Support Headers/URL/Prefix routing Support Host Metadata-based Subset routing Support retry   Backend Management and load balancing  Support connection pool Support throttling Support active backend health check Support load balancing strategies, such as Random and RR Support Host Metadata-based Subset load balancing strategy   Observability  Observe network data Observing protocol data   TLS  Support HTTP/1.1 on TLS Support HTTP/2.0 on TLS Support SOFARPC on TLS   Process management + Support smooth reload + Support smooth upgrade Extension capability + Support custom private protocols + Support adding custom extensions in protocol at the TCP IO layer  ","date":-62135596800,"description":"","dir":"projects/sofa-mesh/sofa-mosn-readme/","fuzzywordcount":300,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"11219bb3b9689ec5f328b8281bd62a95","permalink":"/en/projects/sofa-mesh/sofa-mosn-readme/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/en/projects/sofa-mesh/sofa-mosn-readme/","summary":"MOSN, the short name of Modular Observable Smart Network, is a powerful proxy acting as Service Mesh\u0026rsquo;s data plane like Envoy but written in Go. MOSN supports Envoy and Istio\u0026rsquo;s APIs and can be integrated with Istio, so we use MOSN instead of Envoy in SOFAMesh. The initial version of MOSN was jointly contributed by Ant Financial and UC Business Unit of Alibaba, and we look forward to the community to participate in the follow-up development and build an open source excellent project together.","tags":null,"title":"Introduction to SOFAMosn","type":"projects","url":"/en/projects/sofa-mesh/sofa-mosn-readme/","wordcount":223},{"author":null,"categories":null,"content":"1. Create a Maven project and import the dependency \u0026amp;lt;dependency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;com.alipay.sofa\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;registry-client-all\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;version\u0026amp;gt;${registry.client.version}\u0026amp;lt;/version\u0026amp;gt; \u0026amp;lt;/dependency\u0026amp;gt; 2. Create the SOFARegistry client instance The key code for creating the SOFARegistry client instance is as follows:\nRegistryClientConfig config = DefaultRegistryClientConfigBuilder.start().setRegistryEndpoint(\u0026amp;#34;127.0.0.1\u0026amp;#34;).setRegistryEndpointPort(9603).build(); DefaultRegistryClient registryClient = new DefaultRegistryClient(config); registryClient.init(); Properties related to SOFARegistry are specified by the DefaultRegistryClientConfigBuilder class, which provides the following key properties:\npublic class DefaultRegistryClientConfigBuilder { private String instanceId; private String zone = DEFAULT_ZONE; private String registryEndpoint; private int registryEndpointPort = 9603; private String dataCenter = DEFAULT_DATA_CENTER; private String appName; private int connectTimeout = 3000; private int socketTimeout = 3000; private int invokeTimeout = 1000; private int recheckInterval = 500; private int observerThreadCoreSize = 5; private int observerThreadMaxSize = 10; private int observerThreadQueueLength = 1000; private int syncConfigRetryInterval = 30000; }    Property Type Description     instanceId String The ID of the instance. Default value: DEFAULT_INSTANCE_ID. The same instance ID must be used for data publishing and subscription. The unique data identifier consists of dataId+group+instanceId.   zone String The zone where the instance is located. Default value: DEFAULT_ZONE.   registryEndpoint String The endpoint of any session node of the servers.   registryEndpointPort Integer The session.server.httpServerPort configured for a session node. Default value: 9603.   dataCenter String The data center of SOFARegistry. Default value: DefaultDataCenter.   appName String The name of the app that accesses SOFARegistry.   connectTimeout Integer Specifies the timeout for establishing a connection with a server. Default value: 3000 ms.   socketTimeout Integer Specifies the timeout for accessing the servers\u0026#39; REST API. Default value: 3000 ms.   invokeTimeout Integer Specifies the timeout for calling services on the servers. Default value: 1000 ms.   recheckInterval Integer Specifies the interval for checking the task queue. Default value: 500 ms.   observerThreadCoreSize Integer Specifies the number of core threads in the thread pool that process data pushed from the servers. Default value: 5.   observerThreadMaxSize Integer Specifies the maximum number of threads in the thread pool that process data pushed from the servers. Default value: 10.   observerThreadQueueLength Integer Specifies the maximum thread queue length of the thread pool that processes data pushed from the servers. Default value: 1000.   syncConfigRetryInterval Integer Specifies the retry interval to synchronize the registry …","date":-62135596800,"description":"","dir":"projects/sofa-registry/java-sdk/","fuzzywordcount":900,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"32cff5cc5d89ffa85b12c207a1c0c6f3","permalink":"/en/projects/sofa-registry/java-sdk/","publishdate":"0001-01-01T00:00:00Z","readingtime":5,"relpermalink":"/en/projects/sofa-registry/java-sdk/","summary":"1. Create a Maven project and import the dependency \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.alipay.sofa\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;registry-client-all\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${registry.client.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; 2. Create the SOFARegistry client instance The key code for creating the SOFARegistry client instance is as follows:\nRegistryClientConfig config = DefaultRegistryClientConfigBuilder.start().setRegistryEndpoint(\u0026#34;127.0.0.1\u0026#34;).setRegistryEndpointPort(9603).build(); DefaultRegistryClient registryClient = new DefaultRegistryClient(config); registryClient.init(); Properties related to SOFARegistry are specified by the DefaultRegistryClientConfigBuilder class, which provides the following key properties:\npublic class DefaultRegistryClientConfigBuilder { private String instanceId; private String zone = DEFAULT_ZONE; private String registryEndpoint; private int registryEndpointPort = 9603; private String dataCenter = DEFAULT_DATA_CENTER; private String appName; private int connectTimeout = 3000; private int socketTimeout = 3000; private int invokeTimeout = 1000; private int recheckInterval = 500; private int observerThreadCoreSize = 5; private int observerThreadMaxSize = 10; private int observerThreadQueueLength = 1000; private int syncConfigRetryInterval = 30000; }    Property Type Description     instanceId String The ID of the instance.","tags":null,"title":"Java SDK","type":"projects","url":"/en/projects/sofa-registry/java-sdk/","wordcount":890},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-registry/java-sdk/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"32cff5cc5d89ffa85b12c207a1c0c6f3","permalink":"/projects/sofa-registry/java-sdk/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-registry/java-sdk/","summary":"","tags":null,"title":"Java SDK","type":"projects","url":"/projects/sofa-registry/java-sdk/","wordcount":0},{"author":null,"categories":null,"content":"In addition to hundreds of unit tests and some chaos tests, SOFAJRaft also uses a distributed verification and fault injection testing framework Jepsen to simulate many cases, and has passed all these tests:\n Randomized partitioning with two partitions: a big one and a small one Randomly adding and removing nodes Randomly stopping and starting nodes Randomly kill -9 and starting nodes Randomly dividing a cluster into two groups, with one node connection the two to simulate network partitioning Randomly dividing a cluster into different majority groups  sofa-jraft-jepsen project address\n","date":-62135596800,"description":"","dir":"projects/sofa-jraft/jepson-test/","fuzzywordcount":100,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"c60bc5083fdf888f6eef5b344b1ad157","permalink":"/en/projects/sofa-jraft/jepson-test/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/en/projects/sofa-jraft/jepson-test/","summary":"In addition to hundreds of unit tests and some chaos tests, SOFAJRaft also uses a distributed verification and fault injection testing framework Jepsen to simulate many cases, and has passed all these tests:\n Randomized partitioning with two partitions: a big one and a small one Randomly adding and removing nodes Randomly stopping and starting nodes Randomly kill -9 and starting nodes Randomly dividing a cluster into two groups, with one node connection the two to simulate network partitioning Randomly dividing a cluster into different majority groups  sofa-jraft-jepsen project address","tags":null,"title":"Jepsen tests","type":"projects","url":"/en/projects/sofa-jraft/jepson-test/","wordcount":89},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-jraft/jepson-test/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"c60bc5083fdf888f6eef5b344b1ad157","permalink":"/projects/sofa-jraft/jepson-test/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-jraft/jepson-test/","summary":"","tags":null,"title":"Jepsen 验证","type":"projects","url":"/projects/sofa-jraft/jepson-test/","wordcount":0},{"author":null,"categories":null,"content":"Introduction to RheaKV RheaKV is a lightweight, distributed, and embedded KV storage library, which is included in the JRaft project as a submodule.\nFeatures\n Embedded: RheaKV is embedded in applications in the form of Jar files. Strong consistency: RheaKV ensures data reliability and consistency based on the multi-raft distributed consensus protocol. Self-driven (not fully implemented at present): RheaKV supports automatic diagnosis, optimization, decision making, and recovery. Monitorable: RheaKV automatically reports meta information and state information by node to the PD. Basic APIs: get, put, and delete; cross-region APIs: scan, batch put, and distributed lock.  Architecture design Terms and definitions  PD: The global central master node that is responsible for scheduling the entire cluster. A PD server can manage multiple clusters, with each of them isolated by clusterId. The PD server requires separate deployment. Actually, many scenarios do not need automatic cluster management, and RheaKV does not support PD. Store: A physical storage node within a cluster. A store may contain one or more regions. Region: The minimal KV data unit. Each region can be understood as a database partition or database shard, and has a left closed and right open interval [startKey, endKey).  Storage design  The storage layer adopts a pluggable design and supports both MemoryDB and RocksDB currently:  MemoryDB is implemented based on ConcurrentSkipListMap and provides better performance. However, its independent storage capacity is restricted by the memory. RocksDB is suitable for scenarios with large data volumes, because its storage capacity is only restricted by the disk.   Strong data consistency is ensured. RheaKV synchronizes data to other replicas with the help of JRaft, and each data change is recorded as a Raft log entry. The log replication feature of Raft ensures all data is securely and reliably synchronized to all nodes within the same Raft group.  Scenarios  Lightweight state/meta information storage and cluster synchronization Distributed lock service  API description Generally, RheaKV APIs are divided into two types: synchronous APIs and asynchronous APIs. Methods whose names start with letter b (block) are synchronous blocking APIs, and the rest are asynchronous APIs. All asynchronous APIs return the same CompletableFuture parameter. The read method may contain another important parameter, that is readOnlySafe. When this parameter is set to true, linearizable read is supported. Read methods that do not contain this parameter provide linearizable read by default.\nget CompletableFuture\u0026amp;lt;byte[]\u0026amp;gt; get(final byte[] key); CompletableFuture\u0026amp;lt;byte[]\u0026amp;gt; get(final String key); CompletableFuture\u0026amp;lt;byte[]\u0026amp;gt; get(final byte[] key, final boolean readOnlySafe); CompletableFuture\u0026amp;lt;byte[]\u0026amp;gt; get(final String key, final boolean readOnlySafe); byte[] bGet(final byte[] key); byte[] bGet(final String key); byte[] bGet(final byte[] key, final boolean …","date":-62135596800,"description":"","dir":"projects/sofa-jraft/jraft-rheakv-user-guide/","fuzzywordcount":4100,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"e6fa7125455982961214dfe82245be4d","permalink":"/en/projects/sofa-jraft/jraft-rheakv-user-guide/","publishdate":"0001-01-01T00:00:00Z","readingtime":20,"relpermalink":"/en/projects/sofa-jraft/jraft-rheakv-user-guide/","summary":"Introduction to RheaKV RheaKV is a lightweight, distributed, and embedded KV storage library, which is included in the JRaft project as a submodule.\nFeatures\n Embedded: RheaKV is embedded in applications in the form of Jar files. Strong consistency: RheaKV ensures data reliability and consistency based on the multi-raft distributed consensus protocol. Self-driven (not fully implemented at present): RheaKV supports automatic diagnosis, optimization, decision making, and recovery. Monitorable: RheaKV automatically reports meta information and state information by node to the PD.","tags":null,"title":"JRaft RheaKV user guide","type":"projects","url":"/en/projects/sofa-jraft/jraft-rheakv-user-guide/","wordcount":4088},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-jraft/jraft-rheakv-user-guide/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"e6fa7125455982961214dfe82245be4d","permalink":"/projects/sofa-jraft/jraft-rheakv-user-guide/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-jraft/jraft-rheakv-user-guide/","summary":"","tags":null,"title":"JRaft RheaKV 用户指南","type":"projects","url":"/projects/sofa-jraft/jraft-rheakv-user-guide/","wordcount":0},{"author":null,"categories":null,"content":"0. Basic concepts  Every request submitted by log index to a Raft group is serialized into a log entry. Each log entry has an ID, which monotonically increases within the Raft group, and the log entries are replicated to every Raft node in the group. Term is a long-type number that monotonically increases within the Raft group. You can simply take it as the number of votes. The term of an elected leader is called the leader term. Before this leader steps down, log entries submitted during this period have the same term.  1. Configuration and supporting classes This topic mainly describes the configuration and utility methods and classes. The core objects are:\n Endpoint, which refers to a service address PeerId, which refers to ID of a Raft node Configuration, which refers to the configuration of a Raft group, or a node list in other words.  1.1 Endpoint Endpoint refers to a service address, including the IP address and the port number. Raft nodes must not be started on the IPv4 address 0.0.0.0. The startup IP address must be clearly specified Create a address, and bind it to port 8080 of the local host, as shown in the following example:\nEndpoint addr = new Endpoint(\u0026amp;#34;localhost\u0026amp;#34;, 8080); String s = addr.toString(); // The result is localhost:8080  PeerId peer = new PeerId(); boolean success = peer.parse(s); // Specifies whether parsing the endpoint from a string is supported. The result is true. 1.2 PeerId A PeerId indicates a participant (leader, follower, or candidate) of the Raft protocol. It comprises three elements in the format of ip:port:index, where ip is the IP address of the node, port is the port number, and index is the serial number of the same port. Currently, the index is not used, and is always set to 0. This field is reserved to allow starting different Raft nodes from the same port and to differentiate them by index.\nCreate a PeerId and set the index to 0, the IP to localhost, and the port to 8080:\nPeerId peer = new PeerId(\u0026amp;#34;localhost\u0026amp;#34;, 8080); EndPoint addr = peer.getEndpoint(); // Gets the endpoint of a node int index = peer.getIdx(); // Gets the index of a node, which is always set to 0 currently  String s = peer.toString(); // The result is localhost:8080 boolean success = peer.parse(s); // Specifies whether PeerId parsing from a string is supported. The result is true. 1.3 Configuration It refers to the configuration of a Raft group, or a participant list in other words.\nPeerId peer1 = ... PeerId peer2 = ... PeerId peer3 = ... // A Raft group that consists of three nodes Configuration conf = new Configuration(); conf.addPeer(peer1); conf.addPeer(peer2); conf.addPeer(peer3); 1.4 JRaftUtils utility class To enable users conveniently create objects such as Endpoint, PeerId, and Configuration, Jraft provides the JRaftUtils class to help users quickly create the required objects from strings.\nEndpoint addr = JRaftUtils.getEndpoint(\u0026amp;#34;localhost:8080\u0026amp;#34;); PeerId peer = …","date":-62135596800,"description":"","dir":"projects/sofa-jraft/jraft-user-guide/","fuzzywordcount":6700,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"105dfa34c3b20df1f2c23c112730507d","permalink":"/en/projects/sofa-jraft/jraft-user-guide/","publishdate":"0001-01-01T00:00:00Z","readingtime":32,"relpermalink":"/en/projects/sofa-jraft/jraft-user-guide/","summary":"0. Basic concepts  Every request submitted by log index to a Raft group is serialized into a log entry. Each log entry has an ID, which monotonically increases within the Raft group, and the log entries are replicated to every Raft node in the group. Term is a long-type number that monotonically increases within the Raft group. You can simply take it as the number of votes. The term of an elected leader is called the leader term.","tags":null,"title":"JRaft user guide","type":"projects","url":"/en/projects/sofa-jraft/jraft-user-guide/","wordcount":6632},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-jraft/jraft-user-guide/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"105dfa34c3b20df1f2c23c112730507d","permalink":"/projects/sofa-jraft/jraft-user-guide/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-jraft/jraft-user-guide/","summary":"","tags":null,"title":"JRaft 用户指南","type":"projects","url":"/projects/sofa-jraft/jraft-user-guide/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-boot/module-service/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"527472fbe57ce450e4e2b41d878704cb","permalink":"/projects/sofa-boot/module-service/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-boot/module-service/","summary":"","tags":null,"title":"JVM 服务发布与引用","type":"projects","url":"/projects/sofa-boot/module-service/","wordcount":0},{"author":null,"categories":null,"content":"In the Interactive Instructions section, we have described the set of instructions that Jarslink2.0 supports. In this section, we will focus on all the possible state transitions behind these instructions in the following diagram of a Biz package being loaded from a static file to the runtime and to being uninstalled.\nThe diagram above basically shows the complete life cycle of a Biz package. Now we will explain the direction of each state transition in the diagram:\n  Label 1: Execute the install instruction, and Jarslink2.0 will resolve the file format. If the format is correct, it is the Biz package file, and the Biz package will be registered and installed.\n  Label 2: When the Biz package is successfully installed, the Biz package\u0026amp;rsquo;s main function is executed, the Spring context is loaded successfully, and passes the health check. If Biz packages with the same name but different versions are detected to be activated, the Biz package state will be set to an inactive state. The JVM services that are published by an inactive Biz package will not be called.\n  Label 3: When the Biz package is successfully installed, the Biz package\u0026amp;rsquo;s main function is executed, the Spring context is loaded successfully, and passes the health check. If Biz packages with the same name but different versions are detected to be activated, the Biz package state will be set as active and can provide services.\n  Label 4: If there are any exceptions or a health check failure, the Biz package state will be set to broken. During the installation, the resources that the Biz package occupies will be quickly released and unregistered, at which point the Biz state will be set to unresolved.\n  Label 5: When running, Jarslink2.0 can load Biz packages with the same name but different versions, but only one Biz package is in the active state and can provide services. Execute the switch instruction, and the two Biz packages\u0026#39; states will be interchanged.\n  Label 6: Execute the uninstallation instruction, the Biz package will be uninstalled, and its occupied resources and published services will be unregistered.\n  ","date":-62135596800,"description":"","dir":"projects/sofa-boot/sofa-jarslink-jarslink-lifecycle/","fuzzywordcount":400,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"0f166dd5388f3dc7d968bce31d0f6e4f","permalink":"/en/projects/sofa-boot/sofa-jarslink-jarslink-lifecycle/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/en/projects/sofa-boot/sofa-jarslink-jarslink-lifecycle/","summary":"In the Interactive Instructions section, we have described the set of instructions that Jarslink2.0 supports. In this section, we will focus on all the possible state transitions behind these instructions in the following diagram of a Biz package being loaded from a static file to the runtime and to being uninstalled.\nThe diagram above basically shows the complete life cycle of a Biz package. Now we will explain the direction of each state transition in the diagram:","tags":null,"title":"Lifecycle","type":"projects","url":"/en/projects/sofa-boot/sofa-jarslink-jarslink-lifecycle/","wordcount":346},{"author":null,"categories":null,"content":"The link data transparent transmission function allows the applications to store data in the calling context, and then any applications in the entire link can operate the data. This feature is used as follows. Data can be put into the request and response of the link for transparent transmission, and then the applications can get the corresponding data from the link.\nRpcInvokeContext.getContext().putRequestBaggage(\u0026amp;#34;key_request\u0026amp;#34;,\u0026amp;#34;value_request\u0026amp;#34;); RpcInvokeContext.getContext().putResponseBaggage(\u0026amp;#34;key_response\u0026amp;#34;,\u0026amp;#34;value_response\u0026amp;#34;); String requestValue=RpcInvokeContext.getContext().getRequestBaggage(\u0026amp;#34;key_request\u0026amp;#34;); String responseValue=RpcInvokeContext.getContext().getResponseBaggage(\u0026amp;#34;key_response\u0026amp;#34;); Example For example, in the scenario of A -\u0026amp;gt; B -\u0026amp;gt; C, the request arguments set by A are transmitted to B and C. On return, response arguments of C and B are transmitted to A.\nRequester A is set as follows:\n// Set the value of the request transparently before calling RpcInvokeContext context = RpcInvokeContext.getContext(); context.putRequestBaggage(\u0026amp;#34;reqBaggageB\u0026amp;#34;, \u0026amp;#34;a2bbb\u0026amp;#34;); // Call service String result = service.hello(); // Get the result value context.getResponseBaggage(\u0026amp;#34;respBaggageB\u0026amp;#34;); Business code for B is as follows:\npublic String hello() { / / Get the value of the request transparent transmission RpcInvokeContext context = RpcInvokeContext.getContext(); String reqBaggage = context.getRequestBaggage(\u0026amp;#34;reqBaggageB\u0026amp;#34;); //  doSomthing(); // result passes a value transparently  context.putResponseBaggage(\u0026amp;#34;respBaggageB\u0026amp;#34;, \u0026amp;#34;b2aaa\u0026amp;#34;); return result; } If you start the child thread halfway, you need to set the context of the child thread:\nCountDownLatch latch = new CountDownLatch(1); final RpcInvokeContext parentContext = RpcInvokeContext.peekContext(); Thread thread = new Thread(new Runnable(){ public void run(){ Try { RpcInvokeContext.setContext(parentContext); / / Call a remote service xxxService.sayHello(); latch.countDown(); } finally { RpcInvokeContext.removeContext(); } } }, \u0026amp;#34;new-thread\u0026amp;#34;); thread.start(); // If failed to get the transparently transmitted data of the return value. latch.await(); //wait // Return ends, and you can get the value returned by transparent transmission. Compare with SOFATracer SOFATracer is an open-source distributed link tracing system of Ant Finanicial. RPC has been integrated with Tracer and is enabled by default.\nThe differences between data transparent transmission and data transfer by Tracer are as follows:\n RPC data transparent transmission is business-oriented. And it can implement two-way data transmission in the full link. The caller can transmit data to the service provider, and the service provider can also transmit data to the caller. SOFATracer is middleware-oriented and is more suitable for the data transfer without service itself perceving. It can only implement one-way data transmission. The transparent …","date":-62135596800,"description":"","dir":"projects/sofa-rpc/invoke-chain-pass-data/","fuzzywordcount":500,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"96cfb41f07a6a2ad979b53093ff5eee9","permalink":"/en/projects/sofa-rpc/invoke-chain-pass-data/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/en/projects/sofa-rpc/invoke-chain-pass-data/","summary":"The link data transparent transmission function allows the applications to store data in the calling context, and then any applications in the entire link can operate the data. This feature is used as follows. Data can be put into the request and response of the link for transparent transmission, and then the applications can get the corresponding data from the link.\nRpcInvokeContext.getContext().putRequestBaggage(\u0026#34;key_request\u0026#34;,\u0026#34;value_request\u0026#34;); RpcInvokeContext.getContext().putResponseBaggage(\u0026#34;key_response\u0026#34;,\u0026#34;value_response\u0026#34;); String requestValue=RpcInvokeContext.getContext().getRequestBaggage(\u0026#34;key_request\u0026#34;); String responseValue=RpcInvokeContext.getContext().getResponseBaggage(\u0026#34;key_response\u0026#34;); Example For example, in the scenario of A -\u0026gt; B -\u0026gt; C, the request arguments set by A are transmitted to B and C.","tags":null,"title":"Link data transparent transmission","type":"projects","url":"/en/projects/sofa-rpc/invoke-chain-pass-data/","wordcount":427},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/mosn/configuration/listener/overview/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"028e9053b21853890114c38d55d15390","permalink":"/projects/mosn/configuration/listener/overview/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/mosn/configuration/listener/overview/","summary":"","tags":null,"title":"Listener 配置","type":"projects","url":"/projects/mosn/configuration/listener/overview/","wordcount":0},{"author":null,"categories":null,"content":"SOFARPC provides a variety of load balancing algorithms and currently supports the following five types:\n   Type Name Description     random Random algorithm The default load balancing algorithm.   localPref Local preference algorithm Firstly detect whether the service is published locally, if not, random algorithm is used.   roundRobin Round Robin algorithm Method-level polling, the polling is carried out separately to each method, without affecting each other.   consistentHash Consistent hash algorithm The same method-level request is routed to the same node.   weightRoundRobin Weighted Round Robin algorithm Poll nodes by weight. Not recommended due to poor performance.    To use a specific load balancing algorithm, you can configure as follows:\nIn XML If you reference the service using XML, you can configure it by setting the loadBalancer property of the sofa:global-attrs tag:\n\u0026amp;lt;sofa:reference interface=\u0026amp;#34;com.example.demo.SampleService\u0026amp;#34; id=\u0026amp;#34;sampleService\u0026amp;#34;\u0026amp;gt; \u0026amp;lt;sofa:binding.bolt\u0026amp;gt; \u0026amp;lt;sofa:global-attrs loadBalancer=\u0026amp;#34;roundRobin\u0026amp;#34;/\u0026amp;gt; \u0026amp;lt;/sofa:binding.bolt\u0026amp;gt; \u0026amp;lt;/sofa:reference\u0026amp;gt; In Annotation It is currently not supported to configure a load balancing algorithm for a reference in Annotation. The function will be provided in subsequent releases.\nIn API under Spring environment If you use the API in a Spring or Spring Boot environment, you can configure it by calling the setLoadBalancer method of BoltBindingParam:\nBoltBindingParam boltBindingParam = new BoltBindingParam(); boltBindingParam.setLoadBalancer(\u0026amp;#34;roundRobin\u0026amp;#34;); In API under non-Spring environment If you directly use the bare API provided by SOFARPC in a non-Spring environment, you can configure it by calling the setLoadBalancer method of ConsumerConfig:\nConsumerConfig consumerConfig = new ConsumerConfig(); consumerConfig.setLoadbalancer(\u0026amp;#34;random\u0026amp;#34;); ","date":-62135596800,"description":"","dir":"projects/sofa-rpc/load-balance/","fuzzywordcount":300,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"739984ca9a414429304f85010fd73ad0","permalink":"/en/projects/sofa-rpc/load-balance/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/en/projects/sofa-rpc/load-balance/","summary":"SOFARPC provides a variety of load balancing algorithms and currently supports the following five types:\n   Type Name Description     random Random algorithm The default load balancing algorithm.   localPref Local preference algorithm Firstly detect whether the service is published locally, if not, random algorithm is used.   roundRobin Round Robin algorithm Method-level polling, the polling is carried out separately to each method, without affecting each other.","tags":null,"title":"Load balance","type":"projects","url":"/en/projects/sofa-rpc/load-balance/","wordcount":230},{"author":null,"categories":null,"content":"To use local file as service registry center, you can configure it in application.properties as follows:\ncom.alipay.sofa.rpc.registry.address=local:///home/admin/registry/localRegistry.reg The /home/admin/registry/localRegistry.reg is the directory of the local files to be used.\nOn windows OS, the above path indicates the following directory:\ncom.alipay.sofa.rpc.registry.address=local://c://users/localRegistry.reg ","date":-62135596800,"description":"","dir":"projects/sofa-rpc/registry-local/","fuzzywordcount":100,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"33bc89393392e21b3917f090313c0df5","permalink":"/en/projects/sofa-rpc/registry-local/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/en/projects/sofa-rpc/registry-local/","summary":"To use local file as service registry center, you can configure it in application.properties as follows:\ncom.alipay.sofa.rpc.registry.address=local:///home/admin/registry/localRegistry.reg The /home/admin/registry/localRegistry.reg is the directory of the local files to be used.\nOn windows OS, the above path indicates the following directory:\ncom.alipay.sofa.rpc.registry.address=local://c://users/localRegistry.reg ","tags":null,"title":"Local","type":"projects","url":"/en/projects/sofa-rpc/registry-local/","wordcount":40},{"author":null,"categories":null,"content":"1. registry-meta 1.1 Push switch When publishing new SOFARegistry versions, to minimize the impact on services, and avoid large amounts of push messages caused by large-scale service endpoint changes during the server restart process, we will temporarily turn off the push service at the management layer. After publishing the new SOFARegistry version, we can turn on the push service and restore the normal working conditions. Data subscription and service publication information generated for the period when the push service is turned off will be subject to global push for compensation.\nTurn on the push service:\ncurl \u0026amp;#34;http://\u0026amp;lt;meta_ip\u0026amp;gt;:9615/stopPushDataSwitch/close\u0026amp;#34; Turn off the push service:\ncurl \u0026amp;#34;http://\u0026amp;lt;meta_ip\u0026amp;gt;:9615/stopPushDataSwitch/open\u0026amp;#34; 1.2 Query the endpoint list View the endpoint list of the meta cluster:\ncurl \u0026amp;#34;http://\u0026amp;lt;meta_ip\u0026amp;gt;:9615/digest/META/node/query\u0026amp;#34; View the endpoint list of the data cluster:\ncurl \u0026amp;#34;http://\u0026amp;lt;meta_ip\u0026amp;gt;:9615/digest/DATA/node/query\u0026amp;#34; View the endpoint list of the session cluster:\ncurl \u0026amp;#34;http://\u0026amp;lt;meta_ip\u0026amp;gt;:9615/digest/SESSION/node/query\u0026amp;#34; 1.3 Scale up/down the meta cluster 1.3.1 Modify the cluster: changePeer You can call this operation to modify the Raft cluster list when you have scaled up/down the cluster. This allows you to correctly add nodes to or remove nodes from the cluster:\ncurl -X POST \u0026amp;#34;http://\u0026amp;lt;meta_ip\u0026amp;gt;:9615/manage/changePeer\u0026amp;#34; -d \u0026amp;#34;ipAddressList=\u0026amp;lt;ip1\u0026amp;gt;,\u0026amp;lt;ip2\u0026amp;gt;,\u0026amp;lt;ip3\u0026amp;gt;\u0026amp;#34; 1.3.2 Reset the cluster: resetPeer When a cluster is unavailable, for example, two of three servers are not functional, the cluster can not carry out leader election. Here, you can call this operation to reset the cluster list. For example, you can reset the cluster to a one-server cluster (with the only functional server) to resume election and restore service.\ncurl -X POST \u0026amp;#34;http://\u0026amp;lt;meta_ip\u0026amp;gt;:9615/manage/resetPeer\u0026amp;#34; -d \u0026amp;#34;ipAddressList=\u0026amp;lt;ip1\u0026amp;gt;,\u0026amp;lt;ip2\u0026amp;gt;,\u0026amp;lt;ip3\u0026amp;gt;\u0026amp;#34; 2. registry-data 2.1 Query data View the pub count:\ncurl \u0026amp;#34;http://\u0026amp;lt;data_ip\u0026amp;gt;:9622/digest/datum/count\u0026amp;#34; You can call this operation to view data published by a client based on its IP address and port number.\ncurl -X POST \u0026amp;#34;http://\u0026amp;lt;data_ip\u0026amp;gt;:9622/digest/connect/query\u0026amp;#34; -H \u0026amp;#34;Content-Type: application/json\u0026amp;#34; -d \u0026amp;#39;{\u0026amp;#34;\u0026amp;lt;clientIP\u0026amp;gt;\u0026amp;#34;:\u0026amp;#34;\u0026amp;lt;client port\u0026amp;gt;\u0026amp;#34;}\u0026amp;#39; 3. registry-session 3.1 Query data You can call this operation to view data published by a client based on its IP address and port number.\ncurl -X POST \u0026amp;#34;http://\u0026amp;lt;session_ip\u0026amp;gt;:9603/digest/pub/connect/query\u0026amp;#34; -H \u0026amp;#34;Content-Type: application/json\u0026amp;#34; -d \u0026amp;#39;[\u0026amp;#34;\u0026amp;lt;clientIP\u0026amp;gt;:\u0026amp;lt;client port\u0026amp;gt;\u0026amp;#34;]\u0026amp;#39; You can call this operation to view data subscribed to by a client based on its IP address and port number.\ncurl -X POST \u0026amp;#34;http://\u0026amp;lt;session_ip\u0026amp;gt;:9603/digest/sub/connect/query\u0026amp;#34; -H \u0026amp;#34;Content-Type: application/json\u0026amp;#34; -d …","date":-62135596800,"description":"","dir":"projects/sofa-registry/management-api/","fuzzywordcount":500,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"2cf59ac422c84c279d73c1f7f1cd0902","permalink":"/en/projects/sofa-registry/management-api/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/en/projects/sofa-registry/management-api/","summary":"1. registry-meta 1.1 Push switch When publishing new SOFARegistry versions, to minimize the impact on services, and avoid large amounts of push messages caused by large-scale service endpoint changes during the server restart process, we will temporarily turn off the push service at the management layer. After publishing the new SOFARegistry version, we can turn on the push service and restore the normal working conditions. Data subscription and service publication information generated for the period when the push service is turned off will be subject to global push for compensation.","tags":null,"title":"Management commands","type":"projects","url":"/en/projects/sofa-registry/management-api/","wordcount":406},{"author":null,"categories":null,"content":"pom dependencies \u0026amp;lt;!-- jraft --\u0026amp;gt; \u0026amp;lt;dependency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;com.alipay.sofa\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;jraft-core\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;version\u0026amp;gt;${version}\u0026amp;lt;/version\u0026amp;gt; \u0026amp;lt;/dependency\u0026amp;gt; \u0026amp;lt;!-- jsr305 --\u0026amp;gt; \u0026amp;lt;dependency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;com.google.code.findbugs\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;jsr305\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;version\u0026amp;gt;3.0.2\u0026amp;lt;/version\u0026amp;gt; \u0026amp;lt;/dependency\u0026amp;gt; \u0026amp;lt;!-- bolt --\u0026amp;gt; \u0026amp;lt;dependency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;com.alipay.sofa\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;bolt\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;version\u0026amp;gt;1.5.3\u0026amp;lt;/version\u0026amp;gt; \u0026amp;lt;/dependency\u0026amp;gt; \u0026amp;lt;dependency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;com.alipay.sofa\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;hessian\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;version\u0026amp;gt;3.3.6\u0026amp;lt;/version\u0026amp;gt; \u0026amp;lt;/dependency\u0026amp;gt; \u0026amp;lt;!-- log --\u0026amp;gt; \u0026amp;lt;dependency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;org.slf4j\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;slf4j-api\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;version\u0026amp;gt;1.7.21\u0026amp;lt;/version\u0026amp;gt; \u0026amp;lt;/dependency\u0026amp;gt; \u0026amp;lt;!-- disruptor --\u0026amp;gt; \u0026amp;lt;dependency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;com.lmax\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;disruptor\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;version\u0026amp;gt;3.3.7\u0026amp;lt;/version\u0026amp;gt; \u0026amp;lt;/dependency\u0026amp;gt; \u0026amp;lt;dependency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;commons-io\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;commons-io\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;version\u0026amp;gt;2.4\u0026amp;lt;/version\u0026amp;gt; \u0026amp;lt;/dependency\u0026amp;gt; \u0026amp;lt;dependency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;commons-lang\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;commons-lang\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;version\u0026amp;gt;2.6\u0026amp;lt;/version\u0026amp;gt; \u0026amp;lt;/dependency\u0026amp;gt; \u0026amp;lt;!-- protobuf --\u0026amp;gt; \u0026amp;lt;dependency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;com.google.protobuf\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;protobuf-java\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;version\u0026amp;gt;3.5.1\u0026amp;lt;/version\u0026amp;gt; \u0026amp;lt;/dependency\u0026amp;gt; \u0026amp;lt;!-- protostuff --\u0026amp;gt; \u0026amp;lt;dependency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;io.protostuff\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;protostuff-core\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;version\u0026amp;gt;1.6.0\u0026amp;lt;/version\u0026amp;gt; \u0026amp;lt;/dependency\u0026amp;gt; \u0026amp;lt;dependency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;io.protostuff\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;protostuff-runtime\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;version\u0026amp;gt;1.6.0\u0026amp;lt;/version\u0026amp;gt; \u0026amp;lt;/dependency\u0026amp;gt; \u0026amp;lt;!-- rocksdb --\u0026amp;gt; \u0026amp;lt;dependency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;org.rocksdb\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;rocksdbjni\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;version\u0026amp;gt;5.14.2\u0026amp;lt;/version\u0026amp;gt; \u0026amp;lt;/dependency\u0026amp;gt; \u0026amp;lt;!-- java thread affinity --\u0026amp;gt; \u0026amp;lt;dependency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;net.openhft\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;affinity\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;version\u0026amp;gt;3.1.7\u0026amp;lt;/version\u0026amp;gt; \u0026amp;lt;/dependency\u0026amp;gt; \u0026amp;lt;!-- metrics --\u0026amp;gt; \u0026amp;lt;dependency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;io.dropwizard.metrics\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;metrics-core\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;version\u0026amp;gt;4.0.2\u0026amp;lt;/version\u0026amp;gt; \u0026amp;lt;/dependency\u0026amp;gt; ","date":-62135596800,"description":"","dir":"projects/sofa-jraft/maven-dependency/","fuzzywordcount":200,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"abb08cef5ebf1a10a723597a65415313","permalink":"/en/projects/sofa-jraft/maven-dependency/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/en/projects/sofa-jraft/maven-dependency/","summary":"pom dependencies \u0026lt;!-- jraft --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.alipay.sofa\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;jraft-core\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- jsr305 --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.google.code.findbugs\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;jsr305\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;3.0.2\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- bolt --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.alipay.sofa\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;bolt\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.5.3\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.alipay.sofa\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;hessian\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;3.3.6\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- log --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.slf4j\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;slf4j-api\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.7.21\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- disruptor --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.lmax\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;disruptor\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;3.3.7\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;commons-io\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;commons-io\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.4\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;commons-lang\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;commons-lang\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.6\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- protobuf --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.google.protobuf\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;protobuf-java\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;3.5.1\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- protostuff --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;io.protostuff\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;protostuff-core\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.","tags":null,"title":"Maven dependencies","type":"projects","url":"/en/projects/sofa-jraft/maven-dependency/","wordcount":104},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-jraft/maven-dependency/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"abb08cef5ebf1a10a723597a65415313","permalink":"/projects/sofa-jraft/maven-dependency/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-jraft/maven-dependency/","summary":"","tags":null,"title":"Maven 依赖说明","type":"projects","url":"/projects/sofa-jraft/maven-dependency/","wordcount":0},{"author":null,"categories":null,"content":"In Jarslink 2.0, merged deployment refers to loading and running multiple Biz packages in the same JVM. In the section Application Packaging, we have described the relationship between the Spring Boot/SOFABoot application and the Biz package. We may think that merged deployment here refers to loading and running multiple Spring Boot/SOFABoot applications in the same JVM.\nIt is mentioned at the end of Application Packaging that a Biz package can be released to a remote repository through the mvn deploy command, similar to releasing common Jar packages. It comes naturally to mind that the advantage of doing so is that the Biz package generated by other applications can be introduced in the form of dependencies, just like introducing common Jar package dependencies. Then, what is the purpose of introducing the Biz package generated by other applications into your application? Also, how do we dynamically install and uninstall Biz packages in Jarslink 2.0?\nTo answer the two questions above is to understand the concepts of static merged deployment and dynamic merged deployment.\nStatic merged deployment To answer the first question: What is the purpose of introducing the Biz package generated by other applications into your application?\nIn the section Application Packaging, we have described how to package an application into an Ark package and offered a rough equation: Ark package = Biz package + SOFAArk framework + Ark Plugin. When a Biz package generated by other applications is introduced in the application, what kind of packaged Ark package will it be? The conclusion is that the packaging plugin will treat special dependency packages like the Biz package differently. The plugin will package all the non-Biz package dependencies into the application\u0026amp;rsquo;s Biz package, but will consider the introduced Biz package as equal to those of the current application. The final Ark package will contain multiple Biz packages. For details, refer to Ark Package Directory Structure. At this point, when you use java -jar to start this Ark package, you will find that all the contained Biz packages will be started as well.\nTo sum up, the application introduces the Biz packages generated by other applications in the form of dependencies, and the Ark package packaged by this application will contain multiple Biz packages. By executing this Ark package, all the Biz packages will be started, known as static merged deployment.\nStatic merged deployment does not depend on Jarslink 2.0 but is available directly with the SOFAArk packaging plugin.\nNote that the startup order of multiple Biz packages is controllable. When each Biz package is generated, you can use the packaging plugin to configure its priority, whose value is 100 by default. The higher the priority, the lower the value is. The priority determines the startup order of the Biz package.\nDynamic merged deployment To answer the second question: how do you dynamically install and uninstall Biz packages in Jarslink …","date":-62135596800,"description":"","dir":"projects/sofa-boot/sofa-jarslink-jarslink-deploy/","fuzzywordcount":800,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"ce787203d9d834b7f796b3dbb40bf55d","permalink":"/en/projects/sofa-boot/sofa-jarslink-jarslink-deploy/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/en/projects/sofa-boot/sofa-jarslink-jarslink-deploy/","summary":"In Jarslink 2.0, merged deployment refers to loading and running multiple Biz packages in the same JVM. In the section Application Packaging, we have described the relationship between the Spring Boot/SOFABoot application and the Biz package. We may think that merged deployment here refers to loading and running multiple Spring Boot/SOFABoot applications in the same JVM.\nIt is mentioned at the end of Application Packaging that a Biz package can be released to a remote repository through the mvn deploy command, similar to releasing common Jar packages.","tags":null,"title":"Merged deployment","type":"projects","url":"/en/projects/sofa-boot/sofa-jarslink-jarslink-deploy/","wordcount":749},{"author":null,"categories":null,"content":"Quickly understand of ACTS models When you write a test case, you need to prepare some database tables, request parameter data of methods, or data for validating database tables and responses. You can save such data in models, and import it to preparation data or validation data when you edit the test case. This allows you to conveniently reuse data. Currently, ACTS models can be divided into database models and class models.\nIn conventional test case compilation, data preparation of models, such as database models, request parameter models, and response models, is based on the test code. The complexity of models increases with the business complexity, especially in financial-level business applications, where a class or data table may have dozens of properties or fields, and where class nesting is common. In this case, constructing complex objects is extremely difficult and prone to omissions. Some of the most frequently occurring problems are listed as follows:\n Omissions may occur and troubleshooting takes a lot of time for a large number of tables. Field names of tables are difficult to remember, and spelling errors frequently occur. The large number and complex types of interface request parameters are frustrating. There are so many class properties that important properties are prone to omission. Object construction with nested structures requires continuous effort in creating and setting values. Important properties are easily omitted when the inheritance and implementation relationships are complex.  ACTS models can effectively address the above problems by formatting classes and tables in CSV, which makes the structure of classes easier to understand. Class models and data table models can help you quickly create objects, and serialize them into the YAML file. ACTS models allow you to conveniently manage test case data.\nStorage location of models You can view existing models under the resource/model directory of the test module.\nGenerate data table model Sample data table model 1. Validation flag description\nY: indicates that the data is to be inserted. N: indicates that the data is not to be inserted. C: indicates that ACTS will clean the inserted data by taking this value as the where condition. F: indicates that the value of this column is a database function. L: indicates that a large field data record requires line wrap. The preparation method for this data record is: A=B;C=D.  2. Quickly import data from models during test case editing\nWhen editing database table data (including preparing table data and expectation data) in ACTS IDE, you can right click to add a model of the specified table, to import all fields and values of the specified table directly from the CSV file of the table model for quick editing. For more information about the use of DB models, see Prepare database data.\nGenerate table model Click OK to generate the model as shown in Figure 9.\nACTS also supports table model generation without a direct JDBC connection. …","date":-62135596800,"description":"","dir":"projects/sofa-acts/usage-model/","fuzzywordcount":800,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"65aaf62462b3b0ea142ca75a5b61eb0d","permalink":"/en/projects/sofa-acts/usage-model/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/en/projects/sofa-acts/usage-model/","summary":"Quickly understand of ACTS models When you write a test case, you need to prepare some database tables, request parameter data of methods, or data for validating database tables and responses. You can save such data in models, and import it to preparation data or validation data when you edit the test case. This allows you to conveniently reuse data. Currently, ACTS models can be divided into database models and class models.","tags":null,"title":"Models","type":"projects","url":"/en/projects/sofa-acts/usage-model/","wordcount":726},{"author":null,"categories":null,"content":"Since version 2.4.0, SOFABoot has started to support modular development capability based on Spring context isolation. To better understand the concept of modular development of SOFABoot, let\u0026amp;rsquo;s distinguish several common forms of modularization:\n Modularization based on code organization: This is the most common form. Codes with different functions are placed under different Java projects at development time and into different jar packages at compile time. At runtime, all Java classes are under the same classpath without any isolation; Modularization based on Spring context isolation: Use the Spring context to perform isolation of different function modules. At development and compile time, the codes and configurations are also placed under different Java projects. At runtime, however, if Spring beans are in different Spring contexts, they are invisible to each other, so dependency injection occurs within the same context. But, all the Java classes are still under the same ClassLoader; Modularization based on ClassLoader isolation: Borrow the ClassLoader to perform isolation. Each module has an independent ClassLoader, and the classpath between modules differs. SOFAArk is the practice of such modularization.  SOFABoot Modular Development belongs to the second modularization form\u0026amp;ndash;modularization based on Spring context isolation. Each SOFABoot module uses an independent Spring context to avoid BeanId conflicts between different SOFABoot modules and effectively reduces the cost of communication between teams during enterprise-level multi-module development.\nMore details about SOFABoot module is introduced in the article.\nFeature Description Import Dependency  To use SOFABoot module, you should import the following dependency:  \u0026amp;lt;dependency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;com.alipay.sofa\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;isle-sofa-boot-starter\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;/dependency\u0026amp;gt; SOFABoot Module SOFABoot framework has defined the concept of SOFABoot module: A SOFABoot module is a common Jar package including Java code, Spring configuration files, and SOFABoot module identifiers. A SOFABoot application can be comprised of multiple SOFABoot modules, each of which has independent Spring context.\nThe modular development with SOFABoot provides developers with the following features:\n At runtime, the Spring context of each SOFABoot module is isolated, so the defined Beans between modules will not affect each other; Each SOFABoot module is full-featured and self-contained, allowing for easy migration and reuse in different SOFABoot applications. Developers only need to copy the whole SOFABoot module to the application and adjust the Maven dependence before running it.  For the format definition of SOFABoot module, see: Module Configuration.\nInvocation between SOFABoot Modules After isolation of context, the Bean between modules cannot be directly injected, so the SOFA service is required for invocation between the modules. Currently, SOFABoot offers two …","date":-62135596800,"description":"","dir":"projects/sofa-boot/modular-development/","fuzzywordcount":600,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"95bc080787c3614bfa485d2f3cd0de4c","permalink":"/en/projects/sofa-boot/modular-development/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/en/projects/sofa-boot/modular-development/","summary":"Since version 2.4.0, SOFABoot has started to support modular development capability based on Spring context isolation. To better understand the concept of modular development of SOFABoot, let\u0026rsquo;s distinguish several common forms of modularization:\n Modularization based on code organization: This is the most common form. Codes with different functions are placed under different Java projects at development time and into different jar packages at compile time. At runtime, all Java classes are under the same classpath without any isolation; Modularization based on Spring context isolation: Use the Spring context to perform isolation of different function modules.","tags":null,"title":"Modular development","type":"projects","url":"/en/projects/sofa-boot/modular-development/","wordcount":578},{"author":null,"categories":null,"content":"The SOFABoot module combines a regular JAR with some SOFABoot-specific configurations, which enables a JAR to be identified by SOFABoot and modularized.\nThere are two differences between a complete SOFABoot module and a regular JAR:\n A SOFABoot module contains a sofa-module.properties file, where the name and the dependencies of the module are defined. We can place one or more Spring configuration files in the SOFABoot module\u0026amp;rsquo;s META-INF/spring directory; and SOFABoot will automatically load them as Spring configurations for that module.  Inside the sofa-module.properties file Let\u0026amp;rsquo;s look at a complete sofa-module.properties file:\nModule-Name=com.alipay.test.biz.service.impl Spring-Parent=com.alipay.test.common.dal Require-Module=com.alipay.test.biz.shared Module-Profile=dev Module-Name This is the name of a SOFABoot module, which is also the unique identifier of the module. In a SOFABoot application, the Module-Name of a SOFABoot module must be different from that of another SOFABoot module. Note that the SOFABoot modules of a SOFABoot application runtime do not only cover the modules of the current application but also the modules introduced by dependency from other applications. When determining whether a module is unique, you must take these SOFABoot modules into consideration.\nRequire-Module This defines the dependency order of different modules. The value contains a comma-separated list of SOFABoot module names. For example, in the preceding configuration, it indicates that the current module depends on the com.alipay.test.biz.shared module. The SOFABoot framework processes this dependency by starting the com.alipay.test.biz.shared module before the current module.\nIn most cases, you do not have to define the Require-Module for a module. It is required only when the startup of a module\u0026amp;rsquo;s Spring context depends on that of another module\u0026amp;rsquo;s. For example, you have published a JVM Service in module A. In the init method of a Bean in module B, you need to call the JVM Service with a SOFA Reference. Assume that module B is started before module A, the Bean of module B will fail because the JVM Service of module A is not published yet and the init method fails. In this case, you can use the Require-Module to force module A to start before module B.\nSpring-Parent In a SOFABoot application, each SOFABoot module has a separate Spring context, and these Spring contexts are isolated from each other. Although this modular approach has many benefits, it can still cause some inconveniences in certain scenarios. For these scenarios, you can use the Spring-Parent to connect the Spring contexts of two SOFABoot modules. The name of a module can be configured with the Spring-Parent property. For example, in the preceding configuration, the Spring context of com.alipay.test.common.dal is set to the parent of the current module\u0026amp;rsquo;s Spring context.\nDue to Spring\u0026amp;rsquo;s limitations, a module\u0026amp;rsquo;s Spring-Parent contains only one module …","date":-62135596800,"description":"","dir":"projects/sofa-boot/sofaboot-module/","fuzzywordcount":600,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"2dbb8a536237f21afbee1e3f320b8193","permalink":"/en/projects/sofa-boot/sofaboot-module/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/en/projects/sofa-boot/sofaboot-module/","summary":"The SOFABoot module combines a regular JAR with some SOFABoot-specific configurations, which enables a JAR to be identified by SOFABoot and modularized.\nThere are two differences between a complete SOFABoot module and a regular JAR:\n A SOFABoot module contains a sofa-module.properties file, where the name and the dependencies of the module are defined. We can place one or more Spring configuration files in the SOFABoot module\u0026rsquo;s META-INF/spring directory; and SOFABoot will automatically load them as Spring configurations for that module.","tags":null,"title":"Module configuration","type":"projects","url":"/en/projects/sofa-boot/sofaboot-module/","wordcount":565},{"author":null,"categories":null,"content":"SOFABoot will calculate the dependency tree based on the Require-Module. For example, the following dependency tree represents that Modules B and C depend on Module A, Module E depends on Module D, and Module F depends on Module E:\nThe dependency tree guarantees that Module A starts before Modules B and C, Module D before Module E, and Module E before Module F, but without defining the start orders between Modules B and C, or Modules B, C and Modules D, E and F, which can start either in serial or parallel.\nSOFABoot will start the modules in parallel by default. During use, if you want to disable parallel start, you can add the following parameter to application.properties:\ncom.alipay.sofa.boot.module-start-up-parallel=false ","date":-62135596800,"description":"","dir":"projects/sofa-boot/parallel-start/","fuzzywordcount":200,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"a6ef51b78d2a4f9af0debbc25ea45e8a","permalink":"/en/projects/sofa-boot/parallel-start/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/en/projects/sofa-boot/parallel-start/","summary":"SOFABoot will calculate the dependency tree based on the Require-Module. For example, the following dependency tree represents that Modules B and C depend on Module A, Module E depends on Module D, and Module F depends on Module E:\nThe dependency tree guarantees that Module A starts before Modules B and C, Module D before Module E, and Module E before Module F, but without defining the start orders between Modules B and C, or Modules B, C and Modules D, E and F, which can start either in serial or parallel.","tags":null,"title":"Module parallel startup","type":"projects","url":"/en/projects/sofa-boot/parallel-start/","wordcount":119},{"author":null,"categories":null,"content":"Instructions on performance report The following performance report presents the performance comparison data of MOSN 0.1.0 with envoy in terms of pure TCP forwarding for Bolt and HTTP1.x protocols, mainly including QPS, RTT, failure rate, success rate and other indicators.\nIt is significant to note the following optimizations in v0.1.0 which are intended to improve the forwarding performance of MOSN.\n For thread model, MOSN uses the worker goroutine pool to handle stream events, and uses two independent goroutines to handle read and write IO separately. For single-core forwarding, in the case of specifying P=1, MOSN binds CPU with cores to improve the call execution efficiency of the system and the locality affinity of cache. For memory, in the case of binding single core, MOSN uses SLAB-style recycling mechanism to improve reuse and reduce memory copy. For IO, MOSN mainly implements optimization by controlling the read/write buffer size, read/write timing, read/write frequency and other parameters.  The performance test data is as follows:\nTCP proxy performance data For the same deployment mode, this report compares MOSN 0.1.0 and envoy for the upper-layer protocol Bolt (SOFARPC related protocol) and HTTP1.1 respectively.\nDeployment mode The pressure test is deployed in a pure proxy mode. The client process accesses the server process through the MOSN process and serves as a forwarding proxy. The client process, MOSN process, and server process run on the machines which belong to different network segments. The network delay of the direct access from the client to server is about 2.5ms.\nClient Bolt protocol (send 1K string) The client that sends the Bolt protocol data uses the online pressure generators developed by Ant Financial and deploys the SOFARPC client.\nOn the pressure generator performance page, you can see the QPS, success/failure counts, RT and other parameters.\nHTTP1.1 protocol (send 1K string) Use ApacheBench/2.3. The test instructions are:\nab -n $RPC -c $CPC -p 1k.txt -T \u0026amp;#34;text/plain\u0026amp;#34; -k http://11.166.161.136:12200/tcp_bench \u0026amp;gt; ab.log.$CPU_IDX \u0026amp;amp; Mesh machine specifications The mesh runs in a container where the CPU is an exclusive logical core. The specifications are as follows:\n   Category Information     OS 3.10.0-327.ali2008.alios7.x86_64   CPU Intel(R) Xeon(R) CPU E5-2650 v2 @ 2.60GHz X 1    Upstream machine specifications    Category Information     OS 2.6.32-431.17.1.el6.FASTSOCKET   CPU Intel(R) Xeon(R) CPU E5620 @ 2.40GHz X 16    Bolt protocol test result Performance data    Indicators MOSN Envoy     QPS 103500 104000   RT 16.23ms 15.88ms   MEM 31m 18m   CPU 100% 100%    Conclusion For single-core TCP forwarding, there is little difference between MOSN 0.1.0 and Envoy 1.7 in terms of performance in the condition with full load, such as QPS, RTT and success/failure counts. We will continue to optimize in the subsequent versions.\nHTTP/1.1 test result Since the HTTP/1.1 request response model is PING-PONG, QPS is …","date":-62135596800,"description":"","dir":"projects/mosn/reference-performance-report010/","fuzzywordcount":800,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"3cb22950b4be5a25b90f8aa1376786e9","permalink":"/en/projects/mosn/reference-performance-report010/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/en/projects/mosn/reference-performance-report010/","summary":"Instructions on performance report The following performance report presents the performance comparison data of MOSN 0.1.0 with envoy in terms of pure TCP forwarding for Bolt and HTTP1.x protocols, mainly including QPS, RTT, failure rate, success rate and other indicators.\nIt is significant to note the following optimizations in v0.1.0 which are intended to improve the forwarding performance of MOSN.\n For thread model, MOSN uses the worker goroutine pool to handle stream events, and uses two independent goroutines to handle read and write IO separately.","tags":null,"title":"MOSN 0.1.0 performance report","type":"projects","url":"/en/projects/mosn/reference-performance-report010/","wordcount":730},{"author":null,"categories":null,"content":"Instructions on performance report The following performance report presents the performance comparison data of MOSN 0.1.0 with envoy in terms of pure TCP forwarding for Bolt and HTTP1.x protocols, mainly including QPS, RTT, failure rate, success rate and other indicators.\nIt is significant to note the following optimizations in v0.1.0 which are intended to improve the forwarding performance of MOSN.\n For thread model, MOSN uses the worker goroutine pool to handle stream events, and uses two independent goroutines to handle read and write IO separately. For single-core forwarding, in the case of specifying P=1, MOSN binds CPU with cores to improve the call execution efficiency of the system and the locality affinity of cache. For memory, in the case of binding single core, MOSN uses SLAB-style recycling mechanism to improve reuse and reduce memory copy. For IO, MOSN mainly implements optimization by controlling the read/write buffer size, read/write timing, read/write frequency and other parameters.  The performance test data is as follows:\nTCP proxy performance data For the same deployment mode, this report compares MOSN 0.1.0 and envoy for the upper-layer protocol Bolt (SOFARPC related protocol) and HTTP1.1 respectively.\nDeployment mode The pressure test is deployed in a pure proxy mode. The client process accesses the server process through the MOSN process and serves as a forwarding proxy. The client process, MOSN process, and server process run on the machines which belong to different network segments. The network delay of the direct access from the client to server is about 2.5ms.\nClient Bolt protocol (send 1K string) The client that sends the Bolt protocol data uses the online pressure generators developed by Ant Financial and deploys the SOFARPC client.\nOn the pressure generator performance page, you can see the QPS, success/failure counts, RT and other parameters.\nHTTP1.1 protocol (send 1K string) Use ApacheBench/2.3. The test instructions are:\nab -n $RPC -c $CPC -p 1k.txt -T \u0026amp;#34;text/plain\u0026amp;#34; -k http://11.166.161.136:12200/tcp_bench \u0026amp;gt; ab.log.$CPU_IDX \u0026amp;amp; Mesh machine specifications The mesh runs in a container where the CPU is an exclusive logical core. The specifications are as follows:\n   Category Information     OS 3.10.0-327.ali2008.alios7.x86_64   CPU Intel(R) Xeon(R) CPU E5-2650 v2 @ 2.60GHz X 1    Upstream machine specifications    Category Information     OS 2.6.32-431.17.1.el6.FASTSOCKET   CPU Intel(R) Xeon(R) CPU E5620 @ 2.40GHz X 16    Bolt protocol test result Performance data    Indicators MOSN Envoy     QPS 103500 104000   RT 16.23ms 15.88ms   MEM 31m 18m   CPU 100% 100%    Conclusion For single-core TCP forwarding, there is little difference between MOSN 0.1.0 and Envoy 1.7 in terms of performance in the condition with full load, such as QPS, RTT and success/failure counts. We will continue to optimize in the subsequent versions.\nHTTP/1.1 test result Since the HTTP/1.1 request response model is PING-PONG, QPS is …","date":-62135596800,"description":"","dir":"projects/occlum/reference-performance-report010/","fuzzywordcount":800,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"035dfbc7e310acf31561343432aea680","permalink":"/en/projects/occlum/reference-performance-report010/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/en/projects/occlum/reference-performance-report010/","summary":"Instructions on performance report The following performance report presents the performance comparison data of MOSN 0.1.0 with envoy in terms of pure TCP forwarding for Bolt and HTTP1.x protocols, mainly including QPS, RTT, failure rate, success rate and other indicators.\nIt is significant to note the following optimizations in v0.1.0 which are intended to improve the forwarding performance of MOSN.\n For thread model, MOSN uses the worker goroutine pool to handle stream events, and uses two independent goroutines to handle read and write IO separately.","tags":null,"title":"MOSN 0.1.0 performance report","type":"projects","url":"/en/projects/occlum/reference-performance-report010/","wordcount":730},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/mosn/reference-performance-report010/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"3cb22950b4be5a25b90f8aa1376786e9","permalink":"/projects/mosn/reference-performance-report010/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/mosn/reference-performance-report010/","summary":"","tags":null,"title":"MOSN 0.1.0 性能报告","type":"projects","url":"/projects/mosn/reference-performance-report010/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/mosn/reference-performance-report021/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"7b04a2e6cf1c4f9e732dc1dfdab74c57","permalink":"/projects/mosn/reference-performance-report021/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/mosn/reference-performance-report021/","summary":"","tags":null,"title":"MOSN 0.2.1 性能报告","type":"projects","url":"/projects/mosn/reference-performance-report021/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/mosn/overview/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"f25c59cbb758b4dae5de39e1f1c3a2f4","permalink":"/projects/mosn/overview/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/mosn/overview/","summary":"","tags":null,"title":"MOSN 介绍","type":"projects","url":"/projects/mosn/overview/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/mosn/concept/smooth-upgrade/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"2c09c045287c33c760368abe02bb8986","permalink":"/projects/mosn/concept/smooth-upgrade/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/mosn/concept/smooth-upgrade/","summary":"","tags":null,"title":"MOSN 平滑升级原理解析","type":"projects","url":"/projects/mosn/concept/smooth-upgrade/","wordcount":0},{"author":null,"categories":null,"content":"SOFARPC already supports using Nacos as a service registry. Suppose you have deployed Nacos Server locally according to Nacos\u0026amp;rsquo;s [Quick Start] (https://nacos.io/zh-cn/docs/quick-start.html), and the service discovery port is set to 8848 by default.\nTo use Nacos as a service registry in SOFARPC, you only need to add the following configuration to application.properties:\ncom.alipay.sofa.rpc.registry.address=nacos://127.0.0.1:8848 If you use SOFARPC directly, not SOFABoot, you need to add dependency of nacos, notice that version is what you want to use in your project.\n\u0026amp;lt;dependency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;com.alibaba.nacos\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;nacos-client\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;version\u0026amp;gt;${version}\u0026amp;lt;/version\u0026amp;gt; \u0026amp;lt;/dependency\u0026amp;gt; The current version of Nacos is supported:\nSOFARPC: 5.5.0, SOFABoot: 2.5.3。\nSOFARPC integration verification Nacos server version:0.6.0。\n","date":-62135596800,"description":"","dir":"projects/sofa-rpc/registry-nacos/","fuzzywordcount":200,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"cc161f22cd2145fe309e63087581adc1","permalink":"/en/projects/sofa-rpc/registry-nacos/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/en/projects/sofa-rpc/registry-nacos/","summary":"SOFARPC already supports using Nacos as a service registry. Suppose you have deployed Nacos Server locally according to Nacos\u0026rsquo;s [Quick Start] (https://nacos.io/zh-cn/docs/quick-start.html), and the service discovery port is set to 8848 by default.\nTo use Nacos as a service registry in SOFARPC, you only need to add the following configuration to application.properties:\ncom.alipay.sofa.rpc.registry.address=nacos://127.0.0.1:8848 If you use SOFARPC directly, not SOFABoot, you need to add dependency of nacos, notice that version is what you want to use in your project.","tags":null,"title":"Nacos","type":"projects","url":"/en/projects/sofa-rpc/registry-nacos/","wordcount":101},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/mosn/concept/nginx-envoy-mosn-hot-upgrade/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"63ca389b7e6e0a585d0183ad71887f65","permalink":"/projects/mosn/concept/nginx-envoy-mosn-hot-upgrade/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/mosn/concept/nginx-envoy-mosn-hot-upgrade/","summary":"","tags":null,"title":"Nginx vs Envoy vs MOSN 平滑升级原理解析","type":"projects","url":"/projects/mosn/concept/nginx-envoy-mosn-hot-upgrade/","wordcount":0},{"author":null,"categories":null,"content":"If you need to call SOFARPC through NodeJs, you can start by following this document.\nInstall First install the SOFARPC Node.\nhttps://github.com/sofastack/sofa-rpc-node\nUse the following command:\n$ npm install sofa-rpc-node --save Code sample Expose an RPC service and publish it to registry center \u0026amp;#39;use strict\u0026amp;#39;; const { RpcServer } = require(\u0026amp;#39;sofa-rpc-node\u0026amp;#39;).server; const { ZookeeperRegistry } = require(\u0026amp;#39;sofa-rpc-node\u0026amp;#39;).registry; const logger = console; // 1. Create a Zookeeper registry client const registry = new ZookeeperRegistry({ logger, Address: \u0026amp;#39;127.0.0.1:2181\u0026amp;#39;, // need to start a zkServer locally }); // 2. Create an RPC Server instance const server = new RpcServer({ logger, Registry, // incoming registry client  port: 12200, }); // 3. Add service server.addService({ interfaceName: \u0026amp;#39;com.nodejs.test.TestService\u0026amp;#39;, }, { async plus(a, b) { return a + b; }, }); // 4. Start the server and publish the service server.start() .then(() =\u0026amp;gt; { server.publish(); }); Call RPC service (Get service list from registry center) \u0026amp;#39;use strict\u0026amp;#39;; const { RpcClient } = require(\u0026amp;#39;sofa-rpc-node\u0026amp;#39;).client; const { ZookeeperRegistry } = require(\u0026amp;#39;sofa-rpc-node\u0026amp;#39;).registry; const logger = console; // 1. Create a Zookeeper registry client const registry = new ZookeeperRegistry({ logger, address: \u0026amp;#39;127.0.0.1:2181\u0026amp;#39;, }); async function invoke() { // 2. Create an RPC Client instance  const client = new RpcClient({ logger, registry, }); // 3. Create a service consumer  const consumer = client.createConsumer({ interfaceName: \u0026amp;#39;com.nodejs.test.TestService\u0026amp;#39;, }); // 4. Wait for the consumer ready (subscribe to the service list from registry center...)  await consumer.ready(); // 5. Execute generic call  const result = await consumer.invoke(\u0026amp;#39;plus\u0026amp;#39;, [ 1, 2 ], { responseTimeout: 3000 }); console.log(\u0026amp;#39;1 + 2 = \u0026amp;#39; + result); } invoke().catch(console.error); Call RPC service (direct call) \u0026amp;#39;use strict\u0026amp;#39;; const { RpcClient } = require(\u0026amp;#39;sofa-rpc-node\u0026amp;#39;).client; const logger = console; async function invoke() { // No need to pass in the registry instance  const client = new RpcClient({ logger, }); const consumer = client.createConsumer({ interfaceName: \u0026amp;#39;com.nodejs.test.TestService\u0026amp;#39;, serverHost: \u0026amp;#39;127.0.0.1:12200\u0026amp;#39;, // directly specify the service address  }); await consumer.ready(); const result = await consumer.invoke(\u0026amp;#39;plus\u0026amp;#39;, [ 1, 2 ], { responseTimeout: 3000 }); console.log(\u0026amp;#39;1 + 2 = \u0026amp;#39; + result); } invoke().catch(console.error); Expose and call the protobuf interface Define interface Define the interface with *.proto\nsyntax = \u0026amp;#34;proto3\u0026amp;#34;;package com.alipay.sofa.rpc.test;// optional option java_multiple_files = false;service ProtoService { rpc echoObj (EchoRequest) returns (EchoResponse) {}}message EchoRequest { string name = 1; Group group = 2;}message EchoResponse { int32 code = 1; string message = 2;}enum Group { A = 0; B = 1;}Server code \u0026amp;#39;use …","date":-62135596800,"description":"","dir":"projects/sofa-rpc/node-and-java-communicate/","fuzzywordcount":700,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"3329852e9991868a3cdc473b861ca750","permalink":"/en/projects/sofa-rpc/node-and-java-communicate/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/en/projects/sofa-rpc/node-and-java-communicate/","summary":"If you need to call SOFARPC through NodeJs, you can start by following this document.\nInstall First install the SOFARPC Node.\nhttps://github.com/sofastack/sofa-rpc-node\nUse the following command:\n$ npm install sofa-rpc-node --save Code sample Expose an RPC service and publish it to registry center \u0026#39;use strict\u0026#39;; const { RpcServer } = require(\u0026#39;sofa-rpc-node\u0026#39;).server; const { ZookeeperRegistry } = require(\u0026#39;sofa-rpc-node\u0026#39;).registry; const logger = console; // 1. Create a Zookeeper registry client const registry = new ZookeeperRegistry({ logger, Address: \u0026#39;127.","tags":null,"title":"NodeJS support","type":"projects","url":"/en/projects/sofa-rpc/node-and-java-communicate/","wordcount":624},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-rpc/node-and-java-communicate/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"3329852e9991868a3cdc473b861ca750","permalink":"/projects/sofa-rpc/node-and-java-communicate/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-rpc/node-and-java-communicate/","summary":"","tags":null,"title":"Node跨语言调用","type":"projects","url":"/projects/sofa-rpc/node-and-java-communicate/","wordcount":0},{"author":null,"categories":null,"content":"OkHttp Integration In this document will demonstrate how to use SOFATracer to track of OkHttp, this example [address] (https://github.com/sofastack-guides/sofa-tracer-guides/tree/sofaboot-2.x/tracer-sample-with-okhttp).\nAssuming you have built a simple Spring Web project based on SOFABoot, Then you can be operated by the following steps:\nDependency introduction \u0026amp;lt;!-- SOFATracer dependency --\u0026amp;gt; \u0026amp;lt;dependency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;com.alipay.sofa\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;tracer-sofa-boot-starter\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;/dependency\u0026amp;gt; \u0026amp;lt;!-- okhttp dependency --\u0026amp;gt; \u0026amp;lt;dependency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;com.squareup.okhttp3\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;okhttp\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;version\u0026amp;gt;3.12.1\u0026amp;lt;/version\u0026amp;gt; \u0026amp;lt;/dependency\u0026amp;gt; Project Configuration Then, add the parameters to be used by SOFATracer in the project\u0026amp;rsquo;s application.properties file, including spring.application.name that indicates the name of the current application and logging.path that specifies the log output directory.\n# Application Name spring.application.name=HttpClientDemo # logging path logging.path=./logs # port server.port=8081 Add a Controller that provides RESTful services In the project, provide a simple Controller, for example:\n@RestController public class SampleRestController { private final AtomicLong counter = new AtomicLong(0); /** * Request http://localhost:8081/okhttp?name=sofa * @param name name * @return Map of Result */ @RequestMapping(\u0026amp;#34;/okhttp\u0026amp;#34;) public Map\u0026amp;lt;String, Object\u0026amp;gt; greeting(@RequestParam(value = \u0026amp;#34;name\u0026amp;#34;, defaultValue = \u0026amp;#34;okhttp\u0026amp;#34;) String name) { Map\u0026amp;lt;String, Object\u0026amp;gt; map = new HashMap\u0026amp;lt;\u0026amp;gt;(); map.put(\u0026amp;#34;count\u0026amp;#34;, counter.incrementAndGet()); map.put(\u0026amp;#34;name\u0026amp;#34;, name); return map; } } Construct OkHttp to initiate a call to the RESTful service above The code example is as follows:\n Construct the OkHttp Client instance:  OkHttpClientInstance httpClient = new OkHttpClientInstance(); String httpGetUrl = \u0026amp;#34;http://localhost:8081/okhttp?name=sofa\u0026amp;#34;; String responseStr = httpClient.executeGet(httpGetUrl); Run Start the SOFABoot app and see the log in the console as follows:\n2019-04-12 13:38:09.896 INFO 51193 --- [ main] o.s.j.e.a.AnnotationMBeanExporter : Registering beans for JMX exposure on startup 2019-04-12 13:38:09.947 INFO 51193 --- [ main] s.b.c.e.t.TomcatEmbeddedServletContainer : Tomcat started on port(s): 8081 (http) 2019-04-12 13:38:09.952 INFO 51193 --- [ main] c.a.s.t.e.okhttp.OkHttpDemoApplication : Started OkHttpDemoApplication in 3.314 seconds (JVM running for 4.157) When there is a log similar to the following, the call to OkHttp is successful:\n2019-04-12 13:38:10.205 INFO 51193 --- [ main] c.a.s.t.e.okhttp.OkHttpDemoApplication : Response is {\u0026amp;quot;count\u0026amp;quot;:1,\u0026amp;quot;name\u0026amp;quot;:\u0026amp;quot;sofa\u0026amp;quot;} View log In the application.properties, the log printing directory we configured is ./logs, which is the root directory of the current application (we can configure it based on actual …","date":-62135596800,"description":"","dir":"projects/sofa-tracer/usage-of-okhttp/","fuzzywordcount":400,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"2b665b984dd33a4c04b5cd7b4de2410c","permalink":"/en/projects/sofa-tracer/usage-of-okhttp/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/en/projects/sofa-tracer/usage-of-okhttp/","summary":"OkHttp Integration In this document will demonstrate how to use SOFATracer to track of OkHttp, this example [address] (https://github.com/sofastack-guides/sofa-tracer-guides/tree/sofaboot-2.x/tracer-sample-with-okhttp).\nAssuming you have built a simple Spring Web project based on SOFABoot, Then you can be operated by the following steps:\nDependency introduction \u0026lt;!-- SOFATracer dependency --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.alipay.sofa\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;tracer-sofa-boot-starter\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- okhttp dependency --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.squareup.okhttp3\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;okhttp\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;3.12.1\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; Project Configuration Then, add the parameters to be used by SOFATracer in the project\u0026rsquo;s application.","tags":null,"title":"OkHttp Integration","type":"projects","url":"/en/projects/sofa-tracer/usage-of-okhttp/","wordcount":375},{"author":null,"categories":null,"content":"OkHttp Log Format SOFATracer integrates OkHttp and outputs the requested link log data format. The default is JSON data format.\nOkHttp digest log（okhttp-digest.log） The data is output in JSON format. Each key meaning is as follows:\n   key Meaning     time Log printing time   local.app Current application name   traceId TraceId   spanId SpanId   request.url Request URL   method Request HTTP method   result.code HTTP return status code   req.size.bytes Request Body Size   resp.size.bytes Response Body Size   time.cost.milliseconds Request time (ms)   current.thread.name Current thread name   remote.app remote app   baggage Transparently transmitted baggage data    Example:\n{\u0026amp;#34;time\u0026amp;#34;:\u0026amp;#34;2019-04-12 13:38:10.187\u0026amp;#34;,\u0026amp;#34;local.app\u0026amp;#34;:\u0026amp;#34;OkHttpDemo\u0026amp;#34;,\u0026amp;#34;traceId\u0026amp;#34;:\u0026amp;#34;0a0fe85a1555047489980100151193\u0026amp;#34;,\u0026amp;#34;spanId\u0026amp;#34;:\u0026amp;#34;0\u0026amp;#34;,\u0026amp;#34;request.url\u0026amp;#34;:\u0026amp;#34;http://localhost:8081/okhttp?name=sofa\u0026amp;#34;,\u0026amp;#34;method\u0026amp;#34;:\u0026amp;#34;GET\u0026amp;#34;,\u0026amp;#34;result.code\u0026amp;#34;:\u0026amp;#34;200\u0026amp;#34;,\u0026amp;#34;req.size.bytes\u0026amp;#34;:0,\u0026amp;#34;resp.size.bytes\u0026amp;#34;:0,\u0026amp;#34;time.cost.milliseconds\u0026amp;#34;:207,\u0026amp;#34;current.thread.name\u0026amp;#34;:\u0026amp;#34;main\u0026amp;#34;,\u0026amp;#34;remote.app\u0026amp;#34;:\u0026amp;#34;\u0026amp;#34;,\u0026amp;#34;baggage\u0026amp;#34;:\u0026amp;#34;\u0026amp;#34;} OkHttp stat log（okhttp-stat.log） stat.key is the collection of statistical keywords in this period, which uniquely determines a set of statistical data, including local.app, request.url, and method field.\nExample:\n{\u0026amp;#34;time\u0026amp;#34;:\u0026amp;#34;2019-04-12 13:39:09.720\u0026amp;#34;,\u0026amp;#34;stat.key\u0026amp;#34;:{\u0026amp;#34;method\u0026amp;#34;:\u0026amp;#34;GET\u0026amp;#34;,\u0026amp;#34;local.app\u0026amp;#34;:\u0026amp;#34;OkHttpDemo\u0026amp;#34;,\u0026amp;#34;request.url\u0026amp;#34;:\u0026amp;#34;http://localhost:8081/okhttp?name=sofa\u0026amp;#34;},\u0026amp;#34;count\u0026amp;#34;:1,\u0026amp;#34;total.cost.milliseconds\u0026amp;#34;:207,\u0026amp;#34;success\u0026amp;#34;:\u0026amp;#34;true\u0026amp;#34;,\u0026amp;#34;load.test\u0026amp;#34;:\u0026amp;#34;F\u0026amp;#34;} ","date":-62135596800,"description":"","dir":"projects/sofa-tracer/log-format-okhttp/","fuzzywordcount":200,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"dbc9555f43d0b2eda22f10ed45713fb9","permalink":"/en/projects/sofa-tracer/log-format-okhttp/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/en/projects/sofa-tracer/log-format-okhttp/","summary":"OkHttp Log Format SOFATracer integrates OkHttp and outputs the requested link log data format. The default is JSON data format.\nOkHttp digest log（okhttp-digest.log） The data is output in JSON format. Each key meaning is as follows:\n   key Meaning     time Log printing time   local.app Current application name   traceId TraceId   spanId SpanId   request.url Request URL   method Request HTTP method   result.","tags":null,"title":"OkHttp log","type":"projects","url":"/en/projects/sofa-tracer/log-format-okhttp/","wordcount":119},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-tracer/usage-of-okhttp/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"2b665b984dd33a4c04b5cd7b4de2410c","permalink":"/projects/sofa-tracer/usage-of-okhttp/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-tracer/usage-of-okhttp/","summary":"","tags":null,"title":"OkHttp 埋点接入","type":"projects","url":"/projects/sofa-tracer/usage-of-okhttp/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-tracer/log-format-okhttp/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"dbc9555f43d0b2eda22f10ed45713fb9","permalink":"/projects/sofa-tracer/log-format-okhttp/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-tracer/log-format-okhttp/","summary":"","tags":null,"title":"OkHttp 日志","type":"projects","url":"/projects/sofa-tracer/log-format-okhttp/","wordcount":0},{"author":null,"categories":null,"content":"OpenFeign Integration In this document will demonstrate how to use SOFATracer to track of OpenFeign.\nPrepare Environment The versions of the framework components used in this case are as follows:\n Spring Cloud Greenwich.RELEASE SOFABoot 3.1.1/SpringBoot 2.1.0.RELEASE SOFATracer 3.0.4 JDK 8  This case includes two submodules:\n tracer-sample-with-openfeign-provider service provider tracer-sample-with-openfeign-consumer service consumer  New SOFABoot project as parent project After creating a Spring Boot project, you need to introduce the SOFABoot\u0026amp;rsquo;s dependency. First, you need to unzip the generated zip package of Spring Boot project and modify the Maven project configuration file pom.xml.\n\u0026amp;lt;parent\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;org.springframework.boot\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;spring-boot-starter-parent\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;version\u0026amp;gt;${spring.boot.version}\u0026amp;lt;/version\u0026amp;gt; \u0026amp;lt;relativePath/\u0026amp;gt; \u0026amp;lt;/parent\u0026amp;gt; Replace the above with the followings:\n\u0026amp;lt;parent\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;com.alipay.sofa\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;sofaboot-dependencies\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;version\u0026amp;gt;${sofa.boot.version}\u0026amp;lt;/version\u0026amp;gt; \u0026amp;lt;/parent\u0026amp;gt; The ${sofa.boot.version} specifies the latest version of SOFABoot. For more information about SOFABoot versions, refer to Release notes.\nNew tracer-sample-with-openfeign-provider Module   Introducing dependence\n\u0026amp;lt;dependency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;com.alipay.sofa\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;tracer-sofa-boot-starter\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;/dependency\u0026amp;gt; \u0026amp;lt;dependency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;org.springframework.cloud\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;spring-cloud-starter-zookeeper-discovery\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;/dependency\u0026amp;gt; \u0026amp;lt;dependency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;org.springframework.cloud\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;spring-cloud-starter-openfeign\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;/dependency\u0026amp;gt;  SOFATracer versions are controlled by SOFABoot versions. If the SOFABoot versions used do not match, you need to manually specify a tracer version that is higher than 3.0.4.\n   application.properties Configuration\nspring.application.name=tracer-provider server.port=8800 spring.cloud.zookeeper.connect-string=localhost:2181 spring.cloud.zookeeper.discovery.enabled=true spring.cloud.zookeeper.discovery.instance-id=tracer-provider   Simple resource class\n@RestController public class UserController { @RequestMapping(\u0026amp;#34;/feign\u0026amp;#34;) public String testFeign(HttpServletRequest request) { return \u0026amp;#34;hello tracer feign\u0026amp;#34;; } }   New tracer-sample-with-openfeign-consumer Module   Introducing dependence\n\u0026amp;lt;dependency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;com.alipay.sofa\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;tracer-sofa-boot-starter\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;/dependency\u0026amp;gt; \u0026amp;lt;dependency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;org.springframework.cloud\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;spring-cloud-starter-zookeeper-discovery\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;/dependency\u0026amp;gt; \u0026amp;lt;dependency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;org.springframework.cloud\u0026amp;lt;/groupId\u0026amp;gt; …","date":-62135596800,"description":"","dir":"projects/sofa-tracer/usage-of-openfeign/","fuzzywordcount":400,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"75d9940033ad3b4342eab9d5c7a191f1","permalink":"/en/projects/sofa-tracer/usage-of-openfeign/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/en/projects/sofa-tracer/usage-of-openfeign/","summary":"OpenFeign Integration In this document will demonstrate how to use SOFATracer to track of OpenFeign.\nPrepare Environment The versions of the framework components used in this case are as follows:\n Spring Cloud Greenwich.RELEASE SOFABoot 3.1.1/SpringBoot 2.1.0.RELEASE SOFATracer 3.0.4 JDK 8  This case includes two submodules:\n tracer-sample-with-openfeign-provider service provider tracer-sample-with-openfeign-consumer service consumer  New SOFABoot project as parent project After creating a Spring Boot project, you need to introduce the SOFABoot\u0026rsquo;s dependency.","tags":null,"title":"OpenFeign Integration","type":"projects","url":"/en/projects/sofa-tracer/usage-of-openfeign/","wordcount":366},{"author":null,"categories":null,"content":"OpenFeign Log Format SOFATracer integrates Spring Cloud OpenFeign and outputs the requested link log data format. The default is JSON data format.\nSpring Cloud OpenFeign digest log（feign-digest.log） The data is output in JSON format. Each key meaning is as follows:\n   key Meaning     time Log printing time   local.app Current application name   traceId TraceId   spanId SpanId   request.url Request URL   method Request HTTP method   result.code HTTP return status code   error error massage   req.size.bytes Request Body Size   resp.size.bytes Response Body Size   time.cost.milliseconds Request time (ms)   current.thread.name Current thread name   remote.host remote host   remote.port remote port   component.client.impl component name   baggage Transparently transmitted baggage data    Example:\n{\u0026amp;#34;time\u0026amp;#34;:\u0026amp;#34;2019-03-28 18:08:06.800\u0026amp;#34;,\u0026amp;#34;local.app\u0026amp;#34;:\u0026amp;#34;tracer-consumer\u0026amp;#34;,\u0026amp;#34;traceId\u0026amp;#34;:\u0026amp;#34;0a0fe88f1553767685981100124403\u0026amp;#34;,\u0026amp;#34;spanId\u0026amp;#34;:\u0026amp;#34;0.1\u0026amp;#34;,\u0026amp;#34;request.url\u0026amp;#34;:\u0026amp;#34;http://10.15.232.143:8800/feign\u0026amp;#34;,\u0026amp;#34;method\u0026amp;#34;:\u0026amp;#34;GET\u0026amp;#34;,\u0026amp;#34;result.code\u0026amp;#34;:\u0026amp;#34;200\u0026amp;#34;,\u0026amp;#34;error\u0026amp;#34;:\u0026amp;#34;\u0026amp;#34;,\u0026amp;#34;req.size.bytes\u0026amp;#34;:0,\u0026amp;#34;resp.size.bytes\u0026amp;#34;:18,\u0026amp;#34;time.cost.milliseconds\u0026amp;#34;:206,\u0026amp;#34;current.thread.name\u0026amp;#34;:\u0026amp;#34;http-nio-8082-exec-1\u0026amp;#34;,\u0026amp;#34;remote.host\u0026amp;#34;:\u0026amp;#34;10.15.232.143\u0026amp;#34;,\u0026amp;#34;remote.port\u0026amp;#34;:\u0026amp;#34;8800\u0026amp;#34;,\u0026amp;#34;component.client.impl\u0026amp;#34;:\u0026amp;#34;open-feign\u0026amp;#34;,\u0026amp;#34;baggage\u0026amp;#34;:\u0026amp;#34;\u0026amp;#34;} Spring Cloud OpenFeign stat log（feign-stat.log） stat.key is the collection of statistical keywords in this period, which uniquely determines a set of statistical data, including local.app, request.url, and method field.\nExample:\n{\u0026amp;#34;time\u0026amp;#34;:\u0026amp;#34;2019-03-28 18:09:06.800\u0026amp;#34;,\u0026amp;#34;stat.key\u0026amp;#34;:{\u0026amp;#34;request.url\u0026amp;#34;:\u0026amp;#34;http://10.15.232.143:8800/feign\u0026amp;#34;,\u0026amp;#34;local.app\u0026amp;#34;:\u0026amp;#34;tracer-consumer\u0026amp;#34;,\u0026amp;#34;method\u0026amp;#34;:\u0026amp;#34;GET\u0026amp;#34;},\u0026amp;#34;count\u0026amp;#34;:1,\u0026amp;#34;total.cost.milliseconds\u0026amp;#34;:206,\u0026amp;#34;success\u0026amp;#34;:\u0026amp;#34;Y\u0026amp;#34;,\u0026amp;#34;load.test\u0026amp;#34;:\u0026amp;#34;F\u0026amp;#34;} ","date":-62135596800,"description":"","dir":"projects/sofa-tracer/log-format-openfeign/","fuzzywordcount":200,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"81864817e297a7bf019705c72f8ff0a8","permalink":"/en/projects/sofa-tracer/log-format-openfeign/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/en/projects/sofa-tracer/log-format-openfeign/","summary":"OpenFeign Log Format SOFATracer integrates Spring Cloud OpenFeign and outputs the requested link log data format. The default is JSON data format.\nSpring Cloud OpenFeign digest log（feign-digest.log） The data is output in JSON format. Each key meaning is as follows:\n   key Meaning     time Log printing time   local.app Current application name   traceId TraceId   spanId SpanId   request.url Request URL   method Request HTTP method   result.","tags":null,"title":"OpenFeign log","type":"projects","url":"/en/projects/sofa-tracer/log-format-openfeign/","wordcount":134},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-tracer/usage-of-openfeign/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"75d9940033ad3b4342eab9d5c7a191f1","permalink":"/projects/sofa-tracer/usage-of-openfeign/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-tracer/usage-of-openfeign/","summary":"","tags":null,"title":"OpenFeign 埋点接入","type":"projects","url":"/projects/sofa-tracer/usage-of-openfeign/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-tracer/log-format-openfeign/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"81864817e297a7bf019705c72f8ff0a8","permalink":"/projects/sofa-tracer/log-format-openfeign/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-tracer/log-format-openfeign/","summary":"","tags":null,"title":"OpenFeign 日志","type":"projects","url":"/projects/sofa-tracer/log-format-openfeign/","wordcount":0},{"author":null,"categories":null,"content":"MOSN\u0026amp;rsquo;s official website mosn.io is under construction. The documents are temporarily hosted here.\nMOSN is a network proxy written in Golang. It can be used as a cloud-native network data plane, providing services with the following proxy functions: multi-protocol, modular, intelligent, and secure. MOSN is the short name of Modular Open Smart Network-proxy. MOSN can be integrated with any Service Mesh wich support xDS API. It can also be used as an independent Layer 4 or Layer 7 load balancer, API Gateway, cloud-native Ingress, etc.\nCore competence  Integrated with Istio  Integrated with Istio 1.0 and V4 APIs to run based on full dynamic resource configuration   Core forwarding  Self-contained Web server Support TCP proxy Support TProxy mode   Multi-protocol  Support HTTP/1.1 and HTTP/2 Support SOFARPC Support Dubbo protocol (under development)   Core routing  Support Virtual Host routing Support Headers/URL/Prefix routing Support Host Metadata-based Subset routing Support retry   Backend Management and load balancing  Support connection pool Support throttling Support active backend health check Support load balancing strategies, such as Random and RR Support Host Metadata-based Subset load balancing strategy   Observability  Observe network data Observing protocol data   TLS  Support HTTP/1.1 on TLS Support HTTP/2.0 on TLS Support SOFARPC on TLS   Process management + Support smooth reload + Support smooth upgrade Extension capability + Support custom private protocols + Support adding custom extensions in protocol at the TCP IO layer  Acknowledgement MOSN builds on open source projects such as Envoy and Istio, thanks to the efforts of the open source community.\n","date":-62135596800,"description":"","dir":"projects/mosn/overview/","fuzzywordcount":300,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"f25c59cbb758b4dae5de39e1f1c3a2f4","permalink":"/en/projects/mosn/overview/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/en/projects/mosn/overview/","summary":"MOSN\u0026rsquo;s official website mosn.io is under construction. The documents are temporarily hosted here.\nMOSN is a network proxy written in Golang. It can be used as a cloud-native network data plane, providing services with the following proxy functions: multi-protocol, modular, intelligent, and secure. MOSN is the short name of Modular Open Smart Network-proxy. MOSN can be integrated with any Service Mesh wich support xDS API. It can also be used as an independent Layer 4 or Layer 7 load balancer, API Gateway, cloud-native Ingress, etc.","tags":null,"title":"Overview","type":"projects","url":"/en/projects/mosn/overview/","wordcount":245},{"author":null,"categories":null,"content":"MOSN\u0026amp;rsquo;s official website mosn.io is under construction. The documents are temporarily hosted here.\nMOSN is a network proxy written in Golang. It can be used as a cloud-native network data plane, providing services with the following proxy functions: multi-protocol, modular, intelligent, and secure. MOSN is the short name of Modular Open Smart Network-proxy. MOSN can be integrated with any Service Mesh wich support xDS API. It can also be used as an independent Layer 4 or Layer 7 load balancer, API Gateway, cloud-native Ingress, etc.\nCore competence  Integrated with Istio  Integrated with Istio 1.0 and V4 APIs to run based on full dynamic resource configuration   Core forwarding  Self-contained Web server Support TCP proxy Support TProxy mode   Multi-protocol  Support HTTP/1.1 and HTTP/2 Support SOFARPC Support Dubbo protocol (under development)   Core routing  Support Virtual Host routing Support Headers/URL/Prefix routing Support Host Metadata-based Subset routing Support retry   Backend Management and load balancing  Support connection pool Support throttling Support active backend health check Support load balancing strategies, such as Random and RR Support Host Metadata-based Subset load balancing strategy   Observability  Observe network data Observing protocol data   TLS  Support HTTP/1.1 on TLS Support HTTP/2.0 on TLS Support SOFARPC on TLS   Process management + Support smooth reload + Support smooth upgrade Extension capability + Support custom private protocols + Support adding custom extensions in protocol at the TCP IO layer  Acknowledgement MOSN builds on open source projects such as Envoy and Istio, thanks to the efforts of the open source community.\n","date":-62135596800,"description":"","dir":"projects/occlum/overview/","fuzzywordcount":300,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"1d8851c81ed6dacf04ebbe841d1b2835","permalink":"/en/projects/occlum/overview/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/en/projects/occlum/overview/","summary":"MOSN\u0026rsquo;s official website mosn.io is under construction. The documents are temporarily hosted here.\nMOSN is a network proxy written in Golang. It can be used as a cloud-native network data plane, providing services with the following proxy functions: multi-protocol, modular, intelligent, and secure. MOSN is the short name of Modular Open Smart Network-proxy. MOSN can be integrated with any Service Mesh wich support xDS API. It can also be used as an independent Layer 4 or Layer 7 load balancer, API Gateway, cloud-native Ingress, etc.","tags":null,"title":"Overview","type":"projects","url":"/en/projects/occlum/overview/","wordcount":245},{"author":null,"categories":null,"content":"Introduction SOFALookout is a lightweight and open source middleware service of Ant Financial that solves the metrics and monitoring issues of the system. The services it provides include: Event logging, collecting, processing, storing, and querying of Metrics. The open source project consists of two separate parts, the client and server side services.\nClient-side service SOFALookout Client is a Java SDK that helps developers log events of metrics in project code. It also allows you to view real-time status information for the Java application.\n +------------------+ Reg: API: | dimension meters +--------+ +------------------+ | flatmap +---------------------------+ +-----------\u0026amp;gt; | Default/DropwizardMetrics| | +---------------------------+ | | http +--------------+ +-----------\u0026amp;gt; |Lookout server| | +--------------+ +----------------------+ | add common tags dimension EXTS: | JVM,OS,GC... +----+ +----------------------+ Server-side services SOFALookout Server helps you solve system state metrics in a distributed environment. Its data sources include, but not limited to the projects that use the lookout-client package. The server will be available in the next release, so stay tuned.\n","date":-62135596800,"description":"","dir":"projects/sofa-lookout/overview/","fuzzywordcount":200,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"8a8a8ef02ca95d4d11e3e4b195bbae70","permalink":"/en/projects/sofa-lookout/overview/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/en/projects/sofa-lookout/overview/","summary":"Introduction SOFALookout is a lightweight and open source middleware service of Ant Financial that solves the metrics and monitoring issues of the system. The services it provides include: Event logging, collecting, processing, storing, and querying of Metrics. The open source project consists of two separate parts, the client and server side services.\nClient-side service SOFALookout Client is a Java SDK that helps developers log events of metrics in project code. It also allows you to view real-time status information for the Java application.","tags":null,"title":"Overview","type":"projects","url":"/en/projects/sofa-lookout/overview/","wordcount":160},{"author":null,"categories":null,"content":"SOFARPC is a Java-based RPC service framework open sourced by Ant Financial, which provides remote service call between applications, high scalability and fault tolerance features. Currently, all RPC calls of Ant Financial businesses use SOFARPC. SOFARPC provides users with functions such as load balancing, traffic forwarding, link tracing, link data transparent transmission, and fault removal.\nIn addition, SOFARPC supports different protocols, currently including bolt, RESTful, dubbo, and H2C. Bolt is a network communication framework based on Netty developed by Ant Financial Services Group.\nImplementation principle  When an SOFARPC application is started, if the current application needs to publish RPC services, SOFARPC will register these services to the service registry center. As shown in the figure, the service points to the Registry. When the SOFARPC application that references this service is started, it subscribes to the metadata information of the corresponding service from the service registry. After receiving the subscription request, the service registry will push the publisher\u0026amp;rsquo;s metadata list to the service reference party in real time. As shown in the figure, Register points to Reference. When the service reference party gets the addresses, it can pick up the address and initiate the call. As shown in the figure, Reference points to Service.  ","date":-62135596800,"description":"","dir":"projects/sofa-rpc/overview/","fuzzywordcount":300,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"62f0806ad40fcaaeab6a82470b14a2e2","permalink":"/en/projects/sofa-rpc/overview/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/en/projects/sofa-rpc/overview/","summary":"SOFARPC is a Java-based RPC service framework open sourced by Ant Financial, which provides remote service call between applications, high scalability and fault tolerance features. Currently, all RPC calls of Ant Financial businesses use SOFARPC. SOFARPC provides users with functions such as load balancing, traffic forwarding, link tracing, link data transparent transmission, and fault removal.\nIn addition, SOFARPC supports different protocols, currently including bolt, RESTful, dubbo, and H2C. Bolt is a network communication framework based on Netty developed by Ant Financial Services Group.","tags":null,"title":"Overview","type":"projects","url":"/en/projects/sofa-rpc/overview/","wordcount":203},{"author":null,"categories":null,"content":"Introduction This sample project shows how to build an executable-ark-jar based on a springboot project with the tool of sofa-ark-maven-plugin.\nPreparation As this project depends on the ark-plugin generated by the project of sample-ark-plugin, please ensure the sample sample-ark-plugin installed in your local maven repository before run this project.\nTools The Maven plugin of sofa-ark-maven-plugin is provided to build a standard executable-ark-jar, and just needs some simple configurations. Its maven coordinates is:\n\u0026amp;lt;plugin\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;com.alipay.sofa\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;sofa-ark-maven-plugin\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;version\u0026amp;gt;${sofa.ark.version}\u0026amp;lt;/version\u0026amp;gt; \u0026amp;lt;/plugin\u0026amp;gt;  Refer to the document of plugin use for details\n Step By Step Based on the sample project, we will describe step by step how to package a Spring Boot Web project to an executable Ark package\nCreating Spring Boot Web Project Download a standard Spring Boot Web project from the official website https://start.spring.io/\nIntroducing sample-ark-plugin Configure items as follows under the main pom.xml of the project, and add the Ark Plugin dependency generated from another sample project, reference documents\n\u0026amp;lt;dependency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;com.alipay.sofa\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;sample-ark-plugin\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;classifier\u0026amp;gt;ark-plugin\u0026amp;lt;/classifier\u0026amp;gt; \u0026amp;lt;version\u0026amp;gt;${sofa.ark.version}\u0026amp;lt;/version\u0026amp;gt; \u0026amp;lt;/dependency\u0026amp;gt; Configuring Packaging Plugin Configure the Maven plugin (sofa-Ark-maven-plugin) as follows under the main pom.xml of the project:\n\u0026amp;lt;build\u0026amp;gt; \u0026amp;lt;plugins\u0026amp;gt; \u0026amp;lt;plugin\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;com.alipay.sofa\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;sofa-ark-maven-plugin\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;executions\u0026amp;gt; \u0026amp;lt;execution\u0026amp;gt; \u0026amp;lt;id\u0026amp;gt;default-cli\u0026amp;lt;/id\u0026amp;gt; \u0026amp;lt;!--goal executed to generate executable-ark-jar --\u0026amp;gt; \u0026amp;lt;goals\u0026amp;gt; \u0026amp;lt;goal\u0026amp;gt;repackage\u0026amp;lt;/goal\u0026amp;gt; \u0026amp;lt;/goals\u0026amp;gt; \u0026amp;lt;configuration\u0026amp;gt; \u0026amp;lt;!--specify destination where executable-ark-jar will be saved, default saved to ${project.build.directory}--\u0026amp;gt; \u0026amp;lt;outputDirectory\u0026amp;gt;./target\u0026amp;lt;/outputDirectory\u0026amp;gt; \u0026amp;lt;!--default none--\u0026amp;gt; \u0026amp;lt;arkClassifier\u0026amp;gt;executable-ark\u0026amp;lt;/arkClassifier\u0026amp;gt; \u0026amp;lt;/configuration\u0026amp;gt; \u0026amp;lt;/execution\u0026amp;gt; \u0026amp;lt;/executions\u0026amp;gt; \u0026amp;lt;/plugin\u0026amp;gt; \u0026amp;lt;/plugins\u0026amp;gt; \u0026amp;lt;/build\u0026amp;gt; In this sample project, we have configured only a fraction of the items, but they are enough to generate an executable Ark package. The meaning of each configuration item is shown below:\n  outputDirectory: the directory for the output Ark package files after packaging of mvn package;\n  arkClassifier: the value of classifier included in the Maven coordinates of the Ark specified for release, which is null by default;\n  Note that arkClassifier is null by default. If you do not specify a classifier, the Jar package uploaded to the repository is actually an executable Ark package. If you need to distinguish it from common packaging, you need to configure a value for this …","date":-62135596800,"description":"","dir":"projects/sofa-boot/sofa-ark-ark-demo/","fuzzywordcount":800,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"2c97c409788f41051c79836d277997be","permalink":"/en/projects/sofa-boot/sofa-ark-ark-demo/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/en/projects/sofa-boot/sofa-ark-ark-demo/","summary":"Introduction This sample project shows how to build an executable-ark-jar based on a springboot project with the tool of sofa-ark-maven-plugin.\nPreparation As this project depends on the ark-plugin generated by the project of sample-ark-plugin, please ensure the sample sample-ark-plugin installed in your local maven repository before run this project.\nTools The Maven plugin of sofa-ark-maven-plugin is provided to build a standard executable-ark-jar, and just needs some simple configurations. Its maven coordinates is:","tags":null,"title":"Package into Ark JAR","type":"projects","url":"/en/projects/sofa-boot/sofa-ark-ark-demo/","wordcount":757},{"author":null,"categories":null,"content":"Introduction This sample project demonstrates how to use Maven plugins to package a general Java project into an Ark plugin that meets the standard specifications.\nBackground In actual development, dependency conflicts often occur. Suppose we have developed a class library named sample-lib, and it might conflict with the existing dependencies when the business application is imported. At this point, we hope the library can be isolated from other business dependencies, without negotiating with each other over dependency package versions. Ark Plugin is exactly the result of our best practice under this demand background. It runs on top of the Ark Container, which is loaded by a container. Any Ark Plugin is loaded by a separate ClassLoader to be isolated from each other. There are four concepts of Ark Plugin:\n  Import class: When the plugin starts up, a plugin used to export the class is first delegated to load the class. If that fails, it will attempt to load from inside this plugin;\n  Export class: If the class has been imported by other plugins, it will be first loaded from this plugin;\n  Import resource: When the plugin is searching for resources, a plugin used to export the class is first delegated to load the class. If that fails, it will attempt to load from inside this plugin.\n  Export resource: If the resource has been imported by other plugins, it will be first loaded from this plugin;\n   Refer to the plugin specifications for more details\n Tools Upon simple configurations, the officially provided Maven plugin sofa-ark-plugin-maven-plugin can package common Java projects into a standard-format Ark Plugin. The coordinates of Maven plugin are:\n\u0026amp;lt;plugin\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;com.alipay.sofa\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;sofa-ark-plugin-maven-plugin\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;version\u0026amp;gt;${sofa.ark.version}\u0026amp;lt;/version\u0026amp;gt; \u0026amp;lt;/plugin\u0026amp;gt;  For more information, see the plugin configuration document\n Getting started Based on this sample project, we will describe how to build an Ark plugin step by step.\nCreate a Standard Maven Project This is a standard Maven project consisting of two modules:\n  The common module: contains the plugin export class\n  The plugin module: contains com.alipay.sofa.ark.spi.service.PluginActivator interface implementation class and a plugin service class. The plugin packaging tool sofa-ark-plugin-maven-plugin can be configured in the module\u0026amp;rsquo;s pom.xml file;\n  Configuring Packaging Plugin Package the plugin in the pom.xml file according to the following configurations:\n\u0026amp;lt;build\u0026amp;gt; \u0026amp;lt;plugins\u0026amp;gt; \u0026amp;lt;plugin\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;com.alipay.sofa\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;sofa-ark-plugin-maven-plugin\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;version\u0026amp;gt;${project.version}\u0026amp;lt;/version\u0026amp;gt; \u0026amp;lt;executions\u0026amp;gt; \u0026amp;lt;execution\u0026amp;gt; \u0026amp;lt;id\u0026amp;gt;default-cli\u0026amp;lt;/id\u0026amp;gt; \u0026amp;lt;goals\u0026amp;gt; \u0026amp;lt;goal\u0026amp;gt;ark-plugin\u0026amp;lt;/goal\u0026amp;gt; \u0026amp;lt;/goals\u0026amp;gt; \u0026amp;lt;configuration\u0026amp;gt; \u0026amp;lt;!--can only configure no more than one activator--\u0026amp;gt; …","date":-62135596800,"description":"","dir":"projects/sofa-boot/sofa-ark-ark-plugin-demo/","fuzzywordcount":700,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"d8125843ced13352dd228299f222c74d","permalink":"/en/projects/sofa-boot/sofa-ark-ark-plugin-demo/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/en/projects/sofa-boot/sofa-ark-ark-plugin-demo/","summary":"Introduction This sample project demonstrates how to use Maven plugins to package a general Java project into an Ark plugin that meets the standard specifications.\nBackground In actual development, dependency conflicts often occur. Suppose we have developed a class library named sample-lib, and it might conflict with the existing dependencies when the business application is imported. At this point, we hope the library can be isolated from other business dependencies, without negotiating with each other over dependency package versions.","tags":null,"title":"Package into Ark Plugin","type":"projects","url":"/en/projects/sofa-boot/sofa-ark-ark-plugin-demo/","wordcount":661},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-mesh/pilot-readme/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"7b098e394986596d8fb01e1fe2120829","permalink":"/projects/sofa-mesh/pilot-readme/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-mesh/pilot-readme/","summary":"","tags":null,"title":"Pilot 介绍","type":"projects","url":"/projects/sofa-mesh/pilot-readme/","wordcount":0},{"author":null,"categories":null,"content":"Print traceId And spanId To Application Log SLF4J provides MDC (Mapped Diagnostic Contexts), which supports you to define and modify log output formats and content. This document introduces the SLF4J MDC feature integrated in SOFATracer, which allows you to output the current SOFATracer context TraceId and SpanId with simply modifying the log configuration file.\nPrerequisites In order to properly print the TraceId and SpanId parameters in the logs of the application, the log programming interface needs to be programmed for SLF4J. That is, the programming interface for printing log does not rely on specific log implementation.\n\u0026amp;lt;dependency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;org.slf4j\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;slf4j-api\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;/dependency\u0026amp;gt; Introduce dependency For SOFABoot or Spring Boot application, you need to introduce the specific log implementation. It is recommended to introduce Logback and Log4j2 instead of Log4j. Also, it is suggested to use only one log implementation rather than multiple implementations.\n Logback implementation:  \u0026amp;lt;dependency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;org.springframework.boot\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;spring-boot-starter-logging\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;/dependency\u0026amp;gt;  Log4j2 implementation:  \u0026amp;lt;dependency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;org.springframework.boot\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;spring-boot-starter-log4j2\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;!--SOFABoot does not control log4j2 version --\u0026amp;gt; \u0026amp;lt;version\u0026amp;gt;1.4.2.RELEASE\u0026amp;lt;/version\u0026amp;gt; \u0026amp;lt;/dependency\u0026amp;gt; Configuration method The corresponding TraceId and SpanId are printed based on SLF4J MDC. First, the log programming interface in application should be oriented to SLF4J, as follows:\n/ / Introduce interface import org.slf4j.Logger; import org.slf4j.LoggerFactory; / / Construct log printing instance private static final Logger logger = LoggerFactory.getLogger(XXX.class); Second, to correctly print the TraceId and SpanId parameters, we also need to configure the extra parameters of PatternLayout in the log configuration file. The two parameters are %X{SOFA-TraceId} and %X. {SOFA-SpanId}, whose values ​​can be obtained from MDC.\npattern parameter configured with Logback as an example:\n\u0026amp;lt;pattern\u0026amp;gt;%d{yyyy-MM-dd HH:mm:ss.SSS} %5p [%X{SOFA-TraceId}, %X{SOFA-SpanId}] ---- %m%n\u0026amp;lt;/pattern\u0026amp;gt;  Key configuration items: As a part of the Logback pattern, [%X{SOFA-TraceId},%X{SOFA-SpanId}] replaces the placeholders in the pattern with the specific TraceId and SpanId in the current thread process when the corresponding appender is called. If there is no corresponding TraceId and SpanId in the current thread, the placeholder is replaced with \u0026amp;ldquo;null\u0026amp;rdquo;.  Log4j2 PatternLayout configuration sample:\n\u0026amp;lt;PatternLayout pattern=\u0026amp;#34;%d{yyyy-MM-dd HH:mm:ss.SSS} %5p [%X{SOFA-TraceId},%X{SOFA-SpanId}] ---- %m%n \u0026amp;#34; /\u0026amp;gt; Log4j PatternLayout configuration sample:\n\u0026amp;lt;layout class=\u0026amp;#34;org.apache.log4j.PatternLayout\u0026amp;#34;\u0026amp;gt; \u0026amp;lt;param name=\u0026amp;#34;ConversionPattern\u0026amp;#34; …","date":-62135596800,"description":"","dir":"projects/sofa-tracer/print-traceid-spanid/","fuzzywordcount":400,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"0d8cc680f811d1db2cffddbba269571c","permalink":"/en/projects/sofa-tracer/print-traceid-spanid/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/en/projects/sofa-tracer/print-traceid-spanid/","summary":"Print traceId And spanId To Application Log SLF4J provides MDC (Mapped Diagnostic Contexts), which supports you to define and modify log output formats and content. This document introduces the SLF4J MDC feature integrated in SOFATracer, which allows you to output the current SOFATracer context TraceId and SpanId with simply modifying the log configuration file.\nPrerequisites In order to properly print the TraceId and SpanId parameters in the logs of the application, the log programming interface needs to be programmed for SLF4J.","tags":null,"title":"Print traceId and spanId in application log","type":"projects","url":"/en/projects/sofa-tracer/print-traceid-spanid/","wordcount":360},{"author":null,"categories":null,"content":"Describe several methods to use SOFARPC in different environments.\n Use API in non-Spring environment Use XML in SOFABoot environment Use Annotation in SOFABoot environment Use dynamic API in SOFABoot environment  ","date":-62135596800,"description":"","dir":"projects/sofa-rpc/programming/","fuzzywordcount":100,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"9a947dae761c84aa4d95121c076ac552","permalink":"/en/projects/sofa-rpc/programming/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/en/projects/sofa-rpc/programming/","summary":"Describe several methods to use SOFARPC in different environments.\n Use API in non-Spring environment Use XML in SOFABoot environment Use Annotation in SOFABoot environment Use dynamic API in SOFABoot environment  ","tags":null,"title":"Programming","type":"projects","url":"/en/projects/sofa-rpc/programming/","wordcount":30},{"author":null,"categories":null,"content":"Configure HTTP protocol Mesher  See the sample project that MOSN forwards HTTP http-sample.  Configure SOFARPC protocol Mesher  See the sample project that MOSN forwards SOFARPC sofarpc-sample.  Configure TCP protocol Mesher  See the sample project that MOSN serves as a TCP Proxy tcpproxy-sample.  ","date":-62135596800,"description":"","dir":"projects/mosn/quick-start-run-samples/","fuzzywordcount":100,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"600c182fdee786a59e14899ba0fce8a1","permalink":"/en/projects/mosn/quick-start-run-samples/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/en/projects/mosn/quick-start-run-samples/","summary":"Configure HTTP protocol Mesher  See the sample project that MOSN forwards HTTP http-sample.  Configure SOFARPC protocol Mesher  See the sample project that MOSN forwards SOFARPC sofarpc-sample.  Configure TCP protocol Mesher  See the sample project that MOSN serves as a TCP Proxy tcpproxy-sample.  ","tags":null,"title":"Project sample","type":"projects","url":"/en/projects/mosn/quick-start-run-samples/","wordcount":42},{"author":null,"categories":null,"content":"Configure HTTP protocol Mesher  See the sample project that MOSN forwards HTTP http-sample.  Configure SOFARPC protocol Mesher  See the sample project that MOSN forwards SOFARPC sofarpc-sample.  Configure TCP protocol Mesher  See the sample project that MOSN serves as a TCP Proxy tcpproxy-sample.  ","date":-62135596800,"description":"","dir":"projects/occlum/quick-start-run-samples/","fuzzywordcount":100,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"93784b2fca67986e00aa3bc5ea0dbb6b","permalink":"/en/projects/occlum/quick-start-run-samples/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/en/projects/occlum/quick-start-run-samples/","summary":"Configure HTTP protocol Mesher  See the sample project that MOSN forwards HTTP http-sample.  Configure SOFARPC protocol Mesher  See the sample project that MOSN forwards SOFARPC sofarpc-sample.  Configure TCP protocol Mesher  See the sample project that MOSN serves as a TCP Proxy tcpproxy-sample.  ","tags":null,"title":"Project sample","type":"projects","url":"/en/projects/occlum/quick-start-run-samples/","wordcount":42},{"author":null,"categories":null,"content":"Some sample projects are provided in the source project to assist in the use of the project. The readme file of the sample project has additional instructions for use, and you need to import these sample projects separately into IDE.\nClient-side sample project  lookout-client-samples-java   This sample project demonstrates how to use and configure the client in code form in a normal Java project.\n lookout-client-samples-boot   This sample project demonstrates how to use and configure the client in a SpringBoot (or SofaBoot) project.\n lookout-client-samples-prometheus   The sample project demonstrates how to use and configure the client to use prometheus in a SpringBoot (or SofaBoot) project.\nServer-side sample project ","date":-62135596800,"description":"","dir":"projects/sofa-lookout/use-guide-samples/","fuzzywordcount":200,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"a8a0fcd3f99ce2fb46e4d543e30797c9","permalink":"/en/projects/sofa-lookout/use-guide-samples/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/en/projects/sofa-lookout/use-guide-samples/","summary":"Some sample projects are provided in the source project to assist in the use of the project. The readme file of the sample project has additional instructions for use, and you need to import these sample projects separately into IDE.\nClient-side sample project  lookout-client-samples-java   This sample project demonstrates how to use and configure the client in code form in a normal Java project.\n lookout-client-samples-boot   This sample project demonstrates how to use and configure the client in a SpringBoot (or SofaBoot) project.","tags":null,"title":"Project sample","type":"projects","url":"/en/projects/sofa-lookout/use-guide-samples/","wordcount":105},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/mosn/configuration/listener/network-filter/proxy/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"b04f78179a47a64d7e209b6660bfa80f","permalink":"/projects/mosn/configuration/listener/network-filter/proxy/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/mosn/configuration/listener/network-filter/proxy/","summary":"","tags":null,"title":"proxy","type":"projects","url":"/projects/mosn/configuration/listener/network-filter/proxy/","wordcount":0},{"author":null,"categories":null,"content":"﻿SOFABoot provides developers with three ways to publish and reference JVM services\n XML Annotation Programming API  XML Service Publish First, we need to define a Bean:\n\u0026amp;lt;bean id=\u0026amp;#34;sampleService\u0026amp;#34; class=\u0026amp;#34;com.alipay.sofa.runtime.test.service.SampleServiceImpl\u0026amp;#34;\u0026amp;gt; Then, publish the Bean as a SOFA JVM service by using the Spring extension tag provided by SOFA.\n\u0026amp;lt;sofa:service interface=\u0026amp;#34;com.alipay.sofa.runtime.test.service.SampleService\u0026amp;#34; ref=\u0026amp;#34;sampleService\u0026amp;#34;\u0026amp;gt; \u0026amp;lt;sofa:binding.jvm/\u0026amp;gt; \u0026amp;lt;/sofa:service\u0026amp;gt; In the preceding configuration, the interface parameter indicates the interface for releasing services, and the ref parameter indicates the Bean to be published as a JVM service.\nAt this point, we have published a JVM service success.\nService Reference We can also reference a JVM service by using the Spring extension tag provided by SOFA.\n\u0026amp;lt;sofa:reference interface=\u0026amp;#34;com.alipay.sofa.runtime.test.service.SampleService\u0026amp;#34; id=\u0026amp;#34;sampleServiceRef\u0026amp;#34;\u0026amp;gt; \u0026amp;lt;sofa:binding.jvm/\u0026amp;gt; \u0026amp;lt;/sofa:reference\u0026amp;gt; In the preceding configuration, the interface parameter indicates the service interface, which must be consistent with that configured during the service publish. The meaning of the ID attribute is the same as Spring BeanId. A Spring Bean with the ID sampleServiceRef will be generated from the above configuration. We can inject it anywhere in the Spring context of the current SOFABoot module.\n service/reference tag also supports RPC service publish, with related document: RPC Service Publish and Reference\n Annotation  Warning\nIf a service has been annotated with @SofaService, it cannot be published in the mode of XML. Choose one mode to publish the service instead of a mixture of two modes.\n In addition to publishing JVM services and reference through XML, SOFABoot also provides Annotation for JVM services publish and reference. To publish JVM services through Annotation, we only need to add an annotation @SofaService to the implementation class, as follows:\n@SofaService public class SampleImpl implements SampleInterface { public void test() { } }  Prompt\n@SofaService is used to publish a Spring Bean as a JVM service, which means that although you may not write the configuration of \u0026amp;lt;sofa:service/\u0026amp;gt;, you still need to configure the class annotated with @SofaService as a Spring Bean.\n When configuring \u0026amp;lt;sofa:service/\u0026amp;gt; in the XML mode, you have configured an interface for the service. However, when using the @SofaService annotation, you haven\u0026amp;rsquo;t configured the service interface. This is because when the class annotated with @SofaService has implemented only one interface, the framework directly uses the interface as the service interface. What if the class annotated with @SofaService has implemented multiple interfaces? In this case, you can set the interfaceType field of @SofaService to specify the service interface, as shown below:\n@SofaService(interfaceType=SampleInterface.class) public …","date":-62135596800,"description":"","dir":"projects/sofa-boot/module-service/","fuzzywordcount":1100,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"527472fbe57ce450e4e2b41d878704cb","permalink":"/en/projects/sofa-boot/module-service/","publishdate":"0001-01-01T00:00:00Z","readingtime":5,"relpermalink":"/en/projects/sofa-boot/module-service/","summary":"﻿SOFABoot provides developers with three ways to publish and reference JVM services\n XML Annotation Programming API  XML Service Publish First, we need to define a Bean:\n\u0026lt;bean id=\u0026#34;sampleService\u0026#34; class=\u0026#34;com.alipay.sofa.runtime.test.service.SampleServiceImpl\u0026#34;\u0026gt; Then, publish the Bean as a SOFA JVM service by using the Spring extension tag provided by SOFA.\n\u0026lt;sofa:service interface=\u0026#34;com.alipay.sofa.runtime.test.service.SampleService\u0026#34; ref=\u0026#34;sampleService\u0026#34;\u0026gt; \u0026lt;sofa:binding.jvm/\u0026gt; \u0026lt;/sofa:service\u0026gt; In the preceding configuration, the interface parameter indicates the interface for releasing services, and the ref parameter indicates the Bean to be published as a JVM service.","tags":null,"title":"Publish and reference JVM services","type":"projects","url":"/en/projects/sofa-boot/module-service/","wordcount":1001},{"author":null,"categories":null,"content":"To run this demo, you should sign up an Ant Financial technology account. Please see Ant Finanical Official Site to see more details.\nDemo content Service Mesh applies the communication capabilities between services to the infrastructure, thus decoupling and lightweighting applications.\nHowever, Service Mesh itself is still complex. CloudMesh can easily implement Service Mesh technology by hosting Service Mesh on the cloud.\nWith our workshop, you can easily deploy applications developed in multiple programming languages ​​to CloudMesh, thereby experiencing the capabilities of Service Mesh. The capabilities include accessing services, monitoring traffic, experiencing service goverance, managing Sidecar, and gray release of new versions of services.\nThis demo focuses on the powerful traffic control capability of CloudMesh. In the process of gray release, you can precisely control the gray traffic ratio, and monitor the actual traffic trend in CloudMesh:\nThe general gray release function occupies twice capacity in the gray process.\nThe gray release function of CloudMesh does not need to occupy extra capacity in gray release process, and also allows pausing the release process to modify gray ratio multiple times.\nOperation guide For convenience, we have prepared a detailed operation guide for this demo.\nClick here to visit online version.\n","date":-62135596800,"description":"This guide introduces how to quickly deploy applications to CloudMesh, access services, monitor traffic, experience service governance, manage Sidecar, and perform gray release of new versions of services.","dir":"guides/kc-cloud-mesh-demo/","fuzzywordcount":200,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"e389a65e6736e909718275cd76505525","permalink":"/en/guides/kc-cloud-mesh-demo/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/en/guides/kc-cloud-mesh-demo/","summary":"To run this demo, you should sign up an Ant Financial technology account. Please see Ant Finanical Official Site to see more details.\nDemo content Service Mesh applies the communication capabilities between services to the infrastructure, thus decoupling and lightweighting applications.\nHowever, Service Mesh itself is still complex. CloudMesh can easily implement Service Mesh technology by hosting Service Mesh on the cloud.\nWith our workshop, you can easily deploy applications developed in multiple programming languages ​​to CloudMesh, thereby experiencing the capabilities of Service Mesh.","tags":null,"title":"Put Service Mesh into practice with CloudMesh","type":"guides","url":"/en/guides/kc-cloud-mesh-demo/","wordcount":199},{"author":null,"categories":null,"content":"This topic comprises four parts:\n Part 1: Install the ACTS IDE visual editor on Intellij IDEA. Part 2: Import the ACTS dependency to a multi-module project. Part 3: Establish the ACTS framework in the test module to manage ACTS test cases. Part 4: Generate the ACTS test script.  1. Install ACTS IDE We recommend that you use Intellij IDEA 2017. For the sake of your data security, please download the ACTS IDE installation package from the following source only: Click to download ACTS IDE.\nLocal installation: Choose Preferences \u0026amp;gt; Plugins. Install the plugin from disk and restart Intellij IDEA. 2. Import the ACTS dependency Before introducing the dependencies, make sure your application is a multi-module project (including the test module). After you import the dependency, ACTS places all test code under the test module for convenient ACTS test case management.\nYou can read the following information based on the actual situation of your application:\nIf your application is a complete multi-module project, you can refer to section 2.1 to import the ACTS dependency. If your application is a multi-module project without a test module, you can refer to section 2.2 to quickly create a test module. If your application is not a multi-module project, you can refer to section 2.3 to quickly create a multi-module project. If you have not created a project yet, you can use SOFABoot to quickly create an application.\n2.1 Multi-module application - with the test module You only need to import acts-bom to the pom.xml file of the test module.\n\u0026amp;lt;dependency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;com.alipay.sofa.acts\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;acts-bom\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;version\u0026amp;gt;${acts.version}\u0026amp;lt;/version\u0026amp;gt; \u0026amp;lt;type\u0026amp;gt;pom\u0026amp;lt;/type\u0026amp;gt; \u0026amp;lt;/dependency\u0026amp;gt; 2.2 Multi-module application - without the test module Here, Intellij IDEA is used to create the submodule.\nRight click the parent project, choose New \u0026amp;gt; Module, and enter the name for the test module, which follows the pattern of appname-test. The step-by-step procedure is illustrated in the following figures.\nStep 1: Create a test module Step 2: Manage the test module Manage the test module that you have created in the pom.xml file under the parent project.\nStep 3: Import the ACTS dependency Find the test module that you just created and import acts-bom to its pom.xml file.\n\u0026amp;lt;! -- Import the pom file that contains SOFABootApplication --\u0026amp;gt; \u0026amp;lt;dependency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;com.example\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;example-service\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;/dependency\u0026amp;gt; \u0026amp;lt;! -- Import the ACTS dependency --\u0026amp;gt; \u0026amp;lt;dependency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;com.alipay.sofa.acts\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;acts-bom\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;version\u0026amp;gt;${acts.version}\u0026amp;lt;/version\u0026amp;gt; \u0026amp;lt;type\u0026amp;gt;pom\u0026amp;lt;/type\u0026amp;gt; \u0026amp;lt;/dependency\u0026amp;gt; 2.3 Single-module application If you already have a sound single-module SOFABoot application, you can quickly create a multi-module project based on the existing project in the following …","date":-62135596800,"description":"","dir":"projects/sofa-acts/getting-started/","fuzzywordcount":700,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"dfc5fb9b394ea14c280568dcb881a8b0","permalink":"/en/projects/sofa-acts/getting-started/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/en/projects/sofa-acts/getting-started/","summary":"This topic comprises four parts:\n Part 1: Install the ACTS IDE visual editor on Intellij IDEA. Part 2: Import the ACTS dependency to a multi-module project. Part 3: Establish the ACTS framework in the test module to manage ACTS test cases. Part 4: Generate the ACTS test script.  1. Install ACTS IDE We recommend that you use Intellij IDEA 2017. For the sake of your data security, please download the ACTS IDE installation package from the following source only: Click to download ACTS IDE.","tags":null,"title":"Quick start","type":"projects","url":"/en/projects/sofa-acts/getting-started/","wordcount":650},{"author":null,"categories":null,"content":"This topic helps you quickly download, install, and use SOFADashboard on your computer.\nPrepare the environment sofa-dashboard-backend needs to be run in a Java environment. Make sure that it can be used normally in the following runtime environments:\n JDK 1.8+: Download and Configure. Maven 3.2.5+: Download and Configure.  sofa-dashboard-frontend uses the Ant Design Pro scaffold. For more information about the frontend environment, see Ant Design.\nInitialize the database  MySQL version: 5.6+\n SOFAArk control uses MySQL for resource data storage. You can find the SofaDashboardDB.sql script under the project directory and run this script to initialize database tables.\nZooKeeper  ZooKeeper 3.4.x and ZooKeeper 3.5.x\n Service governance and SOFAArk control of SOFADashboard are dependent on ZooKeeper, therefore you need to start the ZooKeeper service locally. For more information, see ZooKeeper Document.\nRun the backend project \u0026amp;gt; git clone https://github.com/sofastack/sofa-dashboard.git \u0026amp;gt; cd sofa-dashboard \u0026amp;gt; mvn clean package -DskipTests \u0026amp;gt; cd sofa-dashboard-backend/sofa-dashboard-web/target/ \u0026amp;gt; java -jar sofa-dashboard-web-1.0.0-SNAPSHOT.jar Run the frontend project sofa-dashboard-front is the frontend code-based project of SOFADashboard. It is developed based on the open-source frontend framework antd of Ant Financial.\n\u0026amp;gt; cd sofa-dashboard-front \u0026amp;gt; npm i \u0026amp;gt; npm start ","date":-62135596800,"description":"","dir":"projects/sofa-dashboard/quick-start/","fuzzywordcount":200,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"fa4c5f48810727f71d675255f19617a3","permalink":"/en/projects/sofa-dashboard/quick-start/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/en/projects/sofa-dashboard/quick-start/","summary":"This topic helps you quickly download, install, and use SOFADashboard on your computer.\nPrepare the environment sofa-dashboard-backend needs to be run in a Java environment. Make sure that it can be used normally in the following runtime environments:\n JDK 1.8+: Download and Configure. Maven 3.2.5+: Download and Configure.  sofa-dashboard-frontend uses the Ant Design Pro scaffold. For more information about the frontend environment, see Ant Design.\nInitialize the database  MySQL version: 5.","tags":null,"title":"Quick start","type":"projects","url":"/en/projects/sofa-dashboard/quick-start/","wordcount":186},{"author":null,"categories":null,"content":"This article is intended to help developers who are new to the MOSN project to quickly build a development environment, and compile, test, package, and run sample code.\nNote: MOSN is developed based on Go 1.12.7 and uses dep for dependency management.\nPrepare running environment  If you use a container to run MOSN, you must install Docker first. If you use a local machine, you must use a Unix-like environment. Install Go\u0026amp;rsquo;s build environment. Install dep. See the official installation documentation.  Get codes The codes for the MOSN project are hosted in GitHub and can be obtained in the following way:\ngo get mosn.io/mosn If an error occurs when run \u0026amp;ldquo;go get\u0026amp;rdquo;, just create the project manually.\n# Enter src dirctory under GOPATH cd $GOPATH/src # Create mosn.io dirctory mkdir -p mosn.io cd mosn.io # clone MOSN codes git clone git@github.com:mosn/mosn.git cd sofa-mosn The final path of MOSN source codes is $GOPATH/src/mosn.io/mosn.\nImport by using IDE Use the Golang IDE to import the $GOPATH/src/mosn.io/mosn project. Goland is recommended.\nCompile codes In the project root directory, select the following command to compile the MOSN binary file according to your machine type and the environment where you want to execute binary:\nCompile with Docker image\nmake build // compile linux 64bit executable binary non-docker, local compilation\nCompile local executable binary files.\nmake build-local Non-Linux machine compiles Linux 64-bit executable binary files crosswise.\nmake build-linux64 Non-Linux machine compiles Linux 32-bit executable binary files crosswise.\nmake build-linux32 Once compiled, the compiled binary files can be found in the build/bundles/${version}/binary directory.\nCreate image Run the following command to create an image:\nmake image Run test In the project root directory, run the unit test:\nmake unit-test In the project root directory, run the integrate test(slow):\nmake integrate Start MOSN from configuration file ./mosn start -c \u0026amp;#39;$CONFIG_FILE\u0026amp;#39; Start MOSN forwarding sample program See the sample project in the examples directory.\nUse MOSN to build a Service Mesh platform See Integrate Istio.\n","date":-62135596800,"description":"","dir":"projects/mosn/quick-start-setup/","fuzzywordcount":400,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"d41615315adb522aa4b84762f113a574","permalink":"/en/projects/mosn/quick-start-setup/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/en/projects/mosn/quick-start-setup/","summary":"This article is intended to help developers who are new to the MOSN project to quickly build a development environment, and compile, test, package, and run sample code.\nNote: MOSN is developed based on Go 1.12.7 and uses dep for dependency management.\nPrepare running environment  If you use a container to run MOSN, you must install Docker first. If you use a local machine, you must use a Unix-like environment.","tags":null,"title":"Quick start guide","type":"projects","url":"/en/projects/mosn/quick-start-setup/","wordcount":325},{"author":null,"categories":null,"content":"This article is intended to help developers who are new to the MOSN project to quickly build a development environment, and compile, test, package, and run sample code.\nNote: MOSN is developed based on Go 1.12.7 and uses dep for dependency management.\nPrepare running environment  If you use a container to run MOSN, you must install Docker first. If you use a local machine, you must use a Unix-like environment. Install Go\u0026amp;rsquo;s build environment. Install dep. See the official installation documentation.  Get codes The codes for the MOSN project are hosted in GitHub and can be obtained in the following way:\ngo get mosn.io/mosn If an error occurs when run \u0026amp;ldquo;go get\u0026amp;rdquo;, just create the project manually.\n# Enter src dirctory under GOPATH cd $GOPATH/src # Create mosn.io dirctory mkdir -p mosn.io cd mosn.io # clone MOSN codes git clone git@github.com:mosn/mosn.git cd sofa-mosn The final path of MOSN source codes is $GOPATH/src/mosn.io/mosn.\nImport by using IDE Use the Golang IDE to import the $GOPATH/src/mosn.io/mosn project. Goland is recommended.\nCompile codes In the project root directory, select the following command to compile the MOSN binary file according to your machine type and the environment where you want to execute binary:\nCompile with Docker image\nmake build // compile linux 64bit executable binary non-docker, local compilation\nCompile local executable binary files.\nmake build-local Non-Linux machine compiles Linux 64-bit executable binary files crosswise.\nmake build-linux64 Non-Linux machine compiles Linux 32-bit executable binary files crosswise.\nmake build-linux32 Once compiled, the compiled binary files can be found in the build/bundles/${version}/binary directory.\nCreate image Run the following command to create an image:\nmake image Run test In the project root directory, run the unit test:\nmake unit-test In the project root directory, run the integrate test(slow):\nmake integrate Start MOSN from configuration file ./mosn start -c \u0026amp;#39;$CONFIG_FILE\u0026amp;#39; Start MOSN forwarding sample program See the sample project in the examples directory.\nUse MOSN to build a Service Mesh platform See Integrate Istio.\n","date":-62135596800,"description":"","dir":"projects/occlum/quick-start-setup/","fuzzywordcount":400,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"cd757e2e2cca38a99b2de1c0be1f6807","permalink":"/en/projects/occlum/quick-start-setup/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/en/projects/occlum/quick-start-setup/","summary":"This article is intended to help developers who are new to the MOSN project to quickly build a development environment, and compile, test, package, and run sample code.\nNote: MOSN is developed based on Go 1.12.7 and uses dep for dependency management.\nPrepare running environment  If you use a container to run MOSN, you must install Docker first. If you use a local machine, you must use a Unix-like environment.","tags":null,"title":"Quick start guide","type":"projects","url":"/en/projects/occlum/quick-start-setup/","wordcount":325},{"author":null,"categories":null,"content":"﻿In this document, we will create a Spring Boot project and introduce the basic dependencies of SOFABoot as well as its Health Check expansion capability, to demonstrate how to get started quickly with SOFABoot.\nEnvironment Preparation To use SOFABoot, we need to prepare the basic environment first. SOFABoot depends on the following environment:\n JDK7 or JDK8 Needs to be compiled with Apache Maven 3.2.5 or above  Create Project SOFABoot is directly built on Spring Boot, so it can be generated by Spring Boot Generators. In this document, we need to add a web dependency for final view of its effect in the browser.\nAdd SOFABoot dependencies When creating a Spring Boot project, we need to import SOFABoot dependencies. First, extract the \u0026amp;lsquo;zip\u0026amp;rsquo; package of the project generated above and modify the \u0026amp;lsquo;pom.xml\u0026amp;rsquo; file, or the maven project configuration file. Replace\n\u0026amp;lt;parent\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;org.springframework.boot\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;spring-boot-starter-parent\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;version\u0026amp;gt;${spring.boot.version}\u0026amp;lt;/version\u0026amp;gt; \u0026amp;lt;relativePath/\u0026amp;gt; \u0026amp;lt;/parent\u0026amp;gt; as:\n\u0026amp;lt;parent\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;com.alipay.sofa\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;sofaboot-dependencies\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;version\u0026amp;gt;${sofa.boot.version}\u0026amp;lt;/version\u0026amp;gt; \u0026amp;lt;/parent\u0026amp;gt; Here, ${sofa.boot.version} denotes the SOFABoot version (please refer to release note). Then, add a SOFABoot dependency of Health Check extension and Spring Boot Web Starter.\n\u0026amp;lt;dependency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;com.alipay.sofa\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;healthcheck-sofa-boot-starter\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;/dependency\u0026amp;gt; \u0026amp;lt;dependency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;org.springframework.boot\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;spring-boot-starter-web\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;/dependency\u0026amp;gt; Finally, configure parameters commonly used in the SOFABoot project in the application.properties file. The spring.application.name parameter is required to name the current application; the logging path specifies the output directory for logging information.\n# Application Name spring.application.name=SOFABoot Demo # logging path logging.path=./logs Advice to refer to the SOFABoot Module document before learn this demo.\nRun it We can import the project into IDE and run the \u0026amp;lsquo;main\u0026amp;rsquo; method in the generated project (generally in the XXXApplication class) to start the application, or we can execute the mvn spring-boot:run command under the project\u0026amp;rsquo;s root directory, which will print the startup logging in the console:\n2018-04-05 21:36:26.572 INFO ---- Initializing ProtocolHandler [\u0026amp;quot;http-nio-8080\u0026amp;quot;] 2018-04-05 21:36:26.587 INFO ---- Starting ProtocolHandler [http-nio-8080] 2018-04-05 21:36:26.608 INFO ---- Using a shared selector for servlet write/read 2018-04-05 21:36:26.659 INFO ---- Tomcat started on port(s): 8080 (http) We can browse http://localhost:8080/sofaboot/versions to view the version summary generated by Maven plugin in SOFABoot. The result is like the …","date":-62135596800,"description":"","dir":"projects/sofa-boot/quick-start/","fuzzywordcount":1400,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"7f582b905fde4a56791c03d4dd6b5a57","permalink":"/en/projects/sofa-boot/quick-start/","publishdate":"0001-01-01T00:00:00Z","readingtime":7,"relpermalink":"/en/projects/sofa-boot/quick-start/","summary":"﻿In this document, we will create a Spring Boot project and introduce the basic dependencies of SOFABoot as well as its Health Check expansion capability, to demonstrate how to get started quickly with SOFABoot.\nEnvironment Preparation To use SOFABoot, we need to prepare the basic environment first. SOFABoot depends on the following environment:\n JDK7 or JDK8 Needs to be compiled with Apache Maven 3.2.5 or above  Create Project SOFABoot is directly built on Spring Boot, so it can be generated by Spring Boot Generators.","tags":null,"title":"Quick start guide","type":"projects","url":"/en/projects/sofa-boot/quick-start/","wordcount":1379},{"author":null,"categories":null,"content":"SOFATracer integration component list reference:Introduction To SOFATracer, Please pay attention to the SOFATracer version and JDK version of different components when using.\nPrepare Environment To use SOFABoot, you need to prepare the basic environment first. SOFABoot relies on the following environments:\n JDK7 or JDK8 Apache Maven 3.2.5+ required for compilation  Samples List The following Samples projects are all SOFABoot projects (also supported in the SpringBoot project). For information on how to create SOFABoot projects, please refer to SOFABoot quick start.\n Component Integration  Spring MVC Integration HttpClient Integration DataSource Integration RestTemplate Integration OkHttp Integration SOFARPC Integration Dubbo Integration Spring Cloud OpenFeign Integration   Sampling Report Data To Zipkin  ","date":-62135596800,"description":"","dir":"projects/sofa-tracer/componentaccess/","fuzzywordcount":200,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"42fbb0f6b6d459b7b04d45cad143d4ff","permalink":"/en/projects/sofa-tracer/componentaccess/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/en/projects/sofa-tracer/componentaccess/","summary":"SOFATracer integration component list reference:Introduction To SOFATracer, Please pay attention to the SOFATracer version and JDK version of different components when using.\nPrepare Environment To use SOFABoot, you need to prepare the basic environment first. SOFABoot relies on the following environments:\n JDK7 or JDK8 Apache Maven 3.2.5+ required for compilation  Samples List The following Samples projects are all SOFABoot projects (also supported in the SpringBoot project). For information on how to create SOFABoot projects, please refer to SOFABoot quick start.","tags":null,"title":"Quick start guide","type":"projects","url":"/en/projects/sofa-tracer/componentaccess/","wordcount":106},{"author":null,"categories":null,"content":"Quick start for client Common Java Project Add the Maven dependency of the client to the application:\n\u0026amp;lt;dependency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;com.alipay.sofa.lookout\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;lookout-client\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;version\u0026amp;gt;${lookout.client.version}\u0026amp;lt;/version\u0026amp;gt; \u0026amp;lt;/dependency\u0026amp;gt; Lookout-client relies on the lookout-reg-server module by default (supports reporting metrics data to the lookout server). If you want to use a different type of registry (such as lookout-reg-prometheus), then add the corresponding dependency.\nBefore starting to use the SOFALookout Client, you must firstly build a global client instance (com.alipay.lookout.client.DefaultLookoutClient).\nLookoutConfig lookoutConfig = new LookoutConfig(); DefaultLookoutClient client = new DefaultLookoutClient(\u0026amp;#34;appName\u0026amp;#34;); // Choose to build the Registry you need to use (if you need multiple registry types, it is recommended to use the same lookoutConfig instance for centralized management). LookoutRegistry lookoutRegistry = new LookoutRegistry(lookoutConfig); // Client can add a registry instance (at least one) after the client is created. client.addRegistry(lookoutRegistry); // (Optional) Uniformly register the metrics of extended modules for the registry instances that have been added or will be added to the client. client.registerExtendedMetrics(); Then get the Registry instance through the client and use it:\n// The registry is a \u0026amp;#34;combination\u0026amp;#34; registry Registry registry = client.getRegistry(); //demo Id id = registry.createId(\u0026amp;#34;http_requests_total\u0026amp;#34;); Counter counter = registry.counter(id); counter.inc(); For the use of the client, see Project sample.\n","date":-62135596800,"description":"","dir":"projects/sofa-lookout/quick-start-client-java/","fuzzywordcount":200,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"5dc476aa21ece4789859f1af598d4445","permalink":"/en/projects/sofa-lookout/quick-start-client-java/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/en/projects/sofa-lookout/quick-start-client-java/","summary":"Quick start for client Common Java Project Add the Maven dependency of the client to the application:\n\u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.alipay.sofa.lookout\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;lookout-client\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${lookout.client.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; Lookout-client relies on the lookout-reg-server module by default (supports reporting metrics data to the lookout server). If you want to use a different type of registry (such as lookout-reg-prometheus), then add the corresponding dependency.\nBefore starting to use the SOFALookout Client, you must firstly build a global client instance (com.","tags":null,"title":"Quick start guide for common Java project","type":"projects","url":"/en/projects/sofa-lookout/quick-start-client-java/","wordcount":197},{"author":null,"categories":null,"content":"This project demonstrates how to use SOFALookout in SOFABoot and connect to the Actuator of Spring Boot. If you want to connect to Prometheus or other Registry, see the Registry section.\nCreate a SpringBoot (or SofaBoot) project Create a new Spring Boot application (In case of SOFABoot project, import to SOFABoot as described in SOFABoot Documentation - Dependency Management.\nIntroduce Lookout\u0026amp;rsquo;s Starter dependency Introduce the following dependency in pom.xml:\n\u0026amp;lt;dependency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;com.alipay.sofa.lookout\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;lookout-sofa-boot-starter\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;/dependency\u0026amp;gt; In case of Spring Boot project, it is required to specify a version.\nCreate a Metrics indicator After completing the introduction of dependencies, you can add the following methods to the startup class in Spring Boot:\n@Autowired private Registry registry; @PostConstruct public void init() { Counter counter = registry.counter(registry.createId(\u0026amp;#34;http_requests_total\u0026amp;#34;).withTag(\u0026amp;#34;instant\u0026amp;#34;, NetworkUtil.getLocalAddress().getHostName())); counter.inc(); } The above code directly injects a Registry field through @Autowired. Through the Registry field, you can create the corresponding Counter, and then modify the Counter data to generate the Metrics of the SOFALookout.\nAdd configuration item In SOFABoot project, you need to add a configuration item for the application name: spring.application.name=xxx.\nConnect to Spring Boot Actuator After adding a new indicator, you can choose to connect to the Spring Boot Actuator. Then the following dependency is required:\n\u0026amp;lt;dependency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;org.springframework.boot\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;spring-boot-starter-actuator\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;/dependency\u0026amp;gt; After adding the above dependency, you can launch the application locally, visit http://localhost:8080/metrics, and you can see the metrics added earlier, as follows:\n\u0026amp;quot;http_requests_total.instant-MacBook-Pro-4.local\u0026amp;quot;: 1, The above codes are at lookout-client-samples-boot, you can Download them as a reference.\n","date":-62135596800,"description":"","dir":"projects/sofa-lookout/quick-start-client-boot/","fuzzywordcount":300,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"27e057f8a8a4ac97f42ea66ca6a17fdd","permalink":"/en/projects/sofa-lookout/quick-start-client-boot/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/en/projects/sofa-lookout/quick-start-client-boot/","summary":"This project demonstrates how to use SOFALookout in SOFABoot and connect to the Actuator of Spring Boot. If you want to connect to Prometheus or other Registry, see the Registry section.\nCreate a SpringBoot (or SofaBoot) project Create a new Spring Boot application (In case of SOFABoot project, import to SOFABoot as described in SOFABoot Documentation - Dependency Management.\nIntroduce Lookout\u0026rsquo;s Starter dependency Introduce the following dependency in pom.xml:\n\u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.","tags":null,"title":"Quick start guide for SOFABoot project","type":"projects","url":"/en/projects/sofa-lookout/quick-start-client-boot/","wordcount":244},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-jraft/raft-introduction/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"b811e803d23b40da67657798801f8b51","permalink":"/projects/sofa-jraft/raft-introduction/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-jraft/raft-introduction/","summary":"","tags":null,"title":"Raft 算法解读","type":"projects","url":"/projects/sofa-jraft/raft-introduction/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-mesh/pilot-register-agent/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"da6c96fadd94eedcf961d50ce7b00600","permalink":"/projects/sofa-mesh/pilot-register-agent/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-mesh/pilot-register-agent/","summary":"","tags":null,"title":"Register Agent","type":"projects","url":"/projects/sofa-mesh/pilot-register-agent/","wordcount":0},{"author":null,"categories":null,"content":"Register agent TBD\n","date":-62135596800,"description":"","dir":"projects/sofa-mesh/pilot-register-agent/","fuzzywordcount":100,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"da6c96fadd94eedcf961d50ce7b00600","permalink":"/en/projects/sofa-mesh/pilot-register-agent/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/en/projects/sofa-mesh/pilot-register-agent/","summary":"Register agent TBD","tags":null,"title":"Register agent","type":"projects","url":"/en/projects/sofa-mesh/pilot-register-agent/","wordcount":3},{"author":null,"categories":null,"content":"Related articles  ISSUES User manual Chinese introductory article: Ant communication framework practices  ","date":-62135596800,"description":"","dir":"projects/sofa-bolt/related-links/","fuzzywordcount":100,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"6844d2a639b69fa3128132b8631f33e3","permalink":"/en/projects/sofa-bolt/related-links/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/en/projects/sofa-bolt/related-links/","summary":"Related articles  ISSUES User manual Chinese introductory article: Ant communication framework practices  ","tags":null,"title":"Related articles","type":"projects","url":"/en/projects/sofa-bolt/related-links/","wordcount":12},{"author":null,"categories":null,"content":"To learn more, see https://github.com/mos/mosn/blob/master/CHANGELOG.md.\n","date":-62135596800,"description":"","dir":"projects/mosn/release-notes/","fuzzywordcount":100,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"62efb8e40401ab4612bcccaa6e942c97","permalink":"/en/projects/mosn/release-notes/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/en/projects/mosn/release-notes/","summary":"To learn more, see https://github.com/mos/mosn/blob/master/CHANGELOG.md.","tags":null,"title":"Release notes","type":"projects","url":"/en/projects/mosn/release-notes/","wordcount":5},{"author":null,"categories":null,"content":"To learn more, see https://github.com/mos/mosn/blob/master/CHANGELOG.md.\n","date":-62135596800,"description":"","dir":"projects/occlum/release-notes/","fuzzywordcount":100,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"6b9dec1dd8c196e43129ab36a046a84f","permalink":"/en/projects/occlum/release-notes/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/en/projects/occlum/release-notes/","summary":"To learn more, see https://github.com/mos/mosn/blob/master/CHANGELOG.md.","tags":null,"title":"Release notes","type":"projects","url":"/en/projects/occlum/release-notes/","wordcount":5},{"author":null,"categories":null,"content":"Release history For more information, refer to: https://github.com/sofastack/sofa-ark/releases\n","date":-62135596800,"description":"","dir":"projects/sofa-boot/sofa-ark-release/","fuzzywordcount":100,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"994c3569ea416ee5b0dea253f08af6be","permalink":"/en/projects/sofa-boot/sofa-ark-release/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/en/projects/sofa-boot/sofa-ark-release/","summary":"Release history For more information, refer to: https://github.com/sofastack/sofa-ark/releases","tags":null,"title":"Release notes","type":"projects","url":"/en/projects/sofa-boot/sofa-ark-release/","wordcount":8},{"author":null,"categories":null,"content":"﻿## Release history For more information, refer to: https://github.com/sofastack/sofa-jarslink/releases\n","date":-62135596800,"description":"","dir":"projects/sofa-boot/sofa-jarslink-release/","fuzzywordcount":100,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"4554e362f42cbc42b9408d9507cdf689","permalink":"/en/projects/sofa-boot/sofa-jarslink-release/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/en/projects/sofa-boot/sofa-jarslink-release/","summary":"﻿## Release history For more information, refer to: https://github.com/sofastack/sofa-jarslink/releases","tags":null,"title":"Release notes","type":"projects","url":"/en/projects/sofa-boot/sofa-jarslink-release/","wordcount":9},{"author":null,"categories":null,"content":"For more information, see https://github.com/sofastack/sofa-dashboard/releases.\n","date":-62135596800,"description":"","dir":"projects/sofa-dashboard/release-node/","fuzzywordcount":100,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"3c8e6985123810c9692f47cc56b50081","permalink":"/en/projects/sofa-dashboard/release-node/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/en/projects/sofa-dashboard/release-node/","summary":"For more information, see https://github.com/sofastack/sofa-dashboard/releases.","tags":null,"title":"Release notes","type":"projects","url":"/en/projects/sofa-dashboard/release-node/","wordcount":5},{"author":null,"categories":null,"content":" 1.2.5 April 1, 2019\n Bugs fixed  Fixed the conflict between jmh and the unit test code. Fixed the installation failure bug that would occur when the snapshot is too large. This bug may affect the addition of new nodes.   Features  Optimized part of the LogManagerImpl code to reduce CPU usage. Corrected some spelling errors.   Breaking changes  None    We strongly recommend that you upgrade to this version.\n 1.2.4 March 20, 2019\n Bugs fixed  Fixed stale read of lease read in a circumstance. Modified part of timestamps to monotonic time. Fixed the problem of the replicator being blocked in one circumstance. Resolved directory creation failures for some unit tests on Windows. Resolved process crashes caused by improper rocksdb options settings on Windows.   Features  Made the RocksDB options available for users to set. Optimized the pre-vote process, and used the lease mechanism to avoid the current term\u0026amp;rsquo;s interruption on a disconnected node (caused by network partitioning or no writes in the cluster for a long time) to improve the system availability. Updated SOFABolt to 1.5.3. Modified ReadWriteLock of the BallotBox to StampedLock, and provided the OptimisticRead implementation. Fixed a few spelling errors.   Breaking changes  None   Acknowledgements (in no particular order)  @pifuant @huangyunbin @shiftyman @slievrly     1.2.3 March 5, 2019 Released the first open source version.\n 1.2.2 February 21, 2019\n Bugs fixed  Made PeerId and Endpoint immutable, to avoid concurrency problems on APIs such as getLeaderId. Upgraded sofa-common to 1.0.12. The earlier version 1.0.9 was not released to the public GitHub repository.   Features  The JRaft-RheaKV implemented auto range split. When placementDriver(pd) is enabled, the pd can calculate and issue the range split command based on state information reported by each node. When pd is disabled, RheaKVCliService is provided to allow users to manually trigger range split by using the CLI service. Provided LogExceptionHandler generic support. Added MetricThreadPoolExecutor (an updated version of LogThreadPoolExecutor) to print the uncaught exception log and record the time for task.run() and replaced all ThreadPoolExecutors in JRaft with MetricThreadPoolExecutor to record time-consumption metric statistics. This metric can be used as an important reference for adjusting the thread pool configuration in actual application.   Breaking changes  Removed the reset method of Endpoint/PeerId.     V1.2.1 January 28, 2019\n Bugs fixed  Fixed a bug that RaftGroupService may mistakenly disable the shared rpcServer. Fixed the bug of the apply-order change caused by batch write of the RheaKV state machine. Fixed the time usage API error.   Features  Merged the code of duplicate functions of Jraft and RheaKV. Reduced memory usage of the log replication request handling process on followers. Optimized the synchronized conf read/write of the RouteTable to the read/write lock. Implemented lock safe with fencing and the …","date":-62135596800,"description":"","dir":"projects/sofa-jraft/release-log/","fuzzywordcount":900,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"9e24fb74a3cda6a600252b01f8a85db9","permalink":"/en/projects/sofa-jraft/release-log/","publishdate":"0001-01-01T00:00:00Z","readingtime":5,"relpermalink":"/en/projects/sofa-jraft/release-log/","summary":"1.2.5 April 1, 2019\n Bugs fixed  Fixed the conflict between jmh and the unit test code. Fixed the installation failure bug that would occur when the snapshot is too large. This bug may affect the addition of new nodes.   Features  Optimized part of the LogManagerImpl code to reduce CPU usage. Corrected some spelling errors.   Breaking changes  None    We strongly recommend that you upgrade to this version.","tags":null,"title":"Release notes","type":"projects","url":"/en/projects/sofa-jraft/release-log/","wordcount":855},{"author":null,"categories":null,"content":"For more information, see https://github.com/sofastack/sofa-registry/releases.\n","date":-62135596800,"description":"","dir":"projects/sofa-registry/release-notes/","fuzzywordcount":100,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"d92dddf77bbbd6078f3f96ba2224a53d","permalink":"/en/projects/sofa-registry/release-notes/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/en/projects/sofa-registry/release-notes/","summary":"For more information, see https://github.com/sofastack/sofa-registry/releases.","tags":null,"title":"Release notes","type":"projects","url":"/en/projects/sofa-registry/release-notes/","wordcount":5},{"author":null,"categories":null,"content":"To learn more, see https://github.com/sofastack/sofa-rpc/releases.\n","date":-62135596800,"description":"","dir":"projects/sofa-rpc/release-notes/","fuzzywordcount":100,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"ab7d46caa6906863103b77b742ec7e84","permalink":"/en/projects/sofa-rpc/release-notes/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/en/projects/sofa-rpc/release-notes/","summary":"To learn more, see https://github.com/sofastack/sofa-rpc/releases.","tags":null,"title":"Release notes","type":"projects","url":"/en/projects/sofa-rpc/release-notes/","wordcount":5},{"author":null,"categories":null,"content":"This example demonstrates how to remotely report link data to Zipkin by configuring SOFATracer in an application that integrates SOFATracer.\nThe following examples demonstrate how to use them in SOFABoot/SpringBoot projects and non-SOFABoot/SpringBoot projects, respectively.\nPrepare environment To use SOFABoot, you need to prepare the basic environment first. SOFABoot relies on the following environments:\n JDK7 or JDK8 Apache Maven 3.2.5+ required for compilation  Introduce SOFABoot After creating a Spring Boot project, you need to introduce the SOFABoot dependency. First, you need to unzip the zip package of the Spring Boot project generated above and modify the Maven project configuration file pom.xml.\n\u0026amp;lt;parent\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;org.springframework.boot\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;spring-boot-starter-parent\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;version\u0026amp;gt;${spring.boot.version}\u0026amp;lt;/version\u0026amp;gt; \u0026amp;lt;relativePath/\u0026amp;gt; \u0026amp;lt;/parent\u0026amp;gt; Replace the above with the followings:\n\u0026amp;lt;parent\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;com.alipay.sofa\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;sofaboot-dependencies\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;version\u0026amp;gt;${sofa.boot.version}\u0026amp;lt;/version\u0026amp;gt; \u0026amp;lt;/parent\u0026amp;gt; The ${sofa.boot.version} specifies the latest version of SOFABoot. For more about SOFABoot versions, see Release notes.\nAdd SOFATracer starter \u0026amp;lt;dependency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;com.alipay.sofa\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;tracer-sofa-boot-starter\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;/dependency\u0026amp;gt; Application configuration Finally, add the properties to be used by SOFATracer under the project\u0026amp;rsquo;s application.properties file, including spring.application.name to indicate the name of the current application; logging.path to specify the output directory of the log.\n# Application Name spring.application.name=SOFATracerReportZipkin # logging path logging.path=./logs # open zipkin report com.alipay.sofa.tracer.zipkin.enabled=true # specify zipkin server address com.alipay.sofa.tracer.zipkin.baseUrl=http://localhost:9411 Configure Zipkin Dependencies Considering that Zipkin\u0026amp;rsquo;s data reporting capability is not the ability of SOFATracer to be enabled by default,it‘s desirable to add the following Zipkin data reporting dependencies when using SOFATracer for data reporting:\n\u0026amp;lt;dependency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;io.zipkin.zipkin2\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;zipkin\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;version\u0026amp;gt;2.11.12\u0026amp;lt;/version\u0026amp;gt; \u0026amp;lt;/dependency\u0026amp;gt; \u0026amp;lt;dependency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;io.zipkin.reporter2\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;zipkin-reporter\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;version\u0026amp;gt;2.7.13\u0026amp;lt;/version\u0026amp;gt; \u0026amp;lt;/dependency\u0026amp;gt;\tStart the Zipkin server Start the Zipkin server to receive the link data reported by SOFATracer and display it. Zipkin Server can be configured with reference to this document.\nRunning You can import the project into IDE and run the main method in the project to start the application. In the console, you can see the log about startup as follows:\n2018-05-12 13:12:05.868 INFO 76572 --- …","date":-62135596800,"description":"","dir":"projects/sofa-tracer/report-to-zipkin/","fuzzywordcount":500,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"d28d192386829452262116de9c32b570","permalink":"/en/projects/sofa-tracer/report-to-zipkin/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/en/projects/sofa-tracer/report-to-zipkin/","summary":"This example demonstrates how to remotely report link data to Zipkin by configuring SOFATracer in an application that integrates SOFATracer.\nThe following examples demonstrate how to use them in SOFABoot/SpringBoot projects and non-SOFABoot/SpringBoot projects, respectively.\nPrepare environment To use SOFABoot, you need to prepare the basic environment first. SOFABoot relies on the following environments:\n JDK7 or JDK8 Apache Maven 3.2.5+ required for compilation  Introduce SOFABoot After creating a Spring Boot project, you need to introduce the SOFABoot dependency.","tags":null,"title":"Report data to Zipkin","type":"projects","url":"/en/projects/sofa-tracer/report-to-zipkin/","wordcount":463},{"author":null,"categories":null,"content":"For REST，we provide a Filter to support cors now.\nSOFARPC API Usage For users who use SOFARPC API directly，they can add parameters in ServerConfig.\nMap\u0026amp;lt;String,String\u0026amp;gt; parameters=new HashMap\u0026amp;lt;String, String\u0026amp;gt;() parameters.put(RpcConstants.ALLOWED_ORIGINS,\u0026amp;#34;abc.com,cdf.com\u0026amp;#34;); serverConfig.setParameters(parameters); XML Usage You can add this configuration to application.properties\ncom.alipay.sofa.rpc.rest.allowed.origins=a.com,b.com ","date":-62135596800,"description":"","dir":"projects/sofa-rpc/restful-cors/","fuzzywordcount":100,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"549f73920842ebb121abf87566761c47","permalink":"/en/projects/sofa-rpc/restful-cors/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/en/projects/sofa-rpc/restful-cors/","summary":"For REST，we provide a Filter to support cors now.\nSOFARPC API Usage For users who use SOFARPC API directly，they can add parameters in ServerConfig.\nMap\u0026lt;String,String\u0026gt; parameters=new HashMap\u0026lt;String, String\u0026gt;() parameters.put(RpcConstants.ALLOWED_ORIGINS,\u0026#34;abc.com,cdf.com\u0026#34;); serverConfig.setParameters(parameters); XML Usage You can add this configuration to application.properties\ncom.alipay.sofa.rpc.rest.allowed.origins=a.com,b.com ","tags":null,"title":"REST Cors","type":"projects","url":"/en/projects/sofa-rpc/restful-cors/","wordcount":40},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-rpc/restful-exception/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"0ff4ef4139b228537d2ce4d52a213651","permalink":"/projects/sofa-rpc/restful-exception/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-rpc/restful-exception/","summary":"","tags":null,"title":"REST Exception","type":"projects","url":"/projects/sofa-rpc/restful-exception/","wordcount":0},{"author":null,"categories":null,"content":"For REST, we designed a JAXRSProviderManager manager class. It takes effect on the server when the service starts.\ncom.alipay.sofa.rpc.server.rest.RestServer#registerProvider For the user-defined Filter class, you can call it after the initialization is complete.\ncom.alipay.sofa.rpc.config.JAXRSProviderManager#registerCustomProviderInstance To register filter, since the custom Filter follows REST specification, you need to implement the following interface:\njavax.ws.rs.container.ContainerResponseFilter or javax.ws.rs.container.ContainerRequestFilter After the REST server is started, if using bare SOFARPC, you need to register filter first before starting the service. In SOFABoot environment, it is similar. The specific encoding method is as follows:\ncom.alipay.sofa.rpc.server.rest.TraceRequestFilter com.alipay.sofa.rpc.server.rest.TraceResponseFilter ","date":-62135596800,"description":"","dir":"projects/sofa-rpc/restful-filter/","fuzzywordcount":100,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"53eb86b2504bf3beda2aca24437d6dab","permalink":"/en/projects/sofa-rpc/restful-filter/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/en/projects/sofa-rpc/restful-filter/","summary":"For REST, we designed a JAXRSProviderManager manager class. It takes effect on the server when the service starts.\ncom.alipay.sofa.rpc.server.rest.RestServer#registerProvider For the user-defined Filter class, you can call it after the initialization is complete.\ncom.alipay.sofa.rpc.config.JAXRSProviderManager#registerCustomProviderInstance To register filter, since the custom Filter follows REST specification, you need to implement the following interface:\njavax.ws.rs.container.ContainerResponseFilter or javax.ws.rs.container.ContainerRequestFilter After the REST server is started, if using bare SOFARPC, you need to register filter first before starting the service.","tags":null,"title":"REST filter","type":"projects","url":"/en/projects/sofa-rpc/restful-filter/","wordcount":89},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-rpc/restful-filter/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"53eb86b2504bf3beda2aca24437d6dab","permalink":"/projects/sofa-rpc/restful-filter/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-rpc/restful-filter/","summary":"","tags":null,"title":"REST 自定义 Filter","type":"projects","url":"/projects/sofa-rpc/restful-filter/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-rpc/restful-cors/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"549f73920842ebb121abf87566761c47","permalink":"/projects/sofa-rpc/restful-cors/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-rpc/restful-cors/","summary":"","tags":null,"title":"REST 跨域","type":"projects","url":"/projects/sofa-rpc/restful-cors/","wordcount":0},{"author":null,"categories":null,"content":"SOFARPC supports RESTful protocol, making it convenient for users to publish an interface in the manner of RESTful.\n Basic usage Custom Filter Integrate Swagger  ","date":-62135596800,"description":"","dir":"projects/sofa-rpc/restful/","fuzzywordcount":100,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"f238d7f58de0c4a0e12d566ea9e09f52","permalink":"/en/projects/sofa-rpc/restful/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/en/projects/sofa-rpc/restful/","summary":"SOFARPC supports RESTful protocol, making it convenient for users to publish an interface in the manner of RESTful.\n Basic usage Custom Filter Integrate Swagger  ","tags":null,"title":"RESTful","type":"projects","url":"/en/projects/sofa-rpc/restful/","wordcount":24},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-rpc/restful/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"f238d7f58de0c4a0e12d566ea9e09f52","permalink":"/projects/sofa-rpc/restful/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-rpc/restful/","summary":"","tags":null,"title":"RESTful 协议","type":"projects","url":"/projects/sofa-rpc/restful/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-rpc/restful-basic/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"d41f976864ba8f8221f5b5d26f354d1c","permalink":"/projects/sofa-rpc/restful-basic/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-rpc/restful-basic/","summary":"","tags":null,"title":"RESTful 协议基本使用","type":"projects","url":"/projects/sofa-rpc/restful-basic/","wordcount":0},{"author":null,"categories":null,"content":"RestTemplate Integration In this document will demonstrate how to use SOFATracer to track of RestTemplate, this example address.\nAssuming you have built a simple Spring Web project based on SOFABoot, Then you can be operated by the following steps:\nIntroduce dependency \u0026amp;lt;dependency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;com.alipay.sofa\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;tracer-sofa-boot-starter\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;!-- SOFABoot version unified management --\u0026amp;gt; \u0026amp;lt;/dependency\u0026amp;gt; Project Configuration Then, add the parameters to be used by SOFATracer in the project\u0026amp;rsquo;s application.properties file, including spring.application.name that indicates the name of the current application and logging.path that specifies the log output directory.\n# Application Name spring.application.name=SOFATracerSpringMVC # logging path logging.path=./logs Add a Controller that provides RESTFul services In the project, provide a simple Controller, for example:\n@RestController public class SampleController { private final AtomicLong counter = new AtomicLong(0); @RequestMapping(\u0026amp;#34;/rest\u0026amp;#34;) public Map\u0026amp;lt;String, Object\u0026amp;gt; rest() { Map\u0026amp;lt;String, Object\u0026amp;gt; map = new HashMap\u0026amp;lt;String, Object\u0026amp;gt;(); map.put(\u0026amp;#34;count\u0026amp;#34;, counter.incrementAndGet()); return map; } @RequestMapping(\u0026amp;#34;/asyncrest\u0026amp;#34;) public Map\u0026amp;lt;String, Object\u0026amp;gt; asyncrest() throws InterruptedException { Map\u0026amp;lt;String, Object\u0026amp;gt; map = new HashMap\u0026amp;lt;String, Object\u0026amp;gt;(); map.put(\u0026amp;#34;count\u0026amp;#34;, counter.incrementAndGet()); Thread.sleep(5000); return map; } } Construct the RestTemplate in API model to initiate a call to the RESTful service above  Construct a RestTemplate synchronous call instance  RestTemplate restTemplate = SofaTracerRestTemplateBuilder.buildRestTemplate(); ResponseEntity\u0026amp;lt;String\u0026amp;gt; responseEntity = restTemplate.getForEntity( \u0026amp;#34;http://sac.alipay.net:8080/rest\u0026amp;#34;, String.class);  Construct a RestTemplate asynchronous call instance  AsyncRestTemplate asyncRestTemplate = SofaTracerRestTemplateBuilder .buildAsyncRestTemplate(); ListenableFuture\u0026amp;lt;ResponseEntity\u0026amp;lt;String\u0026amp;gt;\u0026amp;gt; forEntity = asyncRestTemplate.getForEntity( \u0026amp;#34;http://sac.alipay.net:8080/asyncrest\u0026amp;#34;, String.class); Get the RestTemplate in an automatic injection @Autowired RestTemplate restTemplate; Run the project Start the SOFABoot app and see the log in the console as follows:\n2018-10-24 10:45:28.683 INFO 5081 --- [ main] o.s.j.e.a.AnnotationMBeanExporter : Registering beans for JMX exposure on startup 2018-10-24 10:45:28.733 INFO 5081 --- [ main] s.b.c.e.t.TomcatEmbeddedServletContainer : Tomcat started on port(s): 8080 (http) 2018-10-24 10:45:28.736 INFO 5081 --- [ main] c.a.s.t.e.r.RestTemplateDemoApplication : Started RestTemplateDemoApplication in 2.163 seconds (JVM running for 3.603) Successful call：\n2018-10-24 10:45:28.989 INFO 5081 --- [ main] c.a.s.t.e.r.RestTemplateDemoApplication : Response is {\u0026amp;quot;count\u0026amp;quot;:1} 2018-10-24 10:45:34.014 INFO 5081 --- [ main] c.a.s.t.e.r.RestTemplateDemoApplication : …","date":-62135596800,"description":"","dir":"projects/sofa-tracer/usage-of-resttemplate/","fuzzywordcount":500,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"8b66d6ad488bd59ecbf113b37825d58e","permalink":"/en/projects/sofa-tracer/usage-of-resttemplate/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/en/projects/sofa-tracer/usage-of-resttemplate/","summary":"RestTemplate Integration In this document will demonstrate how to use SOFATracer to track of RestTemplate, this example address.\nAssuming you have built a simple Spring Web project based on SOFABoot, Then you can be operated by the following steps:\nIntroduce dependency \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.alipay.sofa\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;tracer-sofa-boot-starter\u0026lt;/artifactId\u0026gt; \u0026lt;!-- SOFABoot version unified management --\u0026gt; \u0026lt;/dependency\u0026gt; Project Configuration Then, add the parameters to be used by SOFATracer in the project\u0026rsquo;s application.properties file, including spring.application.name that indicates the name of the current application and logging.","tags":null,"title":"RestTemplate Integration","type":"projects","url":"/en/projects/sofa-tracer/usage-of-resttemplate/","wordcount":434},{"author":null,"categories":null,"content":"RestTemplate Log Format SOFATracer integrates RestTemplate and outputs the requested link log data format. The default is JSON data format.\nRestTemplate digest log（resttemplate-digest.log） The data is output in JSON format. Each key meaning is as follows:\n   key Meaning     time Log printing time   local.app Current application name   traceId TraceId   spanId SpanId   request.url Request URL   method Request HTTP method   result.code HTTP return status code   resp.size.bytes Response Body Size   time.cost.milliseconds Request time (ms)   current.thread.name Current thread name   remote.app remote app name   baggage Transparently transmitted baggage data    Example:\n{\u0026amp;#34;time\u0026amp;#34;:\u0026amp;#34;2018-10-24 10:45:28.977\u0026amp;#34;,\u0026amp;#34;local.app\u0026amp;#34;:\u0026amp;#34;RestTemplateDemo\u0026amp;#34;,\u0026amp;#34;traceId\u0026amp;#34;:\u0026amp;#34;0a0fe8b3154034912878910015081\u0026amp;#34;,\u0026amp;#34;spanId\u0026amp;#34;:\u0026amp;#34;0\u0026amp;#34;,\u0026amp;#34;request.url\u0026amp;#34;:\u0026amp;#34;http://sac.alipay.net:8080/rest\u0026amp;#34;,\u0026amp;#34;method\u0026amp;#34;:\u0026amp;#34;GET\u0026amp;#34;,\u0026amp;#34;result.code\u0026amp;#34;:\u0026amp;#34;200\u0026amp;#34;,\u0026amp;#34;resp.size.bytes\u0026amp;#34;:0,\u0026amp;#34;time.cost.milliseconds\u0026amp;#34;:188,\u0026amp;#34;current.thread.name\u0026amp;#34;:\u0026amp;#34;main\u0026amp;#34;,\u0026amp;#34;remote.app\u0026amp;#34;:\u0026amp;#34;\u0026amp;#34;,\u0026amp;#34;baggage\u0026amp;#34;:\u0026amp;#34;\u0026amp;#34;} RestTemplate stat log（resttemplate-stat.log） stat.key is the collection of statistical keywords in this period, which uniquely determines a set of statistical data, including local.app, request.url, and method field.\nExample:\n{\u0026amp;#34;time\u0026amp;#34;:\u0026amp;#34;2018-10-24 10:46:28.769\u0026amp;#34;,\u0026amp;#34;stat.key\u0026amp;#34;:{\u0026amp;#34;method\u0026amp;#34;:\u0026amp;#34;GET\u0026amp;#34;,\u0026amp;#34;local.app\u0026amp;#34;:\u0026amp;#34;RestTemplateDemo\u0026amp;#34;,\u0026amp;#34;request.url\u0026amp;#34;:\u0026amp;#34;http://sac.alipay.net:8080/rest\u0026amp;#34;},\u0026amp;#34;count\u0026amp;#34;:1,\u0026amp;#34;total.cost.milliseconds\u0026amp;#34;:5009,\u0026amp;#34;success\u0026amp;#34;:\u0026amp;#34;true\u0026amp;#34;,\u0026amp;#34;load.test\u0026amp;#34;:\u0026amp;#34;F\u0026amp;#34;} ","date":-62135596800,"description":"","dir":"projects/sofa-tracer/log-format-resttemplate/","fuzzywordcount":200,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"c52c919080b467801700a8a1f156c513","permalink":"/en/projects/sofa-tracer/log-format-resttemplate/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/en/projects/sofa-tracer/log-format-resttemplate/","summary":"RestTemplate Log Format SOFATracer integrates RestTemplate and outputs the requested link log data format. The default is JSON data format.\nRestTemplate digest log（resttemplate-digest.log） The data is output in JSON format. Each key meaning is as follows:\n   key Meaning     time Log printing time   local.app Current application name   traceId TraceId   spanId SpanId   request.url Request URL   method Request HTTP method   result.","tags":null,"title":"RestTemplate log","type":"projects","url":"/en/projects/sofa-tracer/log-format-resttemplate/","wordcount":116},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-tracer/usage-of-resttemplate/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"8b66d6ad488bd59ecbf113b37825d58e","permalink":"/projects/sofa-tracer/usage-of-resttemplate/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-tracer/usage-of-resttemplate/","summary":"","tags":null,"title":"RestTemplate 埋点接入","type":"projects","url":"/projects/sofa-tracer/usage-of-resttemplate/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-tracer/log-format-resttemplate/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"c52c919080b467801700a8a1f156c513","permalink":"/projects/sofa-tracer/log-format-resttemplate/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-tracer/log-format-resttemplate/","summary":"","tags":null,"title":"RestTemplate 日志","type":"projects","url":"/projects/sofa-tracer/log-format-resttemplate/","wordcount":0},{"author":null,"categories":null,"content":"SOFARPC supports a framework-level retry strategy when the cluster mode is FailOver (SOFARPC uses FailOver mode by default). Retry is only initiated if there is a framework-level exception or a timeout exception on the server. If the business itself throws an exception, the service will not be called again. SOFARPC does not perform any retry by default.\n Note: Although the system will retry calling in case of timeout exception, the server still needs to guarantee the idempotency of the service. Otherwise there may be risks.\n Use XML If you subscribe to the service using XML, you can set the number of retries by setting the retries parameter of sofa:global-attrs:\n\u0026amp;lt;sofa:reference jvm-first=\u0026amp;#34;false\u0026amp;#34; id=\u0026amp;#34;retriesServiceReferenceBolt\u0026amp;#34; interface=\u0026amp;#34;com.alipay.sofa.rpc.samples.retries.RetriesService\u0026amp;#34;\u0026amp;gt; \u0026amp;lt;sofa:binding.bolt\u0026amp;gt; \u0026amp;lt;sofa:global-attrs retries=\u0026amp;#34;2\u0026amp;#34;/\u0026amp;gt; \u0026amp;lt;/sofa:binding.bolt\u0026amp;gt; \u0026amp;lt;/sofa:reference\u0026amp;gt; Use Annotation If you are using Annotation, you can set the retries attribute of @SofaReferenceBinding annotation:\n@SofaReference(binding = @SofaReferenceBinding(bindingType = \u0026amp;#34;bolt\u0026amp;#34;, retries = 2)) private SampleService sampleService; Use API in Spring environment If you are using the API in Spring environment, you can call the setRetries method of BoltBindingParam:\nBoltBindingParam boltBindingParam = new BoltBindingParam(); boltBindingParam.setRetries(2); Use API in non-Spring environment If you are using the bare API of SOFARPC directly in non-Spring environment, you can call the setRetries method of ConsumerConfig:\nConsumerConfig\u0026amp;lt;RetriesService\u0026amp;gt; consumerConfig = new ConsumerConfig\u0026amp;lt;RetriesService\u0026amp;gt;(); consumerConfig.setRetries(2); ","date":-62135596800,"description":"","dir":"projects/sofa-rpc/retry-invoke/","fuzzywordcount":300,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"d60b44aa8f1b49ab6c1bbc55593a91da","permalink":"/en/projects/sofa-rpc/retry-invoke/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/en/projects/sofa-rpc/retry-invoke/","summary":"SOFARPC supports a framework-level retry strategy when the cluster mode is FailOver (SOFARPC uses FailOver mode by default). Retry is only initiated if there is a framework-level exception or a timeout exception on the server. If the business itself throws an exception, the service will not be called again. SOFARPC does not perform any retry by default.\n Note: Although the system will retry calling in case of timeout exception, the server still needs to guarantee the idempotency of the service.","tags":null,"title":"Retry strategy","type":"projects","url":"/en/projects/sofa-rpc/retry-invoke/","wordcount":205},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-jraft/road-map/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"d39cc6e615d623f8dfc320f32dcbdfa6","permalink":"/projects/sofa-jraft/road-map/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-jraft/road-map/","summary":"","tags":null,"title":"Road Map","type":"projects","url":"/projects/sofa-jraft/road-map/","wordcount":0},{"author":null,"categories":null,"content":"Roadmap Version 1.5.1  Fixed code style problems in the project: https://github.com/alipay/sofa-bolt/issues/85 Fixed known bugs in the project: https://github.com/alipay/sofa-bolt/issues/82 The RPC layer supports message list dispatching from the I/O thread: https://github.com/alipay/sofa-bolt/pull/84  Version 1.6.0 Overall goal  Unify lifecycle APIs for all components Extract and incorporate network component APIs Converge configuration methods and enhance configuration scalability  Unify lifecycle APIs for all components In the current Bolt version, APIs of lifecycle management components are named inconsistently, for example:\n ReconnectManager does not need startup or initialization, and the disabling method is stop. The initialization method for DefaultConnectionMonitor of is start, and the disabling method is destroy. The initialization method forRpcClient init, and the disabling method is shutdown. The initialization method forRpcTaskScanner is start, and the disabling method is shutdown.  We plan to unify lifecycle APIs of all components in V1.6.0:\n For components that are subject to lifecycle management, which require initialization before use and must release resources after use, their startup/shutdown APIs are to be unified.  Extract and incorporate network component APIs Network operations of Bolt are mainly performed by using the remoting class, which is provided as an abstract class. We plan to converge methods of this class, and provide them in the form of APIs in the future. There are a few advantages of doing so:\n Standardized usage Stable service Convenient internal code iteration  Taking the ReconnectManager as an example. It provides the public addCancelUrl method, which is not called in the Bolt project. This may cause problems:\n IDE will give a warning. Users may get confused on whether they should delete this method.  We plan to solve the these problems in V1.6.0 by extracting a set of stable APIs, which are convenient for users to use, helpful to improve code readability, and can lay a solid foundation for future iterations.\nConverge configuration methods and enhance configuration scalability Currently, Bolt supports the following configuration methods:\n ProtocolSwitch: supports protocol configuration (enabling or disabling CRC validation), and creates configuration objects by static means. GlobalSwitch: offers instance-level configuration, and offers GlobalSwitch configuration items to every AbstractConfigurableInstance. The default value is taken from the SystemProperty, and the configuration can be adjusted through an API. ConfigItem: enumerates Netty-related configuration items that cannot be inherited or extended before you modify the source code. ConfigManager: reads SystemProperty configurations by static means. Configs: defines the configuration item names and specifies their default values.  Generally, Bolt\u0026amp;rsquo;s configuration items look to be loose and scattered and are hard for users to extend their usage. Some …","date":-62135596800,"description":"","dir":"projects/sofa-bolt/sofa-bolt-roadmap/","fuzzywordcount":600,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"3d4eac90b5c8e657d14eb885ab1f9a92","permalink":"/en/projects/sofa-bolt/sofa-bolt-roadmap/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/en/projects/sofa-bolt/sofa-bolt-roadmap/","summary":"Roadmap Version 1.5.1  Fixed code style problems in the project: https://github.com/alipay/sofa-bolt/issues/85 Fixed known bugs in the project: https://github.com/alipay/sofa-bolt/issues/82 The RPC layer supports message list dispatching from the I/O thread: https://github.com/alipay/sofa-bolt/pull/84  Version 1.6.0 Overall goal  Unify lifecycle APIs for all components Extract and incorporate network component APIs Converge configuration methods and enhance configuration scalability  Unify lifecycle APIs for all components In the current Bolt version, APIs of lifecycle management components are named inconsistently, for example:","tags":null,"title":"Roadmap","type":"projects","url":"/en/projects/sofa-bolt/sofa-bolt-roadmap/","wordcount":539},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-boot/sofa-ark-roadmap/","fuzzywordcount":100,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"c4532d11cef15d8fe3ff5e04c7b08f90","permalink":"/en/projects/sofa-boot/sofa-ark-roadmap/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/en/projects/sofa-boot/sofa-ark-roadmap/","summary":"","tags":null,"title":"Roadmap","type":"projects","url":"/en/projects/sofa-boot/sofa-ark-roadmap/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-boot/sofa-jarslink-roadmap/","fuzzywordcount":100,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"f1d0bf15efba08535f9574e1c8344cab","permalink":"/en/projects/sofa-boot/sofa-jarslink-roadmap/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/en/projects/sofa-boot/sofa-jarslink-roadmap/","summary":"","tags":null,"title":"Roadmap","type":"projects","url":"/en/projects/sofa-boot/sofa-jarslink-roadmap/","wordcount":0},{"author":null,"categories":null,"content":"Development plans of SOFAJRaft from April to July 2019  (p1) Implement the Telnet service (or similar equivalents, the simpler the better) as an online troubleshooting means. It should be able to provide the following functions:  Raft_stat: List most or all stats of a Raft node. Metrics: Uniformly display the latest values of all metrics for the current node (the related data is scattered in the log).   (p1) Extension points: introduce the SPI mechanism. Some of the extension points are listed as follows:  LogStorage LogEntry codec RaftMetaStorage Metrics   (p1) Provide a manual rebalance API for the multi-raft-group scenario to balance the number of leaders on each node. (p2) Translate the document into multiple languages. (p2) Add a learner role that only replicates data and does not vote. (p3) Complete jepsen tests for RheaKV.  ","date":-62135596800,"description":"","dir":"projects/sofa-jraft/road-map/","fuzzywordcount":200,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"d39cc6e615d623f8dfc320f32dcbdfa6","permalink":"/en/projects/sofa-jraft/road-map/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/en/projects/sofa-jraft/road-map/","summary":"Development plans of SOFAJRaft from April to July 2019  (p1) Implement the Telnet service (or similar equivalents, the simpler the better) as an online troubleshooting means. It should be able to provide the following functions:  Raft_stat: List most or all stats of a Raft node. Metrics: Uniformly display the latest values of all metrics for the current node (the related data is scattered in the log).   (p1) Extension points: introduce the SPI mechanism.","tags":null,"title":"Roadmap","type":"projects","url":"/en/projects/sofa-jraft/road-map/","wordcount":132},{"author":null,"categories":null,"content":"Task list Some of the existing internal features will be available in subsequent iterations.\nThe features that have been implemented are listed in the following table. You are welcome to claim the tasks and make contributions.\n   Task type Task Degree of difficulty Claimant and time Planned completion time Progress Related issues     Documentation Document translation Low       Code Flexible persistent connection management Low    #56   Code etcd registry center implementation Medium @wynn5a2018-6   #153   Code eureka registry center implementation Medium @liufeiit2018-4   #52   Code gRPC support High    #57   Code CXF protocol High    #58   Code TLS support High        Version iteration Plan v5.5.0  Support JSON serialization Support H2 TLS Implement flexible connection pool Integrate Hystrix Support Consul registry center  v5.6.0  Support GRPC communication layer Support etcd registry center Support SOFAMesh Implement BOLT version negotiation and CRC verification  v5.7.0  Support Telnet built-in instructions Support SpringBoot 2.0 Support Mock function Support encryption  v5.8.0  Support authorization Support SofaRegistry Support Reactive  ","date":-62135596800,"description":"","dir":"projects/sofa-rpc/roadmap/","fuzzywordcount":200,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"6064fc180911f520f6d1590b88595693","permalink":"/en/projects/sofa-rpc/roadmap/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/en/projects/sofa-rpc/roadmap/","summary":"Task list Some of the existing internal features will be available in subsequent iterations.\nThe features that have been implemented are listed in the following table. You are welcome to claim the tasks and make contributions.\n   Task type Task Degree of difficulty Claimant and time Planned completion time Progress Related issues     Documentation Document translation Low       Code Flexible persistent connection management Low    #56   Code etcd registry center implementation Medium @wynn5a2018-6   #153   Code eureka registry center implementation Medium @liufeiit2018-4   #52   Code gRPC support High    #57   Code CXF protocol High    #58   Code TLS support High        Version iteration Plan v5.","tags":null,"title":"Roadmap","type":"projects","url":"/en/projects/sofa-rpc/roadmap/","wordcount":150},{"author":null,"categories":null,"content":"Tasks The following table lists the features that have not yet been implemented. We encourage you to claim the tasks and make a contribution.\n   Type Task Difficulty Claimed by and on Planned completion time Progress Related issues     Document SOFADashboard Parameter Configuration Guide Simple       Code Support for SOFARegistry Medium       Code Support for Docker Medium       Code Support for Kubernetes Medium       Code Support for Apollo Medium       Code Frontend optimization Medium        ","date":-62135596800,"description":"","dir":"projects/sofa-dashboard/roadmap/","fuzzywordcount":100,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"a740c874742b504de9011b07f3a4ddb5","permalink":"/en/projects/sofa-dashboard/roadmap/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/en/projects/sofa-dashboard/roadmap/","summary":"Tasks The following table lists the features that have not yet been implemented. We encourage you to claim the tasks and make a contribution.\n   Type Task Difficulty Claimed by and on Planned completion time Progress Related issues     Document SOFADashboard Parameter Configuration Guide Simple       Code Support for SOFARegistry Medium       Code Support for Docker Medium       Code Support for Kubernetes Medium       Code Support for Apollo Medium       Code Frontend optimization Medium        ","tags":null,"title":"Roadmap and task claim","type":"projects","url":"/en/projects/sofa-dashboard/roadmap/","wordcount":67},{"author":null,"categories":null,"content":"Roadmap Tasks We have some internal implementations of some new features, which will be released along with the iterations when sorted out.\nFeatures that are not implemented yet are listed in the following table. We encourage you to claim the tasks and contribute to SOFARegistry.\n   Type Task Difficulty Claimed by and on Planned completion time Progress Related issues     Document Document Translation Low       Code Support for Spring Cloud Medium       Code Data self-check High       Code Blacklist filtering Medium       Code SOFARegistry Dashboard High       Code Support for other microservice frameworks Medium       Code Support for Docker \u0026amp;amp; Kubernetes High       Code Multi-language client support High        Version iteration plan v5.3.0  Support for Spring Cloud Data self-check Blacklist filtering  v5.4.0  SOFARegistry Dashboard Support for other microservice frameworks  v5.5.0  Support for Docker \u0026amp;amp; Kubernetes Multi-language client support  ","date":-62135596800,"description":"","dir":"projects/sofa-registry/roadmap/","fuzzywordcount":200,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"b0ab45d52ba3eb7db590a4f5e4197c9e","permalink":"/en/projects/sofa-registry/roadmap/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/en/projects/sofa-registry/roadmap/","summary":"Roadmap Tasks We have some internal implementations of some new features, which will be released along with the iterations when sorted out.\nFeatures that are not implemented yet are listed in the following table. We encourage you to claim the tasks and contribute to SOFARegistry.\n   Type Task Difficulty Claimed by and on Planned completion time Progress Related issues     Document Document Translation Low       Code Support for Spring Cloud Medium       Code Data self-check High       Code Blacklist filtering Medium       Code SOFARegistry Dashboard High       Code Support for other microservice frameworks Medium       Code Support for Docker \u0026amp; Kubernetes High       Code Multi-language client support High        Version iteration plan v5.","tags":null,"title":"Roadmap and task claims","type":"projects","url":"/en/projects/sofa-registry/roadmap/","wordcount":128},{"author":null,"categories":null,"content":"In SOFABoot, the RPC framework provides some configuration parameters at the application level, and supports application-level parameter configuration, such as port and thread pool, which are bound by Spring Boot\u0026amp;rsquo;s @ConfigurationProperties. The binding attribute class is com.alipay.sofa.rpc.boot.config.SofaBootRpcProperties, and the configuration prefix is as follows:\nstatic final String PREFIX = \u0026amp;#34;com.alipay.sofa.rpc\u0026amp;#34;; Then in the application.properties file, you can currently configure the following options. Also, you can write the codes based on your own coding habits as well as according to the Spring Boot specification, camel, underline and so on.\n#Standalone fault tolerance com.alipay.sofa.rpc.aft.regulation.effective # Whether to enable standalone fault tolerance com.alipay.sofa.rpc.aft.degrade.effective # Whether to enable degradation com.alipay.sofa.rpc.aft.time.window # Time window com.alipay.sofa.rpc.aft.least.window.count # Minimum number of calls com.alipay.sofa.rpc.aft.least.window.exception.rate.multiple # minimum exception rate com.alipay.sofa.rpc.aft.weight.degrade.rate # Degradation rate com.alipay.sofa.rpc.aft.weight.recover.rate # Recovery rate com.alipay.sofa.rpc.aft.degrade.least.weight #Minimum degrading weight com.alipay.sofa.rpc.aft.degrade.max.ip.count # Maximum number of degraded IPs # bolt com.alipay.sofa.rpc.bolt.port # bolt port com.alipay.sofa.rpc.bolt.thread.pool.core.size # Number of bolt core threads com.alipay.sofa.rpc.bolt.thread.pool.max.size # Maximum number of bolt threads com.alipay.sofa.rpc.bolt.thread.pool.queue.size # bolt thread pool queue com.alipay.sofa.rpc.bolt.accepts.size # Number of connections that server allows client to establish # rest com.alipay.sofa.rpc.rest.hostname # rest hostname com.alipay.sofa.rpc.rest.port # rest port com.alipay.sofa.rpc.rest.io.thread.size # Number of rest io threads com.alipay.sofa.rpc.rest.context.path # rest context path com.alipay.sofa.rpc.rest.thread.pool.core.size # Number of rest core threads com.alipay.sofa.rpc.rest.thread.pool.max.size # Maximum number of rest threads com.alipay.sofa.rpc.rest.max.request.size # Maximum rest request size com.alipay.sofa.rpc.rest.telnet # Whether to allow rest telnet com.alipay.sofa.rpc.rest.daemon # Whether to hold the port. If true, exit with the main thread exit # dubbo com.alipay.sofa.rpc.dubbo.port # dubbo port com.alipay.sofa.rpc.dubbo.io.thread.size # dubbo io thread size com.alipay.sofa.rpc.dubbo.thread.pool.max.size # Maximum number of dubbo business threads com.alipay.sofa.rpc.dubbo.accepts.size # Number of connections that server allows client to establish com.alipay.sofa.rpc.dubbo.thread.pool.core.size #Number of dubbo core Threads com.alipay.sofa.rpc.dubbo.thread.pool.queue.size #Maximum number of dubbo threads # registry com.alipay.sofa.rpc.registry.address # Registry center address com.alipay.sofa.rpc.virtual.host # virtual host com.alipay.sofa.rpc.bound.host # bind host …","date":-62135596800,"description":"","dir":"projects/sofa-rpc/application-rpc-config/","fuzzywordcount":400,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"bd19b2ced39a8deb802c13e525093fac","permalink":"/en/projects/sofa-rpc/application-rpc-config/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/en/projects/sofa-rpc/application-rpc-config/","summary":"In SOFABoot, the RPC framework provides some configuration parameters at the application level, and supports application-level parameter configuration, such as port and thread pool, which are bound by Spring Boot\u0026rsquo;s @ConfigurationProperties. The binding attribute class is com.alipay.sofa.rpc.boot.config.SofaBootRpcProperties, and the configuration prefix is as follows:\nstatic final String PREFIX = \u0026#34;com.alipay.sofa.rpc\u0026#34;; Then in the application.properties file, you can currently configure the following options. Also, you can write the codes based on your own coding habits as well as according to the Spring Boot specification, camel, underline and so on.","tags":null,"title":"RPC application parameter configuration","type":"projects","url":"/en/projects/sofa-rpc/application-rpc-config/","wordcount":381},{"author":null,"categories":null,"content":"ProviderConfig    Attribute Name Default value Comment     id ID Generated automatically    application Application object Empty ApplicationConfig    interfaceId Service interface (unique identifier)  Use the actual interface class for both normal calls and return calls.   uniqueId Service tag (unique identifier)     filterRef Filter configuration example  List   filter Filter configuration alias  separated by commas   registry Registry center on the server  List   methods Method-level configuration  Map\u0026amp;lt;String, MethodConfig\u0026amp;gt;   serialization Serialization protocol hessian2    register Whether to register true It depends on the implementation and may not take effect.   subscribe Whether to subscribe true It depends on the implementation and may not take effect.   proxy Proxy type javassist As well as JDK dynamic proxy   ref Service interface implementation class     server server  List, and it can be sent to multiple servers at once   delay Time for delaying service publishing  Service delay   weight Service static weight     include Included methods     exclude Methods not included     dynamic Whether to dynamically register     priority Service priority     bootstrap Service publishing starter bolt    executor Custom thread pool     timeout Execution timeout period for server     concurrents Concurrent execution request  Maximum number of parallel executable requests per method under interface. -1 indicates turning off the concurrent filter, and 0 means that filtering is enabled but not limited   cacheRef Result cache implementation class     mockRef Mock implementation class     mock Whether to enable Mock     validation Whether to enable parameter verification (jsr303)     compress Whether to start compression false    cache Whether to enable result caching false    parameters Extra attributes  Map\u0026amp;lt;String, String\u0026amp;gt;    ConsumerConfig    Attribute Name Default value Comment     id ID Generated automatically    application Application object Empty ApplicationConfig    interfaceId Service interface (unique identifier)  Use the actual interface class for both normal calls and return calls.   uniqueId Service tag (Unique identifier)     filterRef Filter configuration example  List   filter Filter configuration alias  List   registry Registry center on the server  List   methods Method-level configuration  Map\u0026amp;lt;String, MethodConfig\u0026amp;gt;   serialization Serialization protocol hessian2    register Whether to register true It depends on the implementation and may not take effect.   subscribe Whether to subscribe true It depends on the implementation and may not take effect.   proxy proxy type javassist As well as JDK dynamic proxy   protocol Call protocol bolt Currently supports bolt, rest, dubbo   directUrl Direct address  Directly connected to register   generic Whether to generalize calls false    connectTimeout Timeout period for connection establishment 3000(cover 5000)    disconnectTimeout Timeout period for disconnection 5000(cover …","date":-62135596800,"description":"","dir":"projects/sofa-rpc/configuration-common/","fuzzywordcount":1100,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"2eb5963f4785f5f828f0e15759272971","permalink":"/en/projects/sofa-rpc/configuration-common/","publishdate":"0001-01-01T00:00:00Z","readingtime":6,"relpermalink":"/en/projects/sofa-rpc/configuration-common/","summary":"ProviderConfig    Attribute Name Default value Comment     id ID Generated automatically    application Application object Empty ApplicationConfig    interfaceId Service interface (unique identifier)  Use the actual interface class for both normal calls and return calls.   uniqueId Service tag (unique identifier)     filterRef Filter configuration example  List   filter Filter configuration alias  separated by commas   registry Registry center on the server  List   methods Method-level configuration  Map\u0026lt;String, MethodConfig\u0026gt;   serialization Serialization protocol hessian2    register Whether to register true It depends on the implementation and may not take effect.","tags":null,"title":"RPC publishing and reference configuration","type":"projects","url":"/en/projects/sofa-rpc/configuration-common/","wordcount":1084},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-rpc/configuration-common/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"2eb5963f4785f5f828f0e15759272971","permalink":"/projects/sofa-rpc/configuration-common/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-rpc/configuration-common/","summary":"","tags":null,"title":"RPC 发布订阅配置","type":"projects","url":"/projects/sofa-rpc/configuration-common/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-rpc/application-rpc-config/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"bd19b2ced39a8deb802c13e525093fac","permalink":"/projects/sofa-rpc/application-rpc-config/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-rpc/application-rpc-config/","summary":"","tags":null,"title":"RPC 应用参数配置","type":"projects","url":"/projects/sofa-rpc/application-rpc-config/","wordcount":0},{"author":null,"categories":null,"content":"Sampling Currently,SOFATracer provides two sampling modes. One is the fixed sampling rate based on BitSet. The other is the sampling provided to the user to customize the implementation sampling.The following example shows how to use it.\nThis example is based on the tracer-sampled-with-springmvc project,Except for application.properties, everything else is the same.\nSampling mode based on fixed sampling rate Add sampling related configuration items in application.properties #Sampling rate 0~100 com.alipay.sofa.tracer.samplerPercentage=100 #Sampling type name com.alipay.sofa.tracer.samplerName=PercentageBasedSampler Verification  When the sample rate is set to 100, the digest log is printed each time. When the sample rate is set to 0, the digest log is not printed. Print by probability when the sampling rate is set between 0 and 100.  The result is verified by requesting 10 times.\n1、When the sample rate is set to 100, the digest log is printed each time.\nStart the project and enter in the browser:http://localhost:8080/springmvc ,And refresh the address 10 times, check the log as follows:\n{\u0026amp;#34;time\u0026amp;#34;:\u0026amp;#34;2018-11-09 11:54:47.643\u0026amp;#34;,\u0026amp;#34;local.app\u0026amp;#34;:\u0026amp;#34;SOFATracerSpringMVC\u0026amp;#34;,\u0026amp;#34;traceId\u0026amp;#34;:\u0026amp;#34;0a0fe8ec154173568757510019269\u0026amp;#34;,\u0026amp;#34;spanId\u0026amp;#34;:\u0026amp;#34;0.1\u0026amp;#34;,\u0026amp;#34;request.url\u0026amp;#34;:\u0026amp;#34;http://localhost:8080/springmvc\u0026amp;#34;,\u0026amp;#34;method\u0026amp;#34;:\u0026amp;#34;GET\u0026amp;#34;,\u0026amp;#34;result.code\u0026amp;#34;:\u0026amp;#34;200\u0026amp;#34;,\u0026amp;#34;req.size.bytes\u0026amp;#34;:-1,\u0026amp;#34;resp.size.bytes\u0026amp;#34;:0,\u0026amp;#34;time.cost.milliseconds\u0026amp;#34;:68,\u0026amp;#34;current.thread.name\u0026amp;#34;:\u0026amp;#34;http-nio-8080-exec-1\u0026amp;#34;,\u0026amp;#34;baggage\u0026amp;#34;:\u0026amp;#34;\u0026amp;#34;} {\u0026amp;#34;time\u0026amp;#34;:\u0026amp;#34;2018-11-09 11:54:50.980\u0026amp;#34;,\u0026amp;#34;local.app\u0026amp;#34;:\u0026amp;#34;SOFATracerSpringMVC\u0026amp;#34;,\u0026amp;#34;traceId\u0026amp;#34;:\u0026amp;#34;0a0fe8ec154173569097710029269\u0026amp;#34;,\u0026amp;#34;spanId\u0026amp;#34;:\u0026amp;#34;0.1\u0026amp;#34;,\u0026amp;#34;request.url\u0026amp;#34;:\u0026amp;#34;http://localhost:8080/springmvc\u0026amp;#34;,\u0026amp;#34;method\u0026amp;#34;:\u0026amp;#34;GET\u0026amp;#34;,\u0026amp;#34;result.code\u0026amp;#34;:\u0026amp;#34;200\u0026amp;#34;,\u0026amp;#34;req.size.bytes\u0026amp;#34;:-1,\u0026amp;#34;resp.size.bytes\u0026amp;#34;:0,\u0026amp;#34;time.cost.milliseconds\u0026amp;#34;:3,\u0026amp;#34;current.thread.name\u0026amp;#34;:\u0026amp;#34;http-nio-8080-exec-2\u0026amp;#34;,\u0026amp;#34;baggage\u0026amp;#34;:\u0026amp;#34;\u0026amp;#34;} {\u0026amp;#34;time\u0026amp;#34;:\u0026amp;#34;2018-11-09 11:54:51.542\u0026amp;#34;,\u0026amp;#34;local.app\u0026amp;#34;:\u0026amp;#34;SOFATracerSpringMVC\u0026amp;#34;,\u0026amp;#34;traceId\u0026amp;#34;:\u0026amp;#34;0a0fe8ec154173569153910049269\u0026amp;#34;,\u0026amp;#34;spanId\u0026amp;#34;:\u0026amp;#34;0.1\u0026amp;#34;,\u0026amp;#34;request.url\u0026amp;#34;:\u0026amp;#34;http://localhost:8080/springmvc\u0026amp;#34;,\u0026amp;#34;method\u0026amp;#34;:\u0026amp;#34;GET\u0026amp;#34;,\u0026amp;#34;result.code\u0026amp;#34;:\u0026amp;#34;200\u0026amp;#34;,\u0026amp;#34;req.size.bytes\u0026amp;#34;:-1,\u0026amp;#34;resp.size.bytes\u0026amp;#34;:0,\u0026amp;#34;time.cost.milliseconds\u0026amp;#34;:3,\u0026amp;#34;current.thread.name\u0026amp;#34;:\u0026amp;#34;http-nio-8080-exec-4\u0026amp;#34;,\u0026amp;#34;baggage\u0026amp;#34;:\u0026amp;#34;\u0026amp;#34;} {\u0026amp;#34;time\u0026amp;#34;:\u0026amp;#34;2018-11-09 …","date":-62135596800,"description":"","dir":"projects/sofa-tracer/sampler/","fuzzywordcount":500,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"48856a040da01abc84213934c1c5fce4","permalink":"/en/projects/sofa-tracer/sampler/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/en/projects/sofa-tracer/sampler/","summary":"Sampling Currently,SOFATracer provides two sampling modes. One is the fixed sampling rate based on BitSet. The other is the sampling provided to the user to customize the implementation sampling.The following example shows how to use it.\nThis example is based on the tracer-sampled-with-springmvc project,Except for application.properties, everything else is the same.\nSampling mode based on fixed sampling rate Add sampling related configuration items in application.properties #Sampling rate 0~100 com.alipay.sofa.tracer.samplerPercentage=100 #Sampling type name com.","tags":null,"title":"Sampling modes","type":"projects","url":"/en/projects/sofa-tracer/sampler/","wordcount":426},{"author":null,"categories":null,"content":"1. Integrated deployment 1.1 Scale up registry-integration Assume that three registry-integration servers have been deployed currently, which are namely node1, node2, and node 3. The new node to be added to the cluster is node 4.\nOperation steps:\nStep 1. Deploy the new registry-integration node\nFirst, deploy registry-integration.tgz on node4 by referencing the Deployment topic. Note that you need to set the nodes.metaNode configuration item on node4 to a 4-server endpoint list:\nnodes.metaNode=DefaultDataCenter:\u0026amp;lt;node1\u0026amp;gt;,\u0026amp;lt;node2\u0026amp;gt;,\u0026amp;lt;node3\u0026amp;gt;,\u0026amp;lt;node4\u0026amp;gt; In this step, after node4 is started, visit curl http://\u0026amp;lt;node4\u0026amp;gt;:9615/health/check. The status will be unhealthy, because node4 has not been added to the cluster yet. To add it to the cluster, perform the next step.\nStep 2. Call the changePeer operation to add a new node to a cluster\nRun the changePeer command on one of the existing servers (node1, node2, and node3), to modify the current cluster from a three-node cluster (node1, node2, and node3) to a four-node cluster (node1, node2, node3, and node4):\ncurl -X POST \u0026amp;#34;http://\u0026amp;lt;node1\u0026amp;gt;:9615/manage/changePeer\u0026amp;#34; -d \u0026amp;#34;ipAddressList=\u0026amp;lt;node1\u0026amp;gt;,\u0026amp;lt;node2\u0026amp;gt;,\u0026amp;lt;node3\u0026amp;gt;,\u0026amp;lt;node4\u0026amp;gt;\u0026amp;#34; After completing this step, visit curl http://\u0026amp;lt;node4\u0026amp;gt;:9615/health/check. The status will be healthy.\n1.2 Scale down registry-integration Assume that you have three servers in one cluster, which are respectively node1, node2, and node3, and you want to scale down node3.\n1.2.1 Smooth scale-down Operation steps:\nStep 1. Call the changePeer operation to remove a node\nRun the changePeer command on either node1 or node2 to change the cluster list from \u0026amp;ldquo;node1, node2, node3\u0026amp;rdquo; to \u0026amp;ldquo;node1,node2\u0026amp;rdquo;. This removes node3 from the endpoint list of the cluster:\ncurl -X POST \u0026amp;#34;http://\u0026amp;lt;node1\u0026amp;gt;:9615/manage/changePeer\u0026amp;#34; -d \u0026amp;#34;ipAddressList=\u0026amp;lt;node1\u0026amp;gt;,\u0026amp;lt;node2\u0026amp;gt;\u0026amp;#34; After completing this step, visit curl http://\u0026amp;lt;node3\u0026amp;gt;:9615/health/check. The status will be unhealthy, because node3 has already been removed from the cluster.\nStep 2. Close node3\nThis step is optional, because node3 has already been removed from the cluster, and it does not affect the cluster even if it is still running.\n1.2.2 Handling of node failure If node3 is no longer functional, you need to remove it from the cluster.\nOperation steps:\nStep 1. Call the changePeer operation to remove a node\nRun the changePeer command on either node1 or node2 to change the cluster list from \u0026amp;ldquo;node1, node2, node3\u0026amp;rdquo; to \u0026amp;ldquo;node1,node2\u0026amp;rdquo;. This removes node3 from the endpoint list of the cluster:\ncurl -X POST \u0026amp;#34;http://\u0026amp;lt;node1\u0026amp;gt;:9615/manage/changePeer\u0026amp;#34; -d \u0026amp;#34;ipAddressList=\u0026amp;lt;node1\u0026amp;gt;,\u0026amp;lt;node2\u0026amp;gt;\u0026amp;#34; 2. Independent deployment 2.1 Scale up registry-meta Assume that you have already deployed three registry-meta servers, which are respectively metaNode1, metaNode2, and metaNode3. The new node to be added to the cluster is node …","date":-62135596800,"description":"","dir":"projects/sofa-registry/scale/","fuzzywordcount":1000,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"57de6dc4da1292063ff25ecea9ffbd08","permalink":"/en/projects/sofa-registry/scale/","publishdate":"0001-01-01T00:00:00Z","readingtime":5,"relpermalink":"/en/projects/sofa-registry/scale/","summary":"1. Integrated deployment 1.1 Scale up registry-integration Assume that three registry-integration servers have been deployed currently, which are namely node1, node2, and node 3. The new node to be added to the cluster is node 4.\nOperation steps:\nStep 1. Deploy the new registry-integration node\nFirst, deploy registry-integration.tgz on node4 by referencing the Deployment topic. Note that you need to set the nodes.metaNode configuration item on node4 to a 4-server endpoint list:","tags":null,"title":"Scaling","type":"projects","url":"/en/projects/sofa-registry/scale/","wordcount":954},{"author":null,"categories":null,"content":"Quickly understand ACTS scripts Do you have to frequently compile test cases? Are you frustrated by the following problems?\n You have to repeat assertEquals, which is definitely not creative. Missing an assert may lead to false success, while mistaking one may ruin your mood. If the scenario is complex, the test code may be longer than the service code, which is painful. You have to migrate utility classes every time you start writing test cases for a new application.  A TestNG test case is shown on the left side, and an ACTS test case on the right. Repeated coding is gone, and the code size is significantly reduced. Unlike ordinary test scripts, ACTS scripts inherit from the ActsTestBase class, which is encapsulated with data loading methods, driving methods, execution engines, and validation rules. Users do not have to clean or prepare data, run test cases, or validate results. ACTS implements zero coding for simple services, which greatly reduces the coding and maintenance costs.\nGenerate test scripts Prerequisites: Be sure to use Maven to compile your project and generate the object model. Otherwise, ACTS IDE may encounter unexpected errors, such as edit failures and incorrect data.\nRight click a the method defined in the interface and select ACTS Function \u0026amp;gt; Generate Test Case.\nRun test script Method: Right click the tested method in ACTS script, and select TestNG to run the test script as shown in the following figure.\nSpecify a test script to run   Set test_only＝^T in src/test/resource/config/acts-config.properties to run only the test case whose name starts with T. You can also replace ^T with other regular expressions.\n  In this case, you can modify the name of the test case that you want to run by adding T in front of its name. ACTS only runs a test case whose name starts with T.\n  Split test cases of the test script ACTS stores all test case data of a test script in the same YAML file by default. You can determine whether to store test case data by test script or by test case by configuring the option spilt_yaml_by_case. It is set to false by default, which means all test case data of the same test script is stored in one YAML file.\nYou can set spilt_yaml_by_case=true in acts-config.properties to store each test case of a new test script in a separate YAML file that is named after the case ID. This reduces the chances of file conflicts in the case where multiple developers work on the same interface.\nIn addition, ACTS provides a utility class that allows you split a legacy YAML file of a specified test script under a specified path by test case. See the following.\nBaseDataUtil.saveYamlDataToCaseByCase\n Note: Before the split, we recommend that you rename the original YAML file for backup, and then use the test case editor to check whether the content of the split files is correct. The original YAML file must be deleted if the split files are correct, because they cannot coexist.  Coding for data preparation ACTS provides context APIs …","date":-62135596800,"description":"","dir":"projects/sofa-acts/usage-script/","fuzzywordcount":900,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"0d20739dedad1f11277bd02ed65329c3","permalink":"/en/projects/sofa-acts/usage-script/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/en/projects/sofa-acts/usage-script/","summary":"Quickly understand ACTS scripts Do you have to frequently compile test cases? Are you frustrated by the following problems?\n You have to repeat assertEquals, which is definitely not creative. Missing an assert may lead to false success, while mistaking one may ruin your mood. If the scenario is complex, the test code may be longer than the service code, which is painful. You have to migrate utility classes every time you start writing test cases for a new application.","tags":null,"title":"Scripts","type":"projects","url":"/en/projects/sofa-acts/usage-script/","wordcount":825},{"author":null,"categories":null,"content":"SEATA Demo for SOFAStack Cloud Native Workshop on KubeCon China 2019\nAT mode 1.Introduce maven dependencies Introduce the following dependencies into the POM file of the parent project (seata-demo-at/pom.xml):\n... \u0026amp;lt;properties\u0026amp;gt; ... \u0026amp;lt;seata.version\u0026amp;gt;0.6.1\u0026amp;lt;/seata.version\u0026amp;gt; \u0026amp;lt;netty4.version\u0026amp;gt;4.1.24.Final\u0026amp;lt;/netty4.version\u0026amp;gt; \u0026amp;lt;/properties\u0026amp;gt; ... \u0026amp;lt;dependencyManagement\u0026amp;gt; \u0026amp;lt;dependencies\u0026amp;gt; ... \u0026amp;lt;dependency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;io.seata\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;seata-all\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;version\u0026amp;gt;${seata.version}\u0026amp;lt;/version\u0026amp;gt; \u0026amp;lt;/dependency\u0026amp;gt; \u0026amp;lt;dependency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;io.seata\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;seata-server\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;version\u0026amp;gt;${seata.version}\u0026amp;lt;/version\u0026amp;gt; \u0026amp;lt;exclusions\u0026amp;gt; \u0026amp;lt;exclusion\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;javax.servlet\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;servlet-api\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;/exclusion\u0026amp;gt; \u0026amp;lt;/exclusions\u0026amp;gt; \u0026amp;lt;/dependency\u0026amp;gt; \u0026amp;lt;dependency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;io.netty\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;netty-all\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;version\u0026amp;gt;${netty4.version}\u0026amp;lt;/version\u0026amp;gt; \u0026amp;lt;/dependency\u0026amp;gt; \u0026amp;lt;/dependencies\u0026amp;gt; \u0026amp;lt;/dependencyManagement\u0026amp;gt; Introduce the following dependencies into the POM file of the stock-mng project (seata-demo-at/stock-mng/pom.xml):\n\u0026amp;lt;dependencies\u0026amp;gt; .... \u0026amp;lt;dependency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;io.seata\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;seata-all\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;/dependency\u0026amp;gt; \u0026amp;lt;dependency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;io.netty\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;netty-all\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;/dependency\u0026amp;gt; \u0026amp;lt;dependencies\u0026amp;gt; Introduce the following dependencies into the POM file of the balance-mng-impl project (seata-demo-at/balance-mng/balance-mng-impl/pom.xml):\n\u0026amp;lt;dependencies\u0026amp;gt; .... \u0026amp;lt;dependency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;io.seata\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;seata-all\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;/dependency\u0026amp;gt; \u0026amp;lt;dependency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;io.seata\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;seata-server\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;/dependency\u0026amp;gt; \u0026amp;lt;dependency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;io.netty\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;netty-all\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;/dependency\u0026amp;gt; \u0026amp;lt;dependencies\u0026amp;gt; 2. Use Seata\u0026amp;rsquo;s DataSourceProxy to proxy actual data source and configure GlobalTransactionScanner to scan @GlobalTransaction annotation Add the following java snippet to the main methods in BalanceMngApplication and StockMngApplication classes:\n... import io.seata.rm.datasource.DataSourceProxy; import io.seata.spring.annotation.GlobalTransactionScanner; ... @Configuration public static class DataSourceConfig { @Bean @Primary @ConfigurationProperties(prefix = \u0026amp;#34;spring.datasource.hikari\u0026amp;#34;) public DataSource dataSource(DataSourceProperties properties) { HikariDataSource dataSource = createDataSource(properties, HikariDataSource.class); if (StringUtils.hasText(properties.getName())) { dataSource.setPoolName(properties.getName()); } return new DataSourceProxy(dataSource); } @SuppressWarnings(\u0026amp;#34;unchecked\u0026amp;#34;) protected static …","date":-62135596800,"description":"This guide introduces how to use the AT mode and TCC mode of the open-source distributed transaction framework Seata to solve the final consistency of service data.","dir":"guides/kc-seata-demo/","fuzzywordcount":1500,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"60071a0eb44bf0901fb187eefd63ccdb","permalink":"/en/guides/kc-seata-demo/","publishdate":"0001-01-01T00:00:00Z","readingtime":7,"relpermalink":"/en/guides/kc-seata-demo/","summary":"SEATA Demo for SOFAStack Cloud Native Workshop on KubeCon China 2019\nAT mode 1.Introduce maven dependencies Introduce the following dependencies into the POM file of the parent project (seata-demo-at/pom.xml):\n... \u0026lt;properties\u0026gt; ... \u0026lt;seata.version\u0026gt;0.6.1\u0026lt;/seata.version\u0026gt; \u0026lt;netty4.version\u0026gt;4.1.24.Final\u0026lt;/netty4.version\u0026gt; \u0026lt;/properties\u0026gt; ... \u0026lt;dependencyManagement\u0026gt; \u0026lt;dependencies\u0026gt; ... \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;io.seata\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;seata-all\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${seata.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;io.seata\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;seata-server\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${seata.version}\u0026lt;/version\u0026gt; \u0026lt;exclusions\u0026gt; \u0026lt;exclusion\u0026gt; \u0026lt;groupId\u0026gt;javax.servlet\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;servlet-api\u0026lt;/artifactId\u0026gt; \u0026lt;/exclusion\u0026gt; \u0026lt;/exclusions\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;io.netty\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;netty-all\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${netty4.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;/dependencyManagement\u0026gt; Introduce the following dependencies into the POM file of the stock-mng project (seata-demo-at/stock-mng/pom.","tags":null,"title":"Seata distributed transaction practice","type":"guides","url":"/en/guides/kc-seata-demo/","wordcount":1464},{"author":null,"categories":null,"content":"SOFABoot RPC Starter provides a variety of registry center options as well as convenient configurations.\nCurrently, bolt, rest, and dubbo all support Zookeeper as registry center. In addition, bolt and rest support the local file system as registry center, which is generally used for testing.\n","date":-62135596800,"description":"","dir":"projects/sofa-rpc/registry-usage/","fuzzywordcount":100,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"5a1a4619c8ac4a9fc27b8576472aed9f","permalink":"/en/projects/sofa-rpc/registry-usage/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/en/projects/sofa-rpc/registry-usage/","summary":"SOFABoot RPC Starter provides a variety of registry center options as well as convenient configurations.\nCurrently, bolt, rest, and dubbo all support Zookeeper as registry center. In addition, bolt and rest support the local file system as registry center, which is generally used for testing.","tags":null,"title":"Select Service Registry","type":"projects","url":"/en/projects/sofa-rpc/registry-usage/","wordcount":45},{"author":null,"categories":null,"content":"When using the Bolt communication protocol, SOFARPC can choose different serialization protocols, which can be hessian2 or protobuf currently.\nBy default, SOFARPC uses hessian2 as the serialization protocol. If you need to set the serialization protocol to protobuf, you need to configure the following settings when publishing the service:\n\u0026amp;lt;sofa:service ref=\u0026amp;#34;sampleService\u0026amp;#34; interface=\u0026amp;#34;com.alipay.sofarpc.demo.SampleService\u0026amp;#34;\u0026amp;gt; \u0026amp;lt;sofa:binding.bolt\u0026amp;gt; \u0026amp;lt;sofa:global-attrs serialize-type=\u0026amp;#34;protobuf\u0026amp;#34;/\u0026amp;gt; \u0026amp;lt;/sofa:binding.bolt\u0026amp;gt; \u0026amp;lt;/sofa:service\u0026amp;gt; That is to add the \u0026amp;lt;sofa:global-attrs\u0026amp;gt; tag to the \u0026amp;lt;sofa:binding.bolt\u0026amp;gt; tag and set the serialize-type attribute to protobuf.\nCorrespondingly, when referencing the service, you also need to change the serialization protocol to protobuf. The setting method is similar to publishing the service:\n\u0026amp;lt;sofa:reference interface=\u0026amp;#34;com.alipay.sofarpc.demo.SampleService\u0026amp;#34; id=\u0026amp;#34;sampleServiceRef\u0026amp;#34; jvm-first=\u0026amp;#34;false\u0026amp;#34;\u0026amp;gt; \u0026amp;lt;sofa:binding.bolt\u0026amp;gt; \u0026amp;lt;sofa:global-attrs serialize-type=\u0026amp;#34;protobuf\u0026amp;#34;/\u0026amp;gt; \u0026amp;lt;/sofa:binding.bolt\u0026amp;gt; \u0026amp;lt;/sofa:reference\u0026amp;gt; Currently, when you use Annotation for service reference, it is not yet supported to set serialization protocol. But this will be supported in future versions. For details, see ISSUE: https://github.com/sofastack/sofa-boot/issues/278\n","date":-62135596800,"description":"","dir":"projects/sofa-rpc/serialization/","fuzzywordcount":200,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"87e2faa84c2c7a7605243dc096bc4e17","permalink":"/en/projects/sofa-rpc/serialization/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/en/projects/sofa-rpc/serialization/","summary":"When using the Bolt communication protocol, SOFARPC can choose different serialization protocols, which can be hessian2 or protobuf currently.\nBy default, SOFARPC uses hessian2 as the serialization protocol. If you need to set the serialization protocol to protobuf, you need to configure the following settings when publishing the service:\n\u0026lt;sofa:service ref=\u0026#34;sampleService\u0026#34; interface=\u0026#34;com.alipay.sofarpc.demo.SampleService\u0026#34;\u0026gt; \u0026lt;sofa:binding.bolt\u0026gt; \u0026lt;sofa:global-attrs serialize-type=\u0026#34;protobuf\u0026#34;/\u0026gt; \u0026lt;/sofa:binding.bolt\u0026gt; \u0026lt;/sofa:service\u0026gt; That is to add the \u0026lt;sofa:global-attrs\u0026gt; tag to the \u0026lt;sofa:binding.bolt\u0026gt; tag and set the serialize-type attribute to protobuf.","tags":null,"title":"Serialization protocol","type":"projects","url":"/en/projects/sofa-rpc/serialization/","wordcount":138},{"author":null,"categories":null,"content":"Deployment SOFARegistry supports two types of deployment modes, which are integrated deployment and independent deployment. This topic describes the simplest integrated single-node deployment. For more information about deployment modes, see the Deployment topic.\nDeployment steps 1. Download the source code or installation package. Download the source code. git clone https://github.com/sofastack/sofa-registry.git cd sofa-registry mvn clean package -DskipTests cp server/distribution/integration/target/registry-integration.tgz \u0026amp;lt;somewhere\u0026amp;gt; cd \u0026amp;lt;somewhere\u0026amp;gt; \u0026amp;amp;\u0026amp;amp; mkdir registry-integration tar -zxvf registry-integration.tgz -C registry-integration cd registry-integration Download the installation package. You can download the latest registry-integration-$version.tar.gz package from Releases.\nmkdir registry-integration tar -zxvf registry-integration-$version.tar.gz -C registry-integration cd registry-integration 2. Start registry-integration. Linux/Unix/Mac Startup command: sh bin/startup.sh\nWindows Double click the startup.bat file under the bin directory.\n3. Check the running status. You can access the healthcheck API provided by these three roles, or view logs/registry-startup.log to check the running status.\n# View the healthcheck API of the meta role: $ curl http://localhost:9615/health/check {\u0026amp;#34;success\u0026amp;#34;:true,\u0026amp;#34;message\u0026amp;#34;:\u0026amp;#34;... raftStatus:Leader\u0026amp;#34;} # View the healthcheck API of the data role: $ curl http://localhost:9622/health/check {\u0026amp;#34;success\u0026amp;#34;:true,\u0026amp;#34;message\u0026amp;#34;:\u0026amp;#34;... status:WORKING\u0026amp;#34;} # View the healthcheck API of the session role: $ curl http://localhost:9603/health/check {\u0026amp;#34;success\u0026amp;#34;:true,\u0026amp;#34;message\u0026amp;#34;:\u0026amp;#34;...\u0026amp;#34;} ","date":-62135596800,"description":"","dir":"projects/sofa-registry/server-quick-start/","fuzzywordcount":200,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"b620900b56ba04f4668838846a97698a","permalink":"/en/projects/sofa-registry/server-quick-start/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/en/projects/sofa-registry/server-quick-start/","summary":"Deployment SOFARegistry supports two types of deployment modes, which are integrated deployment and independent deployment. This topic describes the simplest integrated single-node deployment. For more information about deployment modes, see the Deployment topic.\nDeployment steps 1. Download the source code or installation package. Download the source code. git clone https://github.com/sofastack/sofa-registry.git cd sofa-registry mvn clean package -DskipTests cp server/distribution/integration/target/registry-integration.tgz \u0026lt;somewhere\u0026gt; cd \u0026lt;somewhere\u0026gt; \u0026amp;\u0026amp; mkdir registry-integration tar -zxvf registry-integration.tgz -C registry-integration cd registry-integration Download the installation package.","tags":null,"title":"Server deployment","type":"projects","url":"/en/projects/sofa-registry/server-quick-start/","wordcount":176},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/mosn/configuration/server/overview/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"3b43981b2aebeca5879d566d8264f6b6","permalink":"/projects/mosn/configuration/server/overview/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/mosn/configuration/server/overview/","summary":"","tags":null,"title":"Server 配置说明","type":"projects","url":"/projects/mosn/configuration/server/overview/","wordcount":0},{"author":null,"categories":null,"content":"SOFADashboard\u0026amp;rsquo;s service governance mainly manages SOFARPC services.\nConsole The service governance console mainly provides two basic functions: service name query and service information display. When you click the hyperlink of a service ID, you are redirected to the details page of the service.\nService provider details page Service consumer details page ","date":-62135596800,"description":"","dir":"projects/sofa-dashboard/governance/","fuzzywordcount":100,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"e547baf489fd5d125be9e67a366854b6","permalink":"/en/projects/sofa-dashboard/governance/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/en/projects/sofa-dashboard/governance/","summary":"SOFADashboard\u0026rsquo;s service governance mainly manages SOFARPC services.\nConsole The service governance console mainly provides two basic functions: service name query and service information display. When you click the hyperlink of a service ID, you are redirected to the details page of the service.\nService provider details page Service consumer details page ","tags":null,"title":"Service governance","type":"projects","url":"/en/projects/sofa-dashboard/governance/","wordcount":51},{"author":null,"categories":null,"content":"The basic configuration for SOFARPC service publishing and reference is described in the \u0026amp;ldquo;Programming Interface\u0026amp;rdquo; chapter. Here are some of the features of service publishing and referencing.\nOne service publishes multiple protocols In SOFARPC, a service can be published as multiple protocols, which allows the callers to call the service provider using different protocols.\nIf you use the Java API, you can build multiple ServerConfigs as follows to set different protocols for different ServerConfigs and then assign these ServerConfigs to ProviderConfig:\nList\u0026amp;lt;ServerConfig\u0026amp;gt; serverConfigs = new ArrayList\u0026amp;lt;ServerConfig\u0026amp;gt;(); serverConfigs.add(serverConfigA); serverConfigs.add(serverConfigB); providerConfig.setServer(serverConfigs); If you use XML, add multiple bindings directly in the \u0026amp;lt;sofa:service\u0026amp;gt; tag:\n\u0026amp;lt;sofa:service ref=\u0026amp;#34;sampleFacadeImpl\u0026amp;#34; interface=\u0026amp;#34;com.alipay.sofa.rpc.bean.SampleFacade\u0026amp;#34;\u0026amp;gt; \u0026amp;lt;sofa:binding.bolt/\u0026amp;gt; \u0026amp;lt;sofa:binding.rest/\u0026amp;gt; \u0026amp;lt;sofa:binding.dubbo/\u0026amp;gt; \u0026amp;lt;/sofa:service\u0026amp;gt; If you use annotation, add multiple bindings in @SofaService:\n@SofaService ( interfaceType = SampleService.class, bindings = { @SofaServiceBinding(bindingType = \u0026amp;#34;rest\u0026amp;#34;), @SofaServiceBinding(bindingType = \u0026amp;#34;bolt\u0026amp;#34;) } ) public class SampleServiceImpl implements SampleService { // ... } One service registers multiple registry centers If you use the API, build multiple RegistryConfigs and assign them to ProviderConfig:\nList\u0026amp;lt;RegistryConfig\u0026amp;gt; registryConfigs = new ArrayList\u0026amp;lt;RegistryConfig\u0026amp;gt;(); registryConfigs.add(registryA); registryConfigs.add(registryB); providerConfig.setRegistry(registryConfigs); Method-level parameter settings In the Java API mode, you can set the corresponding parameters by calling the set method of the MethodConfig object, as shown below:\nMethodConfig methodConfigA = new MethodConfig(); MethodConfig methodConfigB = new MethodConfig(); List\u0026amp;lt;MethodConfig\u0026amp;gt; methodConfigs = new ArrayList\u0026amp;lt;MethodConfig\u0026amp;gt;(); methodConfigs.add(methodConfigA); methodConfigs.add(methodConfigB); providerConfig.setMethods(methodConfigs); //server settings consumerConfig.setMethods(methodConfigs); //Client settings In the XML mode, you can use the \u0026amp;lt;sofa:method\u0026amp;gt; tag in the corresponding binding to set the corresponding parameters:\n\u0026amp;lt;sofa:reference id=\u0026amp;#34;personReferenceBolt\u0026amp;#34; interface=\u0026amp;#34;com.alipay.sofa.boot.examples.demo.rpc.bean.PersonService\u0026amp;#34;\u0026amp;gt; \u0026amp;lt;sofa:binding.bolt\u0026amp;gt; \u0026amp;lt;sofa:global-attrs timeout=\u0026amp;#34;3000\u0026amp;#34; address-wait-time=\u0026amp;#34;2000\u0026amp;#34;/\u0026amp;gt; \u0026amp;lt;!-- Call timeout; address wait time. --\u0026amp;gt; \u0026amp;lt;sofa:route target-url=\u0026amp;#34;127.0.0.1:22000\u0026amp;#34;/\u0026amp;gt; \u0026amp;lt;!-- Directly connected address --\u0026amp;gt; \u0026amp;lt;sofa:method name=\u0026amp;#34;sayName\u0026amp;#34; timeout=\u0026amp;#34;3000\u0026amp;#34;/\u0026amp;gt; \u0026amp;lt;!-- Method level configuration --\u0026amp;gt; \u0026amp;lt;/sofa:binding.bolt\u0026amp;gt; \u0026amp;lt;/sofa:reference\u0026amp;gt; \u0026amp;lt;sofa:service ref=\u0026amp;#34;sampleFacadeImpl\u0026amp;#34; interface=\u0026amp;#34;com.alipay.sofa.rpc.bean.SampleFacade\u0026amp;#34;\u0026amp;gt; …","date":-62135596800,"description":"","dir":"projects/sofa-rpc/publish-and-reference/","fuzzywordcount":400,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"6a78b8b84b226eaf1e6d2b1ff1d15fee","permalink":"/en/projects/sofa-rpc/publish-and-reference/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/en/projects/sofa-rpc/publish-and-reference/","summary":"The basic configuration for SOFARPC service publishing and reference is described in the \u0026ldquo;Programming Interface\u0026rdquo; chapter. Here are some of the features of service publishing and referencing.\nOne service publishes multiple protocols In SOFARPC, a service can be published as multiple protocols, which allows the callers to call the service provider using different protocols.\nIf you use the Java API, you can build multiple ServerConfigs as follows to set different protocols for different ServerConfigs and then assign these ServerConfigs to ProviderConfig:","tags":null,"title":"Service publishing and reference","type":"projects","url":"/en/projects/sofa-rpc/publish-and-reference/","wordcount":348},{"author":null,"categories":null,"content":"This document describes the complete SOFARPC service publishing and reference in the SOFABoot environment.\nPublish service \u0026amp;lt;bean id=\u0026amp;#34;helloSyncServiceImpl\u0026amp;#34; class=\u0026amp;#34;com.alipay.sofa.rpc.samples.invoke.HelloSyncServiceImpl\u0026amp;#34;/\u0026amp;gt; \u0026amp;lt;sofa:service ref=\u0026amp;#34;helloSyncServiceImpl\u0026amp;#34; interface=\u0026amp;#34;com.alipay.sofa.rpc.samples.invoke.HelloSyncService\u0026amp;#34; unique-id=\u0026amp;#34;\u0026amp;#34;\u0026amp;gt; \u0026amp;lt;sofa:binding.bolt\u0026amp;gt; \u0026amp;lt;sofa:global-attrs registry=\u0026amp;#34;\u0026amp;#34; serialize-type=\u0026amp;#34;\u0026amp;#34; filter=\u0026amp;#34;\u0026amp;#34; timeout=\u0026amp;#34;3000\u0026amp;#34; thread-pool-ref=\u0026amp;#34;\u0026amp;#34; warm-up-time=\u0026amp;#34;60000\u0026amp;#34; warm-up-weight=\u0026amp;#34;10\u0026amp;#34; weight=\u0026amp;#34;100\u0026amp;#34;/\u0026amp;gt; \u0026amp;lt;/sofa:binding.bolt\u0026amp;gt; \u0026amp;lt;sofa:binding.rest\u0026amp;gt; \u0026amp;lt;/sofa:binding.rest\u0026amp;gt; \u0026amp;lt;/sofa:service\u0026amp;gt;    Attribute Name Default value Comment     id ID bean名    class Class None    ref Service interface implementation class     interface Service interface (unique identifier)  Use actual interface class for both normal calls and return calls   unique-id Service tag (unique identifier)     filter Filter configuration alias  Separated by commas   registry Server registry center  Separated by commas   timeout Execution timeout period on the server     serialize-type Serialization protocol hessian2,protobuf    thread-pool-ref Thread pool used by the current interface of the server None    weight Service static weight     warm-up-weight Service warm-up weight     warm-up-time Service warm-up time  Unit: millisecond    Reference service \u0026amp;lt;sofa:reference jvm-first=\u0026amp;#34;false\u0026amp;#34; id=\u0026amp;#34;helloSyncServiceReference\u0026amp;#34; interface=\u0026amp;#34;com.alipay.sofa.rpc.samples.invoke.HelloSyncService\u0026amp;#34; unique-id=\u0026amp;#34;\u0026amp;#34;\u0026amp;gt; \u0026amp;lt;sofa:binding.bolt\u0026amp;gt; \u0026amp;lt;sofa:global-attrs type=\u0026amp;#34;sync\u0026amp;#34; timeout=\u0026amp;#34;3000\u0026amp;#34; callback-ref=\u0026amp;#34;\u0026amp;#34; callback-class=\u0026amp;#34;\u0026amp;#34; address-wait-time=\u0026amp;#34;1000\u0026amp;#34; connect.num=\u0026amp;#34;1\u0026amp;#34; check=\u0026amp;#34;false\u0026amp;#34; connect.timeout=\u0026amp;#34;1000\u0026amp;#34; filter=\u0026amp;#34;\u0026amp;#34; generic-interface=\u0026amp;#34;\u0026amp;#34; idle.timeout=\u0026amp;#34;1000\u0026amp;#34; idle.timeout.read=\u0026amp;#34;1000\u0026amp;#34; lazy=\u0026amp;#34;false\u0026amp;#34; loadBalancer=\u0026amp;#34;\u0026amp;#34; registry=\u0026amp;#34;\u0026amp;#34; retries=\u0026amp;#34;1\u0026amp;#34; serialize-type=\u0026amp;#34;\u0026amp;#34; /\u0026amp;gt; \u0026amp;lt;sofa:route target-url=\u0026amp;#34;xxx:12200\u0026amp;#34; /\u0026amp;gt; \u0026amp;lt;sofa:method name=\u0026amp;#34;hello\u0026amp;#34; callback-class=\u0026amp;#34;\u0026amp;#34; callback-ref=\u0026amp;#34;\u0026amp;#34; timeout=\u0026amp;#34;3000\u0026amp;#34; type=\u0026amp;#34;sync\u0026amp;#34;/\u0026amp;gt; \u0026amp;lt;/sofa:binding.bolt\u0026amp;gt; \u0026amp;lt;/sofa:reference\u0026amp;gt;    Attribute Name Default value Comment     id ID Generated automatically    jvm-first Whether to call the service of local machine first true    interface Service interface (unique identifier)  Use actual interface class for both normal calls and return calls   unique-id Service tag (unique identifier)     local-first whether refer to the service via jvm call true set it to false if this is to call a remote service via rpc   type Calling type sync callback,sync,future,oneway   filter Filter configuration alias  List   registry Server registry center  List   method Method-level configuration  Same as above …","date":-62135596800,"description":"","dir":"projects/sofa-rpc/rpc-config-xml-explain/","fuzzywordcount":400,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"4b5110e9eb6cf6c6f287aef0fd210047","permalink":"/en/projects/sofa-rpc/rpc-config-xml-explain/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/en/projects/sofa-rpc/rpc-config-xml-explain/","summary":"This document describes the complete SOFARPC service publishing and reference in the SOFABoot environment. Publish service \u0026lt;bean id=\u0026#34;helloSyncServiceImpl\u0026#34; class=\u0026#34;com.alipay.sofa.rpc.samples.invoke.HelloSyncServiceImpl\u0026#34;/\u0026gt; \u0026lt;sofa:service ref=\u0026#34;helloSyncServiceImpl\u0026#34; interface=\u0026#34;com.alipay.sofa.rpc.samples.invoke.HelloSyncService\u0026#34; unique-id=\u0026#34;\u0026#34;\u0026gt; \u0026lt;sofa:binding.bolt\u0026gt; \u0026lt;sofa:global-attrs registry=\u0026#34;\u0026#34; serialize-type=\u0026#34;\u0026#34; filter=\u0026#34;\u0026#34; timeout=\u0026#34;3000\u0026#34; thread-pool-ref=\u0026#34;\u0026#34; warm-up-time=\u0026#34;60000\u0026#34; warm-up-weight=\u0026#34;10\u0026#34; weight=\u0026#34;100\u0026#34;/\u0026gt; \u0026lt;/sofa:binding.bolt\u0026gt; \u0026lt;sofa:binding.rest\u0026gt; \u0026lt;/sofa:binding.rest\u0026gt; \u0026lt;/sofa:service\u0026gt; Attribute Name Default value Comment id ID bean名 class Class None ref Service interface implementation class interface Service interface (unique identifier) Use actual interface class for both normal calls","tags":null,"title":"Service publishing and reference in SOFABoot","type":"projects","url":"/en/projects/sofa-rpc/rpc-config-xml-explain/","wordcount":356},{"author":null,"categories":null,"content":"If you want to extend a registry center, you should take a look at the abstract classes of the registry center.\npackage com.alipay.sofa.rpc.registry; @Extensible(singleton = false) public abstract class Registry implements Initializable, Destroyable { public abstract boolean start(); public abstract void register(ProviderConfig config); public abstract void unRegister(ProviderConfig config); public abstract void batchUnRegister(List\u0026amp;lt;ProviderConfig\u0026amp;gt; configs); public abstract List\u0026amp;lt;ProviderGroup\u0026amp;gt; subscribe(ConsumerConfig config); public abstract void unSubscribe(ConsumerConfig config); public abstract void batchUnSubscribe(List\u0026amp;lt;ConsumerConfig\u0026amp;gt; configs); } You can see the main necessary interfaces.\n Start the registry client and maintain the connection; Destroy the registry client and release resources; Publish service and cache publish information; Unpublish service and delete cache; Subscribe to service list, return data synchronously or asynchronously, and receive notifications upon changes Unsubscribe service list and delete cache  Other interfaces:\n When the registry center node is disconnected, the local call is not affected. Switch from one disconnected registry center node to another one by itself. After switching to another registry center node, the system resumes the registration and subscription information automatically. The registry data is cached to the local file. Even if no registry center node is connected, the service provider and caller can restart and call normally.  ","date":-62135596800,"description":"","dir":"projects/sofa-rpc/registry-extension-guide/","fuzzywordcount":200,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"c952ecbea16f7ae68ad095ab8baf0583","permalink":"/en/projects/sofa-rpc/registry-extension-guide/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/en/projects/sofa-rpc/registry-extension-guide/","summary":"If you want to extend a registry center, you should take a look at the abstract classes of the registry center.\npackage com.alipay.sofa.rpc.registry; @Extensible(singleton = false) public abstract class Registry implements Initializable, Destroyable { public abstract boolean start(); public abstract void register(ProviderConfig config); public abstract void unRegister(ProviderConfig config); public abstract void batchUnRegister(List\u0026lt;ProviderConfig\u0026gt; configs); public abstract List\u0026lt;ProviderGroup\u0026gt; subscribe(ConsumerConfig config); public abstract void unSubscribe(ConsumerConfig config); public abstract void batchUnSubscribe(List\u0026lt;ConsumerConfig\u0026gt; configs); } You can see the main necessary interfaces.","tags":null,"title":"Service Registry extension guide","type":"projects","url":"/en/projects/sofa-rpc/registry-extension-guide/","wordcount":192},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/mosn/concept/sidecar-pattern/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"38b45799d69d52f24f26008cd2ad7da5","permalink":"/projects/mosn/concept/sidecar-pattern/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/mosn/concept/sidecar-pattern/","summary":"","tags":null,"title":"Sidecar 模式","type":"projects","url":"/projects/mosn/concept/sidecar-pattern/","wordcount":0},{"author":null,"categories":null,"content":"Since SOFARPC 5.4.0, the link analysis feature of Skywalking is supported. You can use it as needed. The Skywalking must be 6.0.0-alpha and above.\nThis document does not cover the backend deployment. If you need it, please refer to the official Skywalking documentation.\nInstall Java agent   Locate the agent directory in the downloaded Skywalking release package.\n  Set agent.service_name in config/agent.config, which can be any English character. Generally, it can be your own system name.\n  Set the collector.backend_service Skywalking backend address in config/agent.config, which defaults to 127.0.0.1:11800. It is used for local verification.\n  Add -javaagent:/path/to/skywalking-package/agenxt/skywalking-agent.jar to the application, which must be placed before the -jar parameter. The skywalking-agent can be gotten in official release package. The new directory structure is as follows:\n  +-- agent +-- activations apm-toolkit-log4j-1.x-activation.jar apm-toolkit-log4j-2.x-activation.jar apm-toolkit-logback-1.x-activation.jar ... +-- config agent.config +-- plugins sofa-rpc-plugin-6.0.0-alpha.jar apm-feign-default-http-9.x.jar apm-httpClient-4.x-plugin.jar ..... skywalking-agent.jar Note: Ensure that the plugins/sofa-rpc-plugin-**.jar file exists.\nStart the application. After a period of RPC calls, you can view the UI to observe the calling link.  More For more relevant documents, please refer to\nSkywalking Agent installation documentation Skywalking Backend deployment documentation\n","date":-62135596800,"description":"","dir":"projects/sofa-rpc/skywalking-usage/","fuzzywordcount":200,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"3cd5fb45f1b981d0a8c54c8ce43b190b","permalink":"/en/projects/sofa-rpc/skywalking-usage/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/en/projects/sofa-rpc/skywalking-usage/","summary":"Since SOFARPC 5.4.0, the link analysis feature of Skywalking is supported. You can use it as needed. The Skywalking must be 6.0.0-alpha and above.\nThis document does not cover the backend deployment. If you need it, please refer to the official Skywalking documentation.\nInstall Java agent   Locate the agent directory in the downloaded Skywalking release package.\n  Set agent.service_name in config/agent.config, which can be any English character. Generally, it can be your own system name.","tags":null,"title":"Skywalking","type":"projects","url":"/en/projects/sofa-rpc/skywalking-usage/","wordcount":181},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-rpc/skywalking-usage/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"3cd5fb45f1b981d0a8c54c8ce43b190b","permalink":"/projects/sofa-rpc/skywalking-usage/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-rpc/skywalking-usage/","summary":"","tags":null,"title":"Skywalking 链路分析","type":"projects","url":"/projects/sofa-rpc/skywalking-usage/","wordcount":0},{"author":null,"categories":null,"content":"AntCoreTest (ACTS) is a white-box test framework developed by Ant Financial based on years\u0026#39; testing knowledge and experience with the financial-level distributed architecture for the purpose of providing enterprises with a highly efficient, precise, and automated interface testing services. In addition to general testing capabilities such as data-driven testing provided by conventional open source frameworks like TestNG, ACTS offers new features such as model-driven testing, visualized editing, and a standard process engine to assist engineers with efficient and high quality test case compilation as well as standard and precise test validation for interface testing.\nACTS is a next generation testing framework based on the data model-driven testing engine. ACTS is applicable to context environments that require the integration of TestNg and Spring. ACTS uses the YAML file as the data carrier and builds data model drivers upon it, providing features such as the all-in-one editor, precise validation, and efficient test case management to significantly improve testing efficiency.\nOperating principle   Upon the start of the test script, ActsDataProvider starts the tested method (the method annotated by @Test), loads the corresponding test case data file (YAML file), and converts the data into corresponding PrepareData objects.\n  When runTest starts running, it passes PrepareData and test case names to ACTS. ACTS then assembles such information into the ActsRuntimeContext class, transmits it in the entire process, and initializes the TestUnitHandler. The running period of the runTest process method consists of the following stages:\n   Action Method     Clear clear(actsRuntimeContext)   Prepare prepare(actsRuntimeContext)   Execute execute(actsRuntimeContext)   Check check(actsRuntimeContext)      Description:\n Clear: Clean up the preparation data and validation data to avoid the negative impact of dirty data on the test script. Prepare: Prepare data such as DB data. Execute: Call the tested method, and capture the corresponding information, such as responses and exception messages. Check: Validate the corresponding information such as the responses, DB data, and exception messages based on the test data.  Features ACTS provides the following features:\n2.1 All-in-one editor The ACTS framework separates the test data from the test code, and provides the visual editor ACTS IDE. ACTS IDE can help you quickly enter, view, and manage the test case data, which significantly reduces repetitive coding.\n2.2 Precise validation To improve data fill-in efficiency and reduce omission of check points among the expectation data, such as response expectations and database expectations, the ACTS framework provides a run and backfill function. In addition, ACTS uses validation rule flags to implement precise validation of the expectation data.\n2.3 Flexible scalability ACTS provides a rich variety of APIs, which are encapsulated in the ActsRuntimeContext class. The APIs …","date":-62135596800,"description":"","dir":"projects/sofa-acts/overview/","fuzzywordcount":600,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"ac57071cd0d40a63359d476d05344c61","permalink":"/en/projects/sofa-acts/overview/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/en/projects/sofa-acts/overview/","summary":"AntCoreTest (ACTS) is a white-box test framework developed by Ant Financial based on years' testing knowledge and experience with the financial-level distributed architecture for the purpose of providing enterprises with a highly efficient, precise, and automated interface testing services. In addition to general testing capabilities such as data-driven testing provided by conventional open source frameworks like TestNG, ACTS offers new features such as model-driven testing, visualized editing, and a standard process engine to assist engineers with efficient and high quality test case compilation as well as standard and precise test validation for interface testing.","tags":null,"title":"SOFAActs overview","type":"projects","url":"/en/projects/sofa-acts/overview/","wordcount":536},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-acts/overview/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"ac57071cd0d40a63359d476d05344c61","permalink":"/projects/sofa-acts/overview/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-acts/overview/","summary":"","tags":null,"title":"SOFAActs 介绍","type":"projects","url":"/projects/sofa-acts/overview/","wordcount":0},{"author":null,"categories":null,"content":"SOFAArk offers a variety of methods to support multi-application (module) consolidation and deployment, including command line-based control and API-based control. SOFAArk control is an implementation of SOFADashboard\u0026amp;rsquo;s control over APIs. SOFAArk control is implemented by pushing commands to and parsing commands in ZooKeeper.\nSOFAArk control mainly provides the following functions:\n Plug-in registration: registers the ark-biz package with SOFADashboard as basic data processors. Application association: binds the ark-biz package with host applications. Plug-in details: On the plug-in details page, you can view the information about all host applications that are associated with the current ark-biz package, as well as the status information of the ark-biz package in these host applications. Command push: On the plug-in details page, you can push some commands for specific applications and IP addresses, such as install and uninstall. When these commands are written to a ZooKeeper node, all host applications that listen to this node will parse the commands and perform related operations.  Plug-in registration Register the ark-biz package with SOFADashboard:\nEnter basic information of the plug-in\nAfter successful registration, the plug-in is displayed on the module list as follows.\nApplication association Click Associate application in the Actions column of a plug-in on the module list to associate it with an application.\nClick Associate application in the Actions column of the plug-in to associate it with an application.\nPlug-in details Click Details in the Actions column of a plug-in to view all apps and app instances associated with the current plug-in.\n Version switch  After switching the plug-in to V2.0.0, the status information is empty, because the plug-in V2.0.0 has not been installed in the host application.\nCommand push SOFADashboard supports command push in two dimensions:\n Application-based command push, where all instances of the specified application listen to this command IP-based and group-based command push for single-IP address scenarios  IP-based command push Click Install. The page is refreshed after about 1s to 1.5s.\n Application-based command push is similar.\n ","date":-62135596800,"description":"","dir":"projects/sofa-dashboard/ark-console/","fuzzywordcount":400,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"b42cffbb8e55a4c47412e49de0e9b228","permalink":"/en/projects/sofa-dashboard/ark-console/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/en/projects/sofa-dashboard/ark-console/","summary":"SOFAArk offers a variety of methods to support multi-application (module) consolidation and deployment, including command line-based control and API-based control. SOFAArk control is an implementation of SOFADashboard\u0026rsquo;s control over APIs. SOFAArk control is implemented by pushing commands to and parsing commands in ZooKeeper.\nSOFAArk control mainly provides the following functions:\n Plug-in registration: registers the ark-biz package with SOFADashboard as basic data processors. Application association: binds the ark-biz package with host applications.","tags":null,"title":"SOFAArk control","type":"projects","url":"/en/projects/sofa-dashboard/ark-console/","wordcount":321},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-boot/sofa-ark-readme/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"cdb6729fc7a63954b7559c8ea319f550","permalink":"/projects/sofa-boot/sofa-ark-readme/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-boot/sofa-ark-readme/","summary":"","tags":null,"title":"SOFAArk 介绍","type":"projects","url":"/projects/sofa-boot/sofa-ark-readme/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-dashboard/ark-console/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"b42cffbb8e55a4c47412e49de0e9b228","permalink":"/projects/sofa-dashboard/ark-console/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-dashboard/ark-console/","summary":"","tags":null,"title":"SOFAArk 管控","type":"projects","url":"/projects/sofa-dashboard/ark-console/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-boot/sofa-ark-ark-config/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"70dd9c389e65ee3f89573cf93bd466ec","permalink":"/projects/sofa-boot/sofa-ark-ark-config/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-boot/sofa-ark-ark-config/","summary":"","tags":null,"title":"SOFAArk 配置","type":"projects","url":"/projects/sofa-boot/sofa-ark-ark-config/","wordcount":0},{"author":null,"categories":null,"content":"Introduction SOFABolt is a network communication framework implemented based on Netty and developed by Ant Finance.\n Netty was developed to let Java programmers focus more on the implementation of network communication-based business logic, and not worry excessively about network low-level NIO implementation or network problems that are difficult to debug. SOFABolt was developed to let middleware developers focus more on the implementation of products\u0026#39; functional performance, and not on making the communication framework\u0026amp;rsquo;s wheels over and over again.  Bolt takes its name from a Disney movie character. Bolt is a light, easy-to-use, high-performance, and flexibly scalable communication framework based on the Netty best practices. In the past few years, we have solved a lot of problems in terms of network communication for microservices and message oriented middleware. We have accumulated a lot of experience and have been constantly optimizing and improving our solutions. We hope that our solutions can be incorporated into the SOFABolt base component to serve more network communication scenarios. At present, SOFABolt has already been put to use in many Ant Middleware products, such as microservice products (SOFARPC), message queue, distributed transactions, distributed switches, and configuration centers.\nMultiple languages supported  node Python cpp  ","date":-62135596800,"description":"","dir":"projects/sofa-bolt/overview/","fuzzywordcount":200,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"5ee08df7c4bbd2c3be846e16f3bc81b1","permalink":"/en/projects/sofa-bolt/overview/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/en/projects/sofa-bolt/overview/","summary":"Introduction SOFABolt is a network communication framework implemented based on Netty and developed by Ant Finance.\n Netty was developed to let Java programmers focus more on the implementation of network communication-based business logic, and not worry excessively about network low-level NIO implementation or network problems that are difficult to debug. SOFABolt was developed to let middleware developers focus more on the implementation of products' functional performance, and not on making the communication framework\u0026rsquo;s wheels over and over again.","tags":null,"title":"SOFABolt overview","type":"projects","url":"/en/projects/sofa-bolt/overview/","wordcount":196},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-bolt/sofa-bolt-functions/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"fde29139cbd8b786326a6479e52814dd","permalink":"/projects/sofa-bolt/sofa-bolt-functions/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-bolt/sofa-bolt-functions/","summary":"","tags":null,"title":"SOFABolt 功能介绍","type":"projects","url":"/projects/sofa-bolt/sofa-bolt-functions/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-bolt/sofa-bolt-contribution/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"c044ad534cf99e4d6d400113b490f816","permalink":"/projects/sofa-bolt/sofa-bolt-contribution/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-bolt/sofa-bolt-contribution/","summary":"","tags":null,"title":"SOFABolt 参与贡献","type":"projects","url":"/projects/sofa-bolt/sofa-bolt-contribution/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-bolt/sofa-bolt-roadmap/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"3d4eac90b5c8e657d14eb885ab1f9a92","permalink":"/projects/sofa-bolt/sofa-bolt-roadmap/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-bolt/sofa-bolt-roadmap/","summary":"","tags":null,"title":"SOFABolt 发展路线","type":"projects","url":"/projects/sofa-bolt/sofa-bolt-roadmap/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-bolt/overview/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"5ee08df7c4bbd2c3be846e16f3bc81b1","permalink":"/projects/sofa-bolt/overview/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-bolt/overview/","summary":"","tags":null,"title":"SOFABolt 概述","type":"projects","url":"/projects/sofa-bolt/overview/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-bolt/sofa-bolt-handbook/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"2a0a2e3c7749dbcdceea064f6f850e33","permalink":"/projects/sofa-bolt/sofa-bolt-handbook/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-bolt/sofa-bolt-handbook/","summary":"","tags":null,"title":"SOFABolt 用户手册","type":"projects","url":"/projects/sofa-bolt/sofa-bolt-handbook/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-bolt/related-links/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"6844d2a639b69fa3128132b8631f33e3","permalink":"/projects/sofa-bolt/related-links/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-bolt/related-links/","summary":"","tags":null,"title":"SOFABolt 相关链接","type":"projects","url":"/projects/sofa-bolt/related-links/","wordcount":0},{"author":null,"categories":null,"content":"﻿# Upgrade SOFABoot from 2.3.x/2.4.x to 2.5.x SOFABoot 2.3.x/2.4.x is developed based on Spring Boot 1.4.2.RELEASE, SOFABoot 2.5.x is developed based on Spring Boot 1.5.x. When upgrading SOFABoot 2.3.x/2.4.x to SOFABoot 2.5.x, we should pay special attention to the differences between the Spring Boot 1.5.x upgrade and the Spring Boot 1.4.x upgrade.\nRenamed Spring Boot Starters  spring-boot-starter-ws \u0026amp;ndash;\u0026amp;gt; spring-boot-starter-web-services spring-boot-starter-redis \u0026amp;ndash;\u0026amp;gt; spring-boot-starter-data-redis  Endpoint Security Control Spring Boot 1.5.x has security control over all sensitive endpoints by default, that is, endpoints such as /beans and /dump, which were previously accessible by default in version 1.4.x, are not accessible in version 1.5.x. To access such endpoints, we need to configure Spring Boot as follows:\n management.security.enabled=false\n Only /health, /info, and /docs are accessible by default in version 1.5.x. Please refer to official description for details:\n endpoints Accessing sensitive endpoints  ApplicationEvent Change ApplicationStartedEvent in 1.4.x has been renamed ApplicationStartingEvent in Spring Boot 1.5.x. The version 1.5.x remains forward compatible. Note that the ApplicationStartedEvent event has a completely different meaning in version 2.x.\n** Users who have upgraded the SOFABoot to the version 2.5.x are strongly advised to change ApplicationStartedEvent to ApplicationStartingEvent to avoid compatibility issues when upgrading SOFABoot to the version 3.0.x in the future.**\nProperty renaming  server.max-http-post-size \u0026amp;ndash;\u0026amp;gt; server.tomcat.max-http-post-size spring.data.neo4j.session.scope is removed  Refer to the configuration of Spring Boot 1.5.x changelog\nSummary The above are the major points worthy of notice when we upgrade SOFABoot 2.3.x/2.4.x to SOFABoot 2.5.x. For detailed information, refer to the Release Report of Spring Boot 1.5.x.\n","date":-62135596800,"description":"","dir":"projects/sofa-boot/upgrade_2_5_x/","fuzzywordcount":300,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"4b7dd4287b00106684831d2a8524a6f7","permalink":"/en/projects/sofa-boot/upgrade_2_5_x/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/en/projects/sofa-boot/upgrade_2_5_x/","summary":"﻿# Upgrade SOFABoot from 2.3.x/2.4.x to 2.5.x SOFABoot 2.3.x/2.4.x is developed based on Spring Boot 1.4.2.RELEASE, SOFABoot 2.5.x is developed based on Spring Boot 1.5.x. When upgrading SOFABoot 2.3.x/2.4.x to SOFABoot 2.5.x, we should pay special attention to the differences between the Spring Boot 1.5.x upgrade and the Spring Boot 1.4.x upgrade.\nRenamed Spring Boot Starters  spring-boot-starter-ws \u0026ndash;\u0026gt; spring-boot-starter-web-services spring-boot-starter-redis \u0026ndash;\u0026gt; spring-boot-starter-data-redis  Endpoint Security Control Spring Boot 1.5.x has security control over all sensitive endpoints by default, that is, endpoints such as /beans and /dump, which were previously accessible by default in version 1.","tags":null,"title":"SOFABoot 2.5.x upgrade","type":"projects","url":"/en/projects/sofa-boot/upgrade_2_5_x/","wordcount":248},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-boot/upgrade_2_5_x/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"4b7dd4287b00106684831d2a8524a6f7","permalink":"/projects/sofa-boot/upgrade_2_5_x/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-boot/upgrade_2_5_x/","summary":"","tags":null,"title":"SOFABoot 2.5.x 升级注意事项","type":"projects","url":"/projects/sofa-boot/upgrade_2_5_x/","wordcount":0},{"author":null,"categories":null,"content":"﻿## Preface As a Spring Boot-based development framework open sourced by Ant Financial, SOFABoot provides capabilities such as Readiness Check, class isolation, and log space isolation. In addition to enhancing the Spring Boot, SOFABoot provides users with the capability to easily use SOFA middleware in Spring Boot.\nWe have received a lot of feedback from community users since SOFABoot was open sourced in April 2018. We are also very pleased to see many community users take an active part in building the SOFAStack open source, which greatly increases our determination to prosper SOFAStack community and ecosystem. Here, we announce the release of the SOFABoot 3.0, which is developed based on Spring Boot 2.0. SOFABoot 3.0 allows us to seamlessly integrate the extension capability of SOFABoot with official components of Spring Boot 2.x. In addition, SOFABoot 3.0 is compatible with Spring Cloud components, which allows us to easily integrate Spring Cloud components like Zuul and Config in the SOFABoot framework.\nBelow are the major changes of SOFABoot 3.0 compared with SOFABoot 2.x.\nUpgrade Spring Boot to version 2.x Upgrade Spring Boot in SOFABoot 3.0 to version 2.0. As the Spring Boot community recently announced that the maintenance for version 1.x will end in August 2019, we will focus on SOFABoot 3.x in the future and will release SOFABoot 3.1 with Spring Boot upgraded to version 2.1 soon.\nSpring Cloud compatible Some components are not compatible with SOFABoot in SOFABoot 2.x. In SOFABoot 3.x, we have run thorough compatibility tests on Spring Cloud components and fixed all problems found to ensure good compatibility between SOFABoot 3.x and Spring Cloud.\nWebFlux framework compatible Spring Boot 2.x introduces the WebFlux framework. SOFABoot 3.x is compatible with WebFlux in two major aspects;\n Health Check is compatible with the ReactiveHealthIndicator extension interface. The Readiness Check will include the implementation of the interface extension; Compatible with buried points of WebFlux web requests. Point burying logs and files are compatible with common MVC requests. For detailed information, refer to MVC point burying request.  JDK version support SOFABoot 3.x must run on JDK 8 or higher versions and does not support JDK 6 and JDK 7.\nHealth Check SOFABoot adds Readiness Check capability to Spring Boot\u0026amp;rsquo;s Health Check capability, to ensure that all components and operations are in a healthy state before the application goes into services. Compared with SOFABoot 2.x, SOFABoot 3.0 features great adjustments to the Health Check. It abandons some internal compatibility logic of Ant Financial and uses a friendlier coding scheme. Besides, the Health Check of SOFABoot 3.0 offers extensions in various scenarios, supports the \u0026amp;lsquo;ReactiveHealthIndicator\u0026amp;rsquo; extension interface introduced in Spring Boot 2.x, and provides more Health Check extension features.\nAdjust the Readiness Check Endpoint path The Endpoint for checking the Health …","date":-62135596800,"description":"","dir":"projects/sofa-boot/upgrade_3_x/","fuzzywordcount":1000,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"91ba09adf6bc42aaf70645b9a19b409b","permalink":"/en/projects/sofa-boot/upgrade_3_x/","publishdate":"0001-01-01T00:00:00Z","readingtime":5,"relpermalink":"/en/projects/sofa-boot/upgrade_3_x/","summary":"﻿## Preface As a Spring Boot-based development framework open sourced by Ant Financial, SOFABoot provides capabilities such as Readiness Check, class isolation, and log space isolation. In addition to enhancing the Spring Boot, SOFABoot provides users with the capability to easily use SOFA middleware in Spring Boot.\nWe have received a lot of feedback from community users since SOFABoot was open sourced in April 2018. We are also very pleased to see many community users take an active part in building the SOFAStack open source, which greatly increases our determination to prosper SOFAStack community and ecosystem.","tags":null,"title":"SOFABoot 3.0 upgrade","type":"projects","url":"/en/projects/sofa-boot/upgrade_3_x/","wordcount":902},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-boot/upgrade_3_x/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"91ba09adf6bc42aaf70645b9a19b409b","permalink":"/projects/sofa-boot/upgrade_3_x/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-boot/upgrade_3_x/","summary":"","tags":null,"title":"SOFABoot 3.0 升级注意事项","type":"projects","url":"/projects/sofa-boot/upgrade_3_x/","wordcount":0},{"author":null,"categories":null,"content":"Background kc-sofastack-demo has introduced how to quickly build an e-commerce microservice application and has implemented the service calling link tracking and application status monitoring.\nIn e-commerce system, the platforms often are not satisfied with the default product listing order, and always want to arrange some products in the conspicuous places. Also, there are some cases where the platforms would like to show different products to different users based on the collected user behaviors.\nBased on the background of kc-sofastack-demo, this guide will implement sorting the products dynamically based on the total amount of products of each onsite attendee.\nDemo content Implement the dynamic change of product sorting via the dynamic module capability provided by SOFABoot and the dynamic module control capability of SOFADashboard.\nImplement the change of application behavior without restarting the host and without changing the application configuration.\nThe project architecture is as follows:\nTasks 1. Preparation Clone the demo from GitHub to local\ngit clone https://github.com/sofastack-guides/kc-sofastack-dynamic-demo.git Then, import the project into IDEA or Eclipse.\n2. Package SOFABoot project as Ark JAR As shown in the following screenshot, add the Ark package plugin in the POM file and configure it:\nStep 1: Copy the Ark plugin and configuration to the specified positions in the above screenshot \u0026amp;lt;plugin\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;com.alipay.sofa\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;sofa-ark-maven-plugin\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;version\u0026amp;gt;0.6.0\u0026amp;lt;/version\u0026amp;gt; \u0026amp;lt;executions\u0026amp;gt; \u0026amp;lt;execution\u0026amp;gt; \u0026amp;lt;!--goal executed to generate executable-ark-jar --\u0026amp;gt; \u0026amp;lt;goals\u0026amp;gt; \u0026amp;lt;goal\u0026amp;gt;repackage\u0026amp;lt;/goal\u0026amp;gt; \u0026amp;lt;/goals\u0026amp;gt; \u0026amp;lt;!-- package configuration of ark-biz JAR --\u0026amp;gt; \u0026amp;lt;configuration\u0026amp;gt; \u0026amp;lt;!-- Whether to package, install and publish ark biz. The default value is false. For details, see Ark Biz documentation.--\u0026amp;gt; \u0026amp;lt;attach\u0026amp;gt;true\u0026amp;lt;/attach\u0026amp;gt; \u0026amp;lt;!-- The directory for ark package and ark biz package, defaulting to the build directory of project--\u0026amp;gt; \u0026amp;lt;outputDirectory\u0026amp;gt;target\u0026amp;lt;/outputDirectory\u0026amp;gt; \u0026amp;lt;!--default none--\u0026amp;gt; \u0026amp;lt;arkClassifier\u0026amp;gt;executable-ark\u0026amp;lt;/arkClassifier\u0026amp;gt; \u0026amp;lt;!-- The priority of starting ark-biz package. The smaller the value, the higher the priority.--\u0026amp;gt; \u0026amp;lt;priority\u0026amp;gt;200\u0026amp;lt;/priority\u0026amp;gt; \u0026amp;lt;!--Set the root directory of application, used to read ${base.dir}/conf/ark/bootstrap.application configuration file and defaulting to ${project.basedir}--\u0026amp;gt; \u0026amp;lt;baseDir\u0026amp;gt;../\u0026amp;lt;/baseDir\u0026amp;gt; \u0026amp;lt;/configuration\u0026amp;gt; \u0026amp;lt;/execution\u0026amp;gt; \u0026amp;lt;/executions\u0026amp;gt; \u0026amp;lt;/plugin\u0026amp;gt; Step 2: Run mvn clean package to package the project. The successfully packaged JAR file is as shown in the following screenshot:\n3. Build host application In the downloaded project, dynamic-stock-mng is the host application model. In this task, we will build dynamic-stock-mng as the host application of dynamic module.\nStep 1: Introduce Ark …","date":-62135596800,"description":"This guide introduce how to implement the merged deployment and dynmaic module push provided by SOFAArck based on the Ark control function of SOFADashboard.","dir":"guides/kc-sofastack-dynamic-demo/","fuzzywordcount":700,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"8bfd4a50e21ce9fc867b1cf18a8c9af3","permalink":"/en/guides/kc-sofastack-dynamic-demo/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/en/guides/kc-sofastack-dynamic-demo/","summary":"Background kc-sofastack-demo has introduced how to quickly build an e-commerce microservice application and has implemented the service calling link tracking and application status monitoring.\nIn e-commerce system, the platforms often are not satisfied with the default product listing order, and always want to arrange some products in the conspicuous places. Also, there are some cases where the platforms would like to show different products to different users based on the collected user behaviors.","tags":null,"title":"SOFABoot dynamic module practice","type":"guides","url":"/en/guides/kc-sofastack-dynamic-demo/","wordcount":630},{"author":null,"categories":null,"content":"SOFABoot supports modular isolation. But in actual usage scenarios, There is one case that beans in one module sometimes need to open some entries for another module to expand. SOFABoot draws on and uses the [Nuxeo Runtime] (https://github.com/nuxeo-archives/nuxeo-runtime) project and the nuxeo project and expands on it, provides the ability to extend points with Spring, We call it Extension Point.\nUsage Using extension point capabilities in SOFABoot requires the following three steps:\nDefine a bean that provides extension capabilities When using the SOFABoot extension point capability, you first need to define an interface that needs to be extended, like:\npackage com.alipay.sofa.boot.test; public interface IExtension { String say(); } Define the implementation of this interface:\npackage com.alipay.sofa.boot.test.impl; public class ExtensionImpl implements IExtension { private String word; @Override public String say() { return word; } public void setWord(String word) { this.word = word; } public void registerExtension(Extension extension) throws Exception { Object[] contributions = extension.getContributions(); String extensionPoint = extension.getExtensionPoint(); if (contributions == null) { return; } for (Object contribution : contributions) { if (\u0026amp;#34;word\u0026amp;#34;.equals(extensionPoint)) { setWord(((ExtensionDescriptor) contribution).getValue()); } } } } Here you can see that there is a method: registerExtension, you can temporarily ignore this method, and later will introduce its specific role.\nIn the module\u0026amp;rsquo;s Spring configuration file, we add configuration of this bean:\n\u0026amp;lt;bean id=\u0026amp;#34;extension\u0026amp;#34; class=\u0026amp;#34;com.alipay.sofa.boot.test.impl.ExtensionImpl\u0026amp;#34;\u0026amp;gt; \u0026amp;lt;property name=\u0026amp;#34;word\u0026amp;#34; value=\u0026amp;#34;Hello, world\u0026amp;#34;/\u0026amp;gt; \u0026amp;lt;/bean\u0026amp;gt; Defining extension points There is a field word in the above bean. In practice, we want this field to be overridden by other module customizations. Here we expose it as an extension point.\nFirst, you need a class to describe this extension point:\n@XObject(\u0026amp;#34;word\u0026amp;#34;) public class ExtensionDescriptor { @XNode(\u0026amp;#34;value\u0026amp;#34;) private String value; public String getValue() { return value; } } Then define the extension point in xml:\n\u0026amp;lt;sofa:extension-point name=\u0026amp;#34;word\u0026amp;#34; ref=\u0026amp;#34;extension\u0026amp;#34;\u0026amp;gt; \u0026amp;lt;sofa:object class=\u0026amp;#34;com.alipay.sofa.boot.test.extension.ExtensionDescriptor\u0026amp;#34;/\u0026amp;gt; \u0026amp;lt;/sofa:extension-point\u0026amp;gt; among them:\n name is the name of the extension point ref is the bean to which the extension point is applied object is a concrete description of the contribution point of the extension point. This description is done by XMap (XMap is used to map Java objects and XML files. It is recommended to search XMap documents on the Internet to understand XMap)  Defining extension implements The above has defined the extension point, and we can extend this bean at this point:\n\u0026amp;lt;sofa:extension bean=\u0026amp;#34;extension\u0026amp;#34; point=\u0026amp;#34;word\u0026amp;#34;\u0026amp;gt; \u0026amp;lt;sofa:content\u0026amp;gt; \u0026amp;lt;word\u0026amp;gt; …","date":-62135596800,"description":"","dir":"projects/sofa-boot/extension/","fuzzywordcount":1300,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"93225b6c1f2b68f2047a7cf49b76650b","permalink":"/en/projects/sofa-boot/extension/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/en/projects/sofa-boot/extension/","summary":"SOFABoot supports modular isolation. But in actual usage scenarios, There is one case that beans in one module sometimes need to open some entries for another module to expand. SOFABoot draws on and uses the [Nuxeo Runtime] (https://github.com/nuxeo-archives/nuxeo-runtime) project and the nuxeo project and expands on it, provides the ability to extend points with Spring, We call it Extension Point. Usage Using extension point capabilities in SOFABoot requires the following","tags":null,"title":"SOFABoot Extension Point","type":"projects","url":"/en/projects/sofa-boot/extension/","wordcount":1264},{"author":null,"categories":null,"content":"SOFABoot is a development framework open sourced by Ant Financial which is based on Spring Boot, provides capabilities such as Readiness Check, class isolation, and log space isolation. In addition to enhancing the Spring Boot, SOFABoot provides users with the capability to easily use SOFA middleware in Spring Boot.\nYou can view all the release notes in Release History. The correspondence between SOFABoot version and Spring Boot version is as follows:\n   SOFABoot version Spring Boot version     2.3.x 1.4.2.RELEASE   2.4.x 1.4.2.RELEASE   2.5.x 1.5.16.RELEASE   3.0.x 2.0.3.RELEASE   3.1.0 2.1.0.RELEASE    That is, the SOFABoot 2.3.x and 2.4.x series are based on Spring Boot 1.4.2.RELEASE; SOFABoot 2.5.x series are based on Spring Boot 1.5.x; SOFABoot 3.x series are based on Spring Boot 2.x. You can view and get the codes of all revisions in Release History. In addition, to facilitate users in the community to learn the latest development version of SOFABoot, we will release the SNAPSHOT version, which is a branch of the current development. To successfully pull the SNAPSHOT package from the central repository, it\u0026amp;rsquo;s necessary to add the following profile configuration to the local maven setting.xml file:\n\u0026amp;lt;profile\u0026amp;gt; \u0026amp;lt;id\u0026amp;gt;default\u0026amp;lt;/id\u0026amp;gt; \u0026amp;lt;activation\u0026amp;gt; \u0026amp;lt;activeByDefault\u0026amp;gt;true\u0026amp;lt;/activeByDefault\u0026amp;gt; \u0026amp;lt;/activation\u0026amp;gt; \u0026amp;lt;repositories\u0026amp;gt; \u0026amp;lt;repository\u0026amp;gt; \u0026amp;lt;snapshots\u0026amp;gt; \u0026amp;lt;enabled\u0026amp;gt;true\u0026amp;lt;/enabled\u0026amp;gt; \u0026amp;lt;/snapshots\u0026amp;gt; \u0026amp;lt;id\u0026amp;gt;maven-snapshot\u0026amp;lt;/id\u0026amp;gt; \u0026amp;lt;url\u0026amp;gt;https://oss.sonatype.org/content/repositories/snapshots\u0026amp;lt;/url\u0026amp;gt; \u0026amp;lt;/repository\u0026amp;gt; \u0026amp;lt;/repositories\u0026amp;gt; \u0026amp;lt;pluginRepositories\u0026amp;gt; \u0026amp;lt;pluginRepository\u0026amp;gt; \u0026amp;lt;snapshots\u0026amp;gt; \u0026amp;lt;enabled\u0026amp;gt;true\u0026amp;lt;/enabled\u0026amp;gt; \u0026amp;lt;/snapshots\u0026amp;gt; \u0026amp;lt;id\u0026amp;gt;maven-snapshot\u0026amp;lt;/id\u0026amp;gt; \u0026amp;lt;url\u0026amp;gt;https://oss.sonatype.org/content/repositories/snapshots\u0026amp;lt;/url\u0026amp;gt; \u0026amp;lt;/pluginRepository\u0026amp;gt; \u0026amp;lt;/pluginRepositories\u0026amp;gt; \u0026amp;lt;/profile\u0026amp;gt; Feature Description Based on Spring Boot, SOFABoot provides the following capabilities:\n Capability of expanding the Health Check of Spring Boot: Provide the Readiness Check based on the Health Check of Spring Boot, to ensure a secure launch of application examples. Capability of log space isolation: The middleware framework automatically finds the application\u0026amp;rsquo;s logs and realizes dependence on the logs and independent log printing, avoiding binding the middleware and the application logs. The capability is achieved through sofa-common-tools. Capability of providing class isolation: Provide class isolation based on the SOFAArk framework, making it easy for users to solve various class conflicts. Capability of providing modular development: Based on the Spring context isolation, provide modular development capability, with a separate Spring context for each SOFABoot module, to avoid BeanId conflicts between different SOFABoot modules. Integrated management of middleware: manage in a unified manner, provide a unified and easy-to-use …","date":-62135596800,"description":"","dir":"projects/sofa-boot/overview/","fuzzywordcount":500,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"fe6aed461c61b86dfed846a2dc0b7dcb","permalink":"/en/projects/sofa-boot/overview/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/en/projects/sofa-boot/overview/","summary":"SOFABoot is a development framework open sourced by Ant Financial which is based on Spring Boot, provides capabilities such as Readiness Check, class isolation, and log space isolation. In addition to enhancing the Spring Boot, SOFABoot provides users with the capability to easily use SOFA middleware in Spring Boot.\nYou can view all the release notes in Release History. The correspondence between SOFABoot version and Spring Boot version is as follows:","tags":null,"title":"SOFABoot overview","type":"projects","url":"/en/projects/sofa-boot/overview/","wordcount":461},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-boot/sofaboot-profile/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"b29d568fa057cad0b440790d5cc65d07","permalink":"/projects/sofa-boot/sofaboot-profile/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-boot/sofaboot-profile/","summary":"","tags":null,"title":"SOFABoot Profile","type":"projects","url":"/projects/sofa-boot/sofaboot-profile/","wordcount":0},{"author":null,"categories":null,"content":"﻿Since 3.1.X Spring framework has started to support the profile function: Bean Definition Profiles, SOFABoot support modular-level profiling, it will determine whether a module can be started when each module is getting started.\nActivating Module Using Module-Profile To enable the SOFABoot profiling, we need to add the com.alipay.sofa.boot.active-profiles field in the application.properties file. The value of this field is a comma-separated string denoting a list of profiles allowed to be activated. After specifying it, SOFABoot will specify a profile list represented by the field for each module that can be activated.\nThe sofa-module.properties file of the SOFABoot module supports the Module-Profile field, which points to a comma-separated string of values representing which profiles are allowed to be activated. Module-Profile supports the inversion operation, !dev indicates that com.alipay.sofa.boot.active-profiles is activated when it does not contain dev.\nIf the value of the com.alipay.sofa.boot.active-profiles field is not specified in the application, all modules are allowed to be started. If the Module-Profile is not specified in the SOFABoot module, the current SOFABoot module can be started with any profile.\nExample Activating the dev SOFABoot Module Add the following configurations to the application.properties file:\ncom.alipay.sofa.boot.active-profiles=dev With this configuration, the module with dev profile will be activated.\nAdd the following configuration to each sofa-module.properties file where modules with dev profile need to be activated.\nModule-Profile=dev Configuring Multiple Activation Profiles Add the following configurations to the application.properties file:\ncom.alipay.sofa.boot.active-profiles=dev,test With this configuration, the modules with dev or test profile will be activated.\nAdd the following configuration to the SOFABoot\u0026amp;rsquo;s sofa-module.properties file:\nModule-Profile=test,product With this configuration, the module will be activated when the com.alipay.sofa.boot.active-profiles contains test or product. Since the com.alipay.sofa.boot.active-profiles is specified as dev and test, this module will be activated.\nThe Inverted Module-Profile Add the following configurations to the application.properties file:\ncom.alipay.sofa.boot.active-profiles=dev With this configuration, the module with dev profile will be activated.\nAdd the following configuration to the SOFABoot\u0026amp;rsquo;s sofa-module.properties file:\nModule-Profile=!product This will activate the module when the com.alipay.sofa.boot.active-profiles does not contain product. Since it is specified as dev, this module will be activated.\nSet the spring.profiles.active property that is used to activate the Spring context of the module. Add the following configurations to the application.properties file:\ncom.alipay.sofa.boot.active-profiles=dev,test With this configuration, the modules with dev or test profile will be activated. If a module meets those conditions, …","date":-62135596800,"description":"","dir":"projects/sofa-boot/sofaboot-profile/","fuzzywordcount":500,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"b29d568fa057cad0b440790d5cc65d07","permalink":"/en/projects/sofa-boot/sofaboot-profile/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/en/projects/sofa-boot/sofaboot-profile/","summary":"﻿Since 3.1.X Spring framework has started to support the profile function: Bean Definition Profiles, SOFABoot support modular-level profiling, it will determine whether a module can be started when each module is getting started.\nActivating Module Using Module-Profile To enable the SOFABoot profiling, we need to add the com.alipay.sofa.boot.active-profiles field in the application.properties file. The value of this field is a comma-separated string denoting a list of profiles allowed to be activated.","tags":null,"title":"SOFABoot profile","type":"projects","url":"/en/projects/sofa-boot/sofaboot-profile/","wordcount":450},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-boot/overview/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"fe6aed461c61b86dfed846a2dc0b7dcb","permalink":"/projects/sofa-boot/overview/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-boot/overview/","summary":"","tags":null,"title":"SOFABoot 介绍","type":"projects","url":"/projects/sofa-boot/overview/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-boot/classloader-isolation/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"e007416ab008c1dd4b886433dbf8af01","permalink":"/projects/sofa-boot/classloader-isolation/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-boot/classloader-isolation/","summary":"","tags":null,"title":"SOFABoot 使用类隔离","type":"projects","url":"/projects/sofa-boot/classloader-isolation/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"本指南将基于 SOFADashboard 的 ARK 管控能力来实现 SOFAArk 提供的合并部署和动态模块推送的功能。","dir":"guides/kc-sofastack-dynamic-demo/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"8bfd4a50e21ce9fc867b1cf18a8c9af3","permalink":"/guides/kc-sofastack-dynamic-demo/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/guides/kc-sofastack-dynamic-demo/","summary":"","tags":null,"title":"SOFABoot 动态模块实践","type":"guides","url":"/guides/kc-sofastack-dynamic-demo/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-boot/extension/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"93225b6c1f2b68f2047a7cf49b76650b","permalink":"/projects/sofa-boot/extension/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-boot/extension/","summary":"","tags":null,"title":"SOFABoot 拓展点","type":"projects","url":"/projects/sofa-boot/extension/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-rpc/getting-started-with-sofa-boot/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"0dd5e0e5116473aee630cba38679d493","permalink":"/projects/sofa-rpc/getting-started-with-sofa-boot/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-rpc/getting-started-with-sofa-boot/","summary":"","tags":null,"title":"SOFABoot 方式快速入门","type":"projects","url":"/projects/sofa-rpc/getting-started-with-sofa-boot/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-rpc/programing-sofa-boot-xml/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"9192a93415bee3070a9be62c0f693949","permalink":"/projects/sofa-rpc/programing-sofa-boot-xml/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-rpc/programing-sofa-boot-xml/","summary":"","tags":null,"title":"SOFABoot 环境 XML 配置使用","type":"projects","url":"/projects/sofa-rpc/programing-sofa-boot-xml/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-rpc/programing-sofa-boot-api/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"2679388dc3459714f869d8f8a71739d7","permalink":"/projects/sofa-rpc/programing-sofa-boot-api/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-rpc/programing-sofa-boot-api/","summary":"","tags":null,"title":"SOFABoot 环境动态 API 使用","type":"projects","url":"/projects/sofa-rpc/programing-sofa-boot-api/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-rpc/rpc-config-xml-explain/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"4b5110e9eb6cf6c6f287aef0fd210047","permalink":"/projects/sofa-rpc/rpc-config-xml-explain/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-rpc/rpc-config-xml-explain/","summary":"","tags":null,"title":"SOFABoot 环境发布订阅说明","type":"projects","url":"/projects/sofa-rpc/rpc-config-xml-explain/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-rpc/programing-sofa-boot-annotation/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"2c3afd33cbce4f5aa2473716b3afe5a6","permalink":"/projects/sofa-rpc/programing-sofa-boot-annotation/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-rpc/programing-sofa-boot-annotation/","summary":"","tags":null,"title":"SOFABoot 环境注解使用","type":"projects","url":"/projects/sofa-rpc/programing-sofa-boot-annotation/","wordcount":0},{"author":null,"categories":null,"content":"SOFADashboard is designed to implement unified management over SOFA framework components, including service governance and SOFAArk control. All technology stacks used by SOFADashboard are developed and constructed based on open-source community products, such as Ant Design Pro, SOFABoot, Spring, and MyBatis.\nCurrently, service governance and SOFAArk control of SOFADashboard are dependent on ZooKeeper. Therefore, you need to ensure the ZooKeeper service is available when you decide to use SOFADashboard. You also need to ensure that MySQL is available, because SOFAArk control and deployment uses MySQL for resource data storage.\nArchitecture Currently, service governance and SOFAArk control of SOFADashboard are implemented upon ZooKeeper-based programming.\n SOFADashboard backend corresponds to the sofa-dashboard-backend project. It is the server end project of SOFADashboard, responsible for data interaction between ZooKeeper and MySQL and for providing the rest API to the SOFADashboard frontend. SOFADashboard frontend corresponds to the sofa-dashboard-frontend project. It is the frontend project of SOFADashboard. It provides UIs for interaction with users. Application  rpc provider: service provider of SOFARPC, which registers services with ZooKeeper. rpc consumer: service consumer of SOFARPC, which subscribes to services on ZooKeeper. client: SOFADashboard client, which is available upon the installation of the sofa-dashboard-client package. Currently, the SOFADashboard client only supports registration of health-check status and port information of applications with ZooKeeper. Later on, it will evolve into SOFABoot client, and report more diversified application data. ark-biz host app: see SOFAArk .    ","date":-62135596800,"description":"","dir":"projects/sofa-dashboard/overview/","fuzzywordcount":300,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"f0664d0ca7fc1fa87e67847525081993","permalink":"/en/projects/sofa-dashboard/overview/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/en/projects/sofa-dashboard/overview/","summary":"SOFADashboard is designed to implement unified management over SOFA framework components, including service governance and SOFAArk control. All technology stacks used by SOFADashboard are developed and constructed based on open-source community products, such as Ant Design Pro, SOFABoot, Spring, and MyBatis.\nCurrently, service governance and SOFAArk control of SOFADashboard are dependent on ZooKeeper. Therefore, you need to ensure the ZooKeeper service is available when you decide to use SOFADashboard. You also need to ensure that MySQL is available, because SOFAArk control and deployment uses MySQL for resource data storage.","tags":null,"title":"SOFADashboard overview","type":"projects","url":"/en/projects/sofa-dashboard/overview/","wordcount":231},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-dashboard/overview/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"f0664d0ca7fc1fa87e67847525081993","permalink":"/projects/sofa-dashboard/overview/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-dashboard/overview/","summary":"","tags":null,"title":"SOFADashboard 介绍","type":"projects","url":"/projects/sofa-dashboard/overview/","wordcount":0},{"author":null,"categories":null,"content":"This topic is a part of the Braft document. To read the Braft document, click here. The Raft algorithm and its application are comprehensively described in the Braft document. As JRaft is designed on the basis of Braft, we strongly recommend that you read the Braft document first to understand the basic principles and application of the Raft algorithm.\nDistributed consensus Distributed consensus is a very fundamental problem in a distributed system. Simply put, it is about how to reach a consensus on a specific value among multiple servers, and ensure that the decision is not overthrown regardless of what failures may occur on these servers. Assume that, all processes of a distributed system needs to determine a value V. If the system has the following properties, we consider it solves the problem of distributed consensus:\n Termination: All normal processes will determine the specific value of V, and there is no process that keeps running in a loop. Validity: A value V\u0026#39; determined by normal processes must have been proposed by one of them. For example, a random number generator does not have this property. Agreement: All normal processes choose the same value.  Consensus state machine Assume we have an infinitely incrementing sequence (system) a[1, 2, 3…]. If for any integer i, the value of a[i] meets the distributed consensus requirement, the system meets the requirement of a consensus state machine. Basically, all systems are subject to continuous operations, and reaching consensus on a single value is definitely not enough. To make sure all replicas of a real-life system are consistent, we usually convert the operations into entries of a write-ahead-log(WAL). Then, we make sure all replicas of the system reach a consensus on the WAL entries, so that each process will perform operations corresponding to the WAL entries in order. As a result, the replicas are in consistent states.\nRAFT RAFT is a new and easy-to-understand distributed consensus replication protocol proposed by Diego Ongaro and John Ousterhout of Stanford University as a central coordination component of the RAMCloudproject. Raft is a leader-based multi-Paxos variant that provides a more complete and straightforward protocol description than existing protocols such as Paxos, Zab, and Viewstamped Replication. It also provides a clear description for adding and deleting nodes. In Raft, replicated state machines are the most important and fundamental to distributed systems. Raft allows commands to be replicated and executed in order, and ensures that the states of nodes remain consistent when their initial states are the same. A system is fully functional (available) as long as a majority of nodes function properly. It allows non-Byzantine conditions, including network delays, packet loss, and reordering, but does not allow tampering with any messages.\nRaft can solve the distributed consensus and partitioning problems, but cannot solve the availability problem. Raft covers some …","date":-62135596800,"description":"","dir":"projects/sofa-jraft/overview/","fuzzywordcount":700,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"eff7088d010aefabdffa2858e88d76c0","permalink":"/en/projects/sofa-jraft/overview/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/en/projects/sofa-jraft/overview/","summary":"This topic is a part of the Braft document. To read the Braft document, click here. The Raft algorithm and its application are comprehensively described in the Braft document. As JRaft is designed on the basis of Braft, we strongly recommend that you read the Braft document first to understand the basic principles and application of the Raft algorithm.\nDistributed consensus Distributed consensus is a very fundamental problem in a distributed system.","tags":null,"title":"SOFAJRaft overview","type":"projects","url":"/en/projects/sofa-jraft/overview/","wordcount":645},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-jraft/overview/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"eff7088d010aefabdffa2858e88d76c0","permalink":"/projects/sofa-jraft/overview/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-jraft/overview/","summary":"","tags":null,"title":"SOFAJRaft 介绍","type":"projects","url":"/projects/sofa-jraft/overview/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-lookout/overview/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"8a8a8ef02ca95d4d11e3e4b195bbae70","permalink":"/projects/sofa-lookout/overview/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-lookout/overview/","summary":"","tags":null,"title":"SOFALookout 介绍","type":"projects","url":"/projects/sofa-lookout/overview/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-lookout/quick-start-metrics-server/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"7c12565c66342c2f8e963cf1c1e26db5","permalink":"/projects/sofa-lookout/quick-start-metrics-server/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-lookout/quick-start-metrics-server/","summary":"","tags":null,"title":"SOFALookout 服务端快速开始","type":"projects","url":"/projects/sofa-lookout/quick-start-metrics-server/","wordcount":0},{"author":null,"categories":null,"content":"This repository is deprecated. It will contribute to istio directly instead of developing in a forked repo. Please go to see Istio’s doc.\n SOFAMesh is a large-scale implementation scheme of Service Mesh based on Istio. On the basis of inheriting the powerful functions and rich features of Istio, in order to meet the performance requirements in large-scale deployments and to respond to the actual situation in the implementation, the following improvements are made:\n MOSN written in Golang instead of Envoy Merge Mixer to data plane to resolve performance bottlenecks Enhance Pilot for more flexible service discovery mechanism Added support for SOFA RPC, Dubbo  The initial version was contributed by Ant Financial and Alibaba UC Business Unit.\nThe following figure shows the architectural differences between SOFAMesh and Istio:\nMain components MOSN In SOFAMesh, the data pane adopts Golang to write a module called MOSN (Modular Open Smart Network), and replaces Envoy with MOSN to integrate with Istio to implement the functions of Sidecar. MOSN is fully compatible with Envoy\u0026amp;rsquo;s APIs.\nSOFAMesh Pilot SOFAMesh greatly expands and enhances the Pilot module in Istio:\n Add an Adapter for SOFA Registry to provide solutions for super large-scale service registration and discovery; Add data synchronization modules to enable data exchange between multiple service registry centers; Add Open Service Registry API to provide standardized service registration.  Together with Pilot and MOSN, SOFAMesh provides the ability to enable traditional intrusive frameworks (such as Spring Cloud, Dubbo and SOFARPC) and Service Mesh products to communicate with each other, thus it can smoothly evolve and transit to Service Mesh.\n","date":-62135596800,"description":"","dir":"projects/sofa-mesh/overview/","fuzzywordcount":300,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"e44a7cb73f7b68217663bd75655f43d7","permalink":"/en/projects/sofa-mesh/overview/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/en/projects/sofa-mesh/overview/","summary":"This repository is deprecated. It will contribute to istio directly instead of developing in a forked repo. Please go to see Istio’s doc.\n SOFAMesh is a large-scale implementation scheme of Service Mesh based on Istio. On the basis of inheriting the powerful functions and rich features of Istio, in order to meet the performance requirements in large-scale deployments and to respond to the actual situation in the implementation, the following improvements are made:","tags":null,"title":"SOFAMesh overview","type":"projects","url":"/en/projects/sofa-mesh/overview/","wordcount":260},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-mesh/overview/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"e44a7cb73f7b68217663bd75655f43d7","permalink":"/projects/sofa-mesh/overview/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-mesh/overview/","summary":"","tags":null,"title":"SOFAMesh 介绍","type":"projects","url":"/projects/sofa-mesh/overview/","wordcount":0},{"author":null,"categories":null,"content":"SOFARPC already supports using SOFARegistry as a service registry. Suppose you have deployed SOFARegistry Server locally according to SOFARegistry\u0026amp;rsquo;s [Quick Start] (https://www.sofastack.tech/sofa-registry/docs/Server-QuickStart), and the service discovery port is set to 9603 by default.\nTo use SOFARegistry as a service registry in SOFARPC, you only need to add the following configuration to application.properties:\ncom.alipay.sofa.rpc.registry.address=sofa://127.0.0.1:9603 The current version of SOFARegistry is supported:\nSOFARPC: 5.5.2, SOFABoot: 2.6.3。\nBecause of the time of SOFABoot, users need to specify the version of rpc starter.\n\u0026amp;lt;dependency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;com.alipay.sofa\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;rpc-sofa-boot-starter\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;version\u0026amp;gt;5.5.2\u0026amp;lt;/version\u0026amp;gt; \u0026amp;lt;/dependency\u0026amp;gt; SOFARPC integration verification SOFARegistry server version: 5.2.0。\n","date":-62135596800,"description":"","dir":"projects/sofa-rpc/registry-sofa/","fuzzywordcount":100,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"65085018ce2b2b2ef452993bb79a69de","permalink":"/en/projects/sofa-rpc/registry-sofa/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/en/projects/sofa-rpc/registry-sofa/","summary":"SOFARPC already supports using SOFARegistry as a service registry. Suppose you have deployed SOFARegistry Server locally according to SOFARegistry\u0026rsquo;s [Quick Start] (https://www.sofastack.tech/sofa-registry/docs/Server-QuickStart), and the service discovery port is set to 9603 by default.\nTo use SOFARegistry as a service registry in SOFARPC, you only need to add the following configuration to application.properties:\ncom.alipay.sofa.rpc.registry.address=sofa://127.0.0.1:9603 The current version of SOFARegistry is supported:\nSOFARPC: 5.5.2, SOFABoot: 2.6.3。\nBecause of the time of SOFABoot, users need to specify the version of rpc starter.","tags":null,"title":"SOFARegistry","type":"projects","url":"/en/projects/sofa-rpc/registry-sofa/","wordcount":91},{"author":null,"categories":null,"content":"Product introduction SOFARegistry is a production-level, low-latency, and highly available service registry powered by Ant Financial. SOFARegistry was developed on the basis ConfigServer of Taobao. After more than ten years of business development of Ant Financial, SOFARegistry has evolved into the fifth generation architecture. Currently, SOFARegistry not only provides full support to Ant Financial and its numerous partners, but also embraces the open source community. Built on an AP architecture, SOFARegistry support s message push in seconds. It also adopts a layered architecture to support infinite horizontal scaling.\nFeatures High scalability SOFARegistry adopts a layered architecture and partition-based data storage to break the single machine performance and capacity bottleneck, and to support the theoretical \u0026amp;ldquo;infinite horizontal scaling\u0026amp;rdquo;. It has been providing reliable services to the Ant Financial production environment which has a massive number of nodes and services.\nLow latency By virtue of the SOFABolt communication framework, SOFARegistry implements TCP long connection-based heartbeat detection among nodes, and the customized push mode to send service messages between upstream and downstream nodes in seconds.\nHighly available Unlike CP-architecture based registry products such as ZooKeeper, Consul, and Etcd, SOFARegistry adopts the AP architecture based on the service characteristics of service discovery, which significantly improves the availability of the registry in the case of failures caused by network partitioning. SOFARegistry takes many measures, such as multi-replica clusters, to prevent service unavailability arising from node failures.\nArchitecture SOFARegistry has four roles: Client, SessionServer, DataServer, and MetaServer, each with unique capabilities and responsibilities. They are combined to provide external services. The relationships and structures of them are explained as follows.\nClient A client provides basic APIs to allow applications to access SOFARegistry. The client provides JAR packages to application systems, so that they can call the service subscription and publishing features of SOFARegistry.\nSessionServer The SessionServer grants clients access to SessionServer, and accepts service publishing and subscription requests from clients. It also serves as an intermediate layer to forward the published data to DataServer for storage. The SessionServer can be infinitely scaled up to support connection with large amounts of clients.\nDataServer The DataServer is responsible for storing data published by clients. The data is stored by dataId through consistent hashing. DataServer supports multi-replica backup to ensure high availability of the data. The Data can also be infinitely scaled up to support large amounts of data.\nMetaServer The MetaServer is responsible for maintaining the consistency lists of the SessionServer and DataServer within the cluster, and immediately notify other nodes in the …","date":-62135596800,"description":"","dir":"projects/sofa-registry/overview/","fuzzywordcount":500,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"d444761f1ad8b0c52e3505926176b13f","permalink":"/en/projects/sofa-registry/overview/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/en/projects/sofa-registry/overview/","summary":"Product introduction SOFARegistry is a production-level, low-latency, and highly available service registry powered by Ant Financial. SOFARegistry was developed on the basis ConfigServer of Taobao. After more than ten years of business development of Ant Financial, SOFARegistry has evolved into the fifth generation architecture. Currently, SOFARegistry not only provides full support to Ant Financial and its numerous partners, but also embraces the open source community. Built on an AP architecture, SOFARegistry support s message push in seconds.","tags":null,"title":"SOFARegistry overview","type":"projects","url":"/en/projects/sofa-registry/overview/","wordcount":429},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-registry/overview/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"d444761f1ad8b0c52e3505926176b13f","permalink":"/projects/sofa-registry/overview/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-registry/overview/","summary":"","tags":null,"title":"SOFARegistry 介绍","type":"projects","url":"/projects/sofa-registry/overview/","wordcount":0},{"author":null,"categories":null,"content":"SOFARPC is divided into two layers from bottom to top:\n Core layer: It contains the core components of RPC (such as various interfaces, APIs and common packages) and some common implementations (such as random load balancing algorithms). Function implementation layer: All users of the function implementation layer are equal, and all functions are implemented based on the extension mechanism.  The internal version specific for Ant Financial just has some internal extension based on the open source version.\nOf course, you can add your own third-party extension. See Extension mechanism for more information.\nModule division The implementation classes of each module only appear in the modules. Generally, the modules don\u0026amp;rsquo;t depend on each other. The modules that require cross dependency have been abstracted into the core or common modules.\nCurrently, SOFARPC is divided into the following modules:\nThe main modules and their corresponding dependencies are as follows:\n   Module Submodule Definition Description Dependency     all  Publish and packing module  All modules that need to be packaged   bom  Dependency control module Control dependency version None   example  Sample module  all   test  Test module Include integration test all   core api API module Include various basic process interfaces, messages, contexts, extension interfaces and others Common   core common Public module Include utils and data structure exception   core exception Exception module Include various exception interfaces and others common   bootstrap  Startup implementation module Include start class, service publish or reference logic, and registry operations core   proxy  Proxy implementation module Generate interface implementation proxy core   Client  Client implementation module Send request, receive response, maintain connections, routing, and implement load balancing, synchronization, asynchronization and other operations    server  Server implementation module Start listening, receive requests, send responses, distribute business threads, and implement other operations    filter  Interceptor implementation module Implement various interceptors for server and client core   codec  Coding and encoding implementation module Implement compression, serialization and other operations core   protocol  Protocol implementation module Package and process protocol and conduct negotiation core   transport  Network transmission implementation module Establish TCP connection, process sticky data packets, and distribute requested response objects    registry  Registry center implementation module Implement registration centers, such as ZooKeeper core    ","date":-62135596800,"description":"","dir":"projects/sofa-rpc/structure-intro/","fuzzywordcount":400,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"1902232a50d57df7ab5b2c7eea1f8caa","permalink":"/en/projects/sofa-rpc/structure-intro/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/en/projects/sofa-rpc/structure-intro/","summary":"SOFARPC is divided into two layers from bottom to top:\n Core layer: It contains the core components of RPC (such as various interfaces, APIs and common packages) and some common implementations (such as random load balancing algorithms). Function implementation layer: All users of the function implementation layer are equal, and all functions are implemented based on the extension mechanism.  The internal version specific for Ant Financial just has some internal extension based on the open source version.","tags":null,"title":"SOFARPC architecture","type":"projects","url":"/en/projects/sofa-rpc/structure-intro/","wordcount":347},{"author":null,"categories":null,"content":"SOFARPC Log Format After SOFARPC (v5.4.0 and above) is integrated in SOFATracer, the link data is output in JSON format by default. Each field meaning is as follows:\nRPC client digest log (rpc-client-digest.log)  Log printing time TraceId SpanId Span type Current appName Protocol type (bolt, rest) Service interface information Method name Current thread name Calling type (sync, callback, oneway, future) Routing record (DIRECT, REGISTRY) Target IP Target appName Local machine IP Return code (00=success; 01=business exception; 02=RPC logic error; 03=timeout failure;04=routing failure) Request serialization time (in ms) Response deserialization time (in ms) Response size (in Byte) Request size (in Byte) Client connection duration (in ms) Total call duration (in ms) Local client port Transparently transmitted baggage data (kv format)  Example:\n{\u0026amp;#34;timestamp\u0026amp;#34;:\u0026amp;#34;2018-05-20 17:03:20.708\u0026amp;#34;,\u0026amp;#34;tracerId\u0026amp;#34;:\u0026amp;#34;1e27326d1526807000498100185597\u0026amp;#34;,\u0026amp;#34;spanId\u0026amp;#34;:\u0026amp;#34;0\u0026amp;#34;,\u0026amp;#34;span.kind\u0026amp;#34;:\u0026amp;#34;client\u0026amp;#34;,\u0026amp;#34;local.app\u0026amp;#34;:\u0026amp;#34;SOFATracerRPC\u0026amp;#34;,\u0026amp;#34;protocol\u0026amp;#34;:\u0026amp;#34;bolt\u0026amp;#34;,\u0026amp;#34;service\u0026amp;#34;:\u0026amp;#34;com.alipay.sofa.tracer.examples.sofarpc.direct.DirectService:1.0\u0026amp;#34;,\u0026amp;#34;method\u0026amp;#34;:\u0026amp;#34;sayDirect\u0026amp;#34;,\u0026amp;#34;current.thread.name\u0026amp;#34;:\u0026amp;#34;main\u0026amp;#34;,\u0026amp;#34;invoke.type\u0026amp;#34;:\u0026amp;#34;sync\u0026amp;#34;,\u0026amp;#34;router.record\u0026amp;#34;:\u0026amp;#34;DIRECT\u0026amp;#34;,\u0026amp;#34;remote.app\u0026amp;#34;:\u0026amp;#34;samples\u0026amp;#34;,\u0026amp;#34;remote.ip\u0026amp;#34;:\u0026amp;#34;127.0.0.1:12200\u0026amp;#34;,\u0026amp;#34;local.client.ip\u0026amp;#34;:\u0026amp;#34;127.0.0.1\u0026amp;#34;,\u0026amp;#34;result.code\u0026amp;#34;:\u0026amp;#34;00\u0026amp;#34;,\u0026amp;#34;req.serialize.time\u0026amp;#34;:\u0026amp;#34;33\u0026amp;#34;,\u0026amp;#34;resp.deserialize.time\u0026amp;#34;:\u0026amp;#34;39\u0026amp;#34;,\u0026amp;#34;resp.size\u0026amp;#34;:\u0026amp;#34;170\u0026amp;#34;,\u0026amp;#34;req.size\u0026amp;#34;:\u0026amp;#34;582\u0026amp;#34;,\u0026amp;#34;client.conn.time\u0026amp;#34;:\u0026amp;#34;0\u0026amp;#34;,\u0026amp;#34;client.elapse.time\u0026amp;#34;:\u0026amp;#34;155\u0026amp;#34;,\u0026amp;#34;local.client.port\u0026amp;#34;:\u0026amp;#34;59774\u0026amp;#34;,\u0026amp;#34;baggage\u0026amp;#34;:\u0026amp;#34;\u0026amp;#34;} RPC server digest log (rpc-server-digest.log)  Log printing time TraceId SpanId Span type Service interface information Method name Source IP Source appName Protocol (bolt, rest) Current appName Current thread name Return code (00=success; 01=business exception; 02=RPC logic error) Server thread pool waiting time (in ms) Business processing duration (in ms) Response serialization time (in ms) Request deserialization time (in ms) Response size (in Byte) Request size (in Byte) Transparently transmitted baggage data (kv format)  Example:\n{\u0026amp;#34;timestamp\u0026amp;#34;:\u0026amp;#34;2018-05-20 …","date":-62135596800,"description":"","dir":"projects/sofa-tracer/log-format-sofarpc/","fuzzywordcount":300,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"ad45177e2719b9a22f4bfb07a0481905","permalink":"/en/projects/sofa-tracer/log-format-sofarpc/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/en/projects/sofa-tracer/log-format-sofarpc/","summary":"SOFARPC Log Format After SOFARPC (v5.4.0 and above) is integrated in SOFATracer, the link data is output in JSON format by default. Each field meaning is as follows:\nRPC client digest log (rpc-client-digest.log)  Log printing time TraceId SpanId Span type Current appName Protocol type (bolt, rest) Service interface information Method name Current thread name Calling type (sync, callback, oneway, future) Routing record (DIRECT, REGISTRY) Target IP Target appName Local machine IP Return code (00=success; 01=business exception; 02=RPC logic error; 03=timeout failure;04=routing failure) Request serialization time (in ms) Response deserialization time (in ms) Response size (in Byte) Request size (in Byte) Client connection duration (in ms) Total call duration (in ms) Local client port Transparently transmitted baggage data (kv format)  Example:","tags":null,"title":"SOFARPC log","type":"projects","url":"/en/projects/sofa-tracer/log-format-sofarpc/","wordcount":259},{"author":null,"categories":null,"content":"SOFARPC Metrics SOFARPC currently measures two metrics.\nServer thread pool    metric name metric tags specification     rpc.bolt.threadpool.config bolt thread pool configuration Mainly includes thread pool configuration information for RPC server   rpc.bolt.threadpool.active.count  Running thread of the current thread pool   rpc.bolt.threadpool.idle.count  Idle thread of the current thread pool   rpc.bolt.threadpool.queue.size  Tasks in the queue of the current thread pool    Client call information    metric name metric tags specification     rpc.consumer.service.stats.fail_count.count app,service,method,protocol,invoke_type,target_app Failure count of a certain interface   rpc.consumer.service.stats.fail_count.rate app,service,method,protocol,invoke_type,target_app Number of failures per second of a certain interface   rpc.consumer.service.stats.fail_time.elapPerExec app,service,method,protocol,invoke_type,target_app Average time per failed execution of a certain interface   rpc.consumer.service.stats.fail_time.max app,service,method,protocol,invoke_type,target_app Maximum failure time of a certain interface   rpc.consumer.service.stats.fail_time.totalTime app,service,method,protocol,invoke_type,target_app Total failure time of a certain interface   rpc.consumer.service.stats.request_size.max app,service,method,protocol,invoke_type,target_app Maximum request size of a certain interface   rpc.consumer.service.stats.request_size.rate app,service,method,protocol,invoke_type,target_app Average request size per second of a certain interface   rpc.consumer.service.stats.request_size.totalAmount app,service,method,protocol,invoke_type,target_app Total request amount of a certain interface   rpc.consumer.service.stats.response_size.max app,service,method,protocol,invoke_type,target_app Maximum response size of a certain interface   rpc.consumer.service.stats.response_size.rate app,service,method,protocol,invoke_type,target_app Average response size per second of a certain interface   rpc.consumer.service.stats.response_size.totalAmount app,service,method,protocol,invoke_type,target_app Total response amount of a certain interface   rpc.consumer.service.stats.total_count.count app,service,method,protocol,invoke_type,target_app Total number of calls of a certain interface   rpc.consumer.service.stats.total_count.count_service_sum_30000 app,service,method,protocol,invoke_type,target_app Total call information of a certain interface   rpc.consumer.service.stats.total_count.rate app,service,method,protocol,invoke_type,target_app Number of calls per second of a certain interface   rpc.consumer.service.stats.total_time.elapPerExec app,service,method,protocol,invoke_type,target_app Average time per execution of a certain interface   rpc.consumer.service.stats.total_time.max app,service,method,protocol,invoke_type,target_app Maximum total time of a certain interface   rpc.consumer.service.stats.total_time.totalTime …","date":-62135596800,"description":"","dir":"projects/sofa-lookout/sofarpc-metrics/","fuzzywordcount":400,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"1f444349855508f4b111d8f2d2b5e43d","permalink":"/en/projects/sofa-lookout/sofarpc-metrics/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/en/projects/sofa-lookout/sofarpc-metrics/","summary":"SOFARPC Metrics SOFARPC currently measures two metrics.\nServer thread pool    metric name metric tags specification     rpc.bolt.threadpool.config bolt thread pool configuration Mainly includes thread pool configuration information for RPC server   rpc.bolt.threadpool.active.count  Running thread of the current thread pool   rpc.bolt.threadpool.idle.count  Idle thread of the current thread pool   rpc.bolt.threadpool.queue.size  Tasks in the queue of the current thread pool    Client call information    metric name metric tags specification     rpc.","tags":null,"title":"SOFARPC Metrics","type":"projects","url":"/en/projects/sofa-lookout/sofarpc-metrics/","wordcount":332},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-lookout/sofarpc-metrics/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"1f444349855508f4b111d8f2d2b5e43d","permalink":"/projects/sofa-lookout/sofarpc-metrics/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-lookout/sofarpc-metrics/","summary":"","tags":null,"title":"SOFARPC Metrics 指标","type":"projects","url":"/projects/sofa-lookout/sofarpc-metrics/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-rpc/overview/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"62f0806ad40fcaaeab6a82470b14a2e2","permalink":"/projects/sofa-rpc/overview/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-rpc/overview/","summary":"","tags":null,"title":"SOFARPC 介绍","type":"projects","url":"/projects/sofa-rpc/overview/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-rpc/structure-intro/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"1902232a50d57df7ab5b2c7eea1f8caa","permalink":"/projects/sofa-rpc/structure-intro/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-rpc/structure-intro/","summary":"","tags":null,"title":"SOFARPC 工程架构介绍","type":"projects","url":"/projects/sofa-rpc/structure-intro/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-rpc/getting-started-with-rpc/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"192d252b0b36266622284b68d10e9fe4","permalink":"/projects/sofa-rpc/getting-started-with-rpc/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-rpc/getting-started-with-rpc/","summary":"","tags":null,"title":"SOFARPC 方式快速入门","type":"projects","url":"/projects/sofa-rpc/getting-started-with-rpc/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-tracer/log-format-sofarpc/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"ad45177e2719b9a22f4bfb07a0481905","permalink":"/projects/sofa-tracer/log-format-sofarpc/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-tracer/log-format-sofarpc/","summary":"","tags":null,"title":"SOFARPC 日志","type":"projects","url":"/projects/sofa-tracer/log-format-sofarpc/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"本指南为 SOFAStack 多个组件的 Demo 合集。","dir":"guides/sofastack-demos/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"6a1fada81ea88116efa0e30539da60a1","permalink":"/guides/sofastack-demos/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/guides/sofastack-demos/","summary":"","tags":null,"title":"SOFAStack Demos","type":"guides","url":"/guides/sofastack-demos/","wordcount":0},{"author":null,"categories":null,"content":"Since SOFARPC 5.4.0, the SOFATracer function is integrated, which is enabled by default. It can output the data information in the link.\nBy default, the output data is in JSON format. The involved fields are as follows:\nRPC client digest Log (rpc-client-digest.log)  Log printing time TraceId SpanId Span type Current appName Protocol type Service interface information Method name Current thread name Calling type Routing record Target IP Local machine IP Return code Request serialization duration Response deserialization duration Response size (in Byte) Request size (in Byte) Client connection duration Total duration for call Local client port Transparently transmitted baggage data (kv format)  Example:\n{\u0026amp;quot;timestamp\u0026amp;quot;:\u0026amp;quot;2018-05-20 17:03:20.708\u0026amp;quot;,\u0026amp;quot;tracerId\u0026amp;quot;:\u0026amp;quot;1e27326d1526807000498100185597\u0026amp;quot;,\u0026amp;quot;spanId\u0026amp;quot;:\u0026amp;quot;0\u0026amp;quot;,\u0026amp;quot;span.kind\u0026amp;quot;:\u0026amp;quot;client\u0026amp;quot;,\u0026amp;quot;local.app\u0026amp;quot;:\u0026amp;quot;SOFATracerRPC\u0026amp;quot;,\u0026amp;quot;protocol\u0026amp;quot;:\u0026amp;quot;bolt\u0026amp;quot;,\u0026amp;quot;service\u0026amp;quot;:\u0026amp;quot;com.alipay.sofa.tracer.examples.sofarpc.direct.DirectService:1.0\u0026amp;quot;,\u0026amp;quot;method\u0026amp;quot;:\u0026amp;quot;sayDirect\u0026amp;quot;,\u0026amp;quot;current.thread.name\u0026amp;quot;:\u0026amp;quot;main\u0026amp;quot;,\u0026amp;quot;invoke.type\u0026amp;quot;:\u0026amp;quot;sync\u0026amp;quot;,\u0026amp;quot;router.record\u0026amp;quot;:\u0026amp;quot;DIRECT\u0026amp;quot;,\u0026amp;quot;remote.ip\u0026amp;quot;:\u0026amp;quot;127.0.0.1:12200\u0026amp;quot;,\u0026amp;quot;local.client.ip\u0026amp;quot;:\u0026amp;quot;127.0.0.1\u0026amp;quot;,\u0026amp;quot;result.code\u0026amp;quot;:\u0026amp;quot;00\u0026amp;quot;,\u0026amp;quot;req.serialize.time\u0026amp;quot;:\u0026amp;quot;33\u0026amp;quot;,\u0026amp;quot;resp.deserialize.time\u0026amp;quot;:\u0026amp;quot;39\u0026amp;quot;,\u0026amp;quot;resp.size\u0026amp;quot;:\u0026amp;quot;170\u0026amp;quot;,\u0026amp;quot;req.size\u0026amp;quot;:\u0026amp;quot;582\u0026amp;quot;,\u0026amp;quot;client.conn.time\u0026amp;quot;:\u0026amp;quot;0\u0026amp;quot;,\u0026amp;quot;client.elapse.time\u0026amp;quot;:\u0026amp;quot;155\u0026amp;quot;,\u0026amp;quot;local.client.port\u0026amp;quot;:\u0026amp;quot;59774\u0026amp;quot;,\u0026amp;quot;baggage\u0026amp;quot;:\u0026amp;quot;\u0026amp;quot;} RPC server digest log (rpc-server-digest.log)  Log printing time TraceId SpanId Span type Service interface information Method name Source IP Source appName Protocol Local appName Current thread name Return code Server thread pool waiting time Business processing duration Response serialization duration Request deserialization duration Response size (in Byte) Request size (in Byte) Transparently transmitted baggage data (kv format)  Example:\n{\u0026amp;quot;timestamp\u0026amp;quot;:\u0026amp;quot;2018-05-20 …","date":-62135596800,"description":"","dir":"projects/sofa-rpc/sofatracer-usage/","fuzzywordcount":300,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"dde9dc7a759b7c0c272d67bac1b315d4","permalink":"/en/projects/sofa-rpc/sofatracer-usage/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/en/projects/sofa-rpc/sofatracer-usage/","summary":"Since SOFARPC 5.4.0, the SOFATracer function is integrated, which is enabled by default. It can output the data information in the link.\nBy default, the output data is in JSON format. The involved fields are as follows:\nRPC client digest Log (rpc-client-digest.log)  Log printing time TraceId SpanId Span type Current appName Protocol type Service interface information Method name Current thread name Calling type Routing record Target IP Local machine IP Return code Request serialization duration Response deserialization duration Response size (in Byte) Request size (in Byte) Client connection duration Total duration for call Local client port Transparently transmitted baggage data (kv format)  Example:","tags":null,"title":"SOFATracer","type":"projects","url":"/en/projects/sofa-rpc/sofatracer-usage/","wordcount":222},{"author":null,"categories":null,"content":"SOFATracer configuration item After introducing SOFATracer, you can add related configuration items in Spring Boot configuration file application.properties to customize the behaviors of SOFATracer.\nFor SOFATracer log output directory, you can configure logging.path in application.properties, then the log output path is ${logging.path}/tracelog; if logging.path is not configured, the default output path is ${user.home}/logs/tracelog.\n   Configuration item Description Default value     logging.path log output directory SOFATracer output logs to logging.path directory in priority; If the directory is not configured, log will be output to ${user.home} by default.   com.alipay.sofa.tracer.disableDigestLog Disable all integrated SOFATracer summary log printing false   com.alipay.sofa.tracer.disableConfiguration[${logType}] Disable specific SOFATracer summary log printing of ${logType}. ${logType} indicates the log type, such as spring-mvc-digest.log false   com.alipay.sofa.tracer.tracerGlobalRollingPolicy SOFATracer log rolling policy yyyy-MM-dd：roll by day；yyyy-MM-dd_HH：roll by hour;Logs are not rolled by day by default.   com.alipay.sofa.tracer.tracerGlobalLogReserveDay Retention days of SOFATracer logs Retained for 7 days by default.   com.alipay.sofa.tracer.statLogInterval Time interval of statistical logs, unit: second Output statistical logs once every 60 seconds by default   com.alipay.sofa.tracer.baggageMaxLength Maximum length for retaining penetration data Default: 1024   com.alipay.sofa.tracer.zipkin.enabled Whether to enable SOFATracer remote data reporting to Zipkin true: enable; false: disable. Disabled by default.   com.alipay.sofa.tracer.zipkin.baseUrl The address Zipkin address to which SOFATracer remotely reports data, which works only in the case of com.alipay.sofa.tracer.zipkin.enabled=true Format: http: //${host}:${port}   com.alipay.sofa.tracer.springmvc.filterOrder Order validated by SOFATrace Filter intergrated in SpringMVC -2147483647(org.springframework.core.Ordered#HIGHEST_PRECEDENCE + 1)   com.alipay.sofa.tracer.springmvc.urlPatterns URL Pattern paths validated by SOFATrace Filter intergrated in SpringMVC /*: All validated    ","date":-62135596800,"description":"","dir":"projects/sofa-tracer/configuration/","fuzzywordcount":300,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"1a6bf2b7aa168440544f8d0d69358869","permalink":"/en/projects/sofa-tracer/configuration/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/en/projects/sofa-tracer/configuration/","summary":"SOFATracer configuration item After introducing SOFATracer, you can add related configuration items in Spring Boot configuration file application.properties to customize the behaviors of SOFATracer.\nFor SOFATracer log output directory, you can configure logging.path in application.properties, then the log output path is ${logging.path}/tracelog; if logging.path is not configured, the default output path is ${user.home}/logs/tracelog.\n   Configuration item Description Default value     logging.path log output directory SOFATracer output logs to logging.","tags":null,"title":"SOFATracer configuration items","type":"projects","url":"/en/projects/sofa-tracer/configuration/","wordcount":231},{"author":null,"categories":null,"content":"SOFATracer Tools Get Span through SOFATracer context In the process of a distributed link call, the component that integrates SOFATracer generates a Span and caches it in the SOFATracer context. And the context is cached in ThreadLocal. You can get the current SOFATracer context in the following way:\nSofaTraceContext sofaTraceContext = SofaTraceContextHolder.getSofaTraceContext(); Through the SOFATracer context SofaTraceContext, you can add, delete, modify, check, and empty the cached Spans. As the developers responsible for integrating components, we will add, delete, modify and check the SOFATracer context to integrate distributed link tracking. However, as the application developer to directly use SOFATracer, you only need to get the corresponding Span. That is to say, you only need to use the following method after getting the context:\nSofaTracerSpan sofaTracerSpan = sofaTraceContext.getCurrentSpan(); Get information through Span When using the SOFATracer plugin component, such as Spring MVC, the component integrates the capabilities of SOFATracer. So it can get all the information in the Span after getting Span. The specific acquisition method example (it demands that Span is not empty, namely that the corresponding component has integrated SOFATracer) is as follow:\nGet TraceId and SpanId: SofaTracerSpanContext sofaTracerSpanContext = currentSpan.getSofaTracerSpanContext(); String traceId = sofaTracerSpanContext.getTraceId(); String spanId = sofaTracerSpanContext.getSpanId(); Get Tags and Logs in OpenTracing specification Get Tags:\nMap\u0026amp;lt;String, String\u0026amp;gt; tagsStr = sofaTracerSpan.getTagsWithStr(); Map\u0026amp;lt;String, Boolean\u0026amp;gt; tagsBool = sofaTracerSpan.getTagsWithBool(); Map\u0026amp;lt;String, Number\u0026amp;gt; tagsNumber = sofaTracerSpan.getTagsWithNumber(); Get Logs:\nList \u0026amp;lt;LogData\u0026amp;gt; logDataList = sofaTracerSpan.getLogs (); Process transparently transmitted data Baggage element is a collection of key-value pairs that carries data to be transparently transmitted. In SOFATracer, Baggage data is divided into sysBaggage and bizBaggage; sysBaggage mainly refers to transparently transmitted system data, and bizBaggage mainly refers to transparently transmitted business data.\nConfigure and get BaggageItem BaggageItem is a data element in the Baggage collection.\n Configure the corresponding BaggageItem data through the standard interface:  String baggageKey = \u0026amp;#34;key\u0026amp;#34;; String baggageVal = \u0026amp;#34;val\u0026amp;#34;; sofaTracerSpan.setBaggageItem(baggageKey,baggageVal); Get the corresponding BaggageItem data through the standard interface:  String baggageKey = \u0026amp;#34;key\u0026amp;#34;; String baggageValue = sofaTracerSpan.getBaggageItem(baggageKey); Note: Configuring and getting Baggage data through the standard interface is actually operated on bizBaggage.\nConfigure and get \u0026amp;lsquo;Baggage\u0026amp;rsquo; data 1, Configure \u0026amp;lsquo;Baggage\u0026amp;rsquo; data\nSofaTracerSpanContext sofaTracerSpanContext = sofaTracerSpan.getSofaTracerSpanContext(); Map\u0026amp;lt;String, String\u0026amp;gt; bizBaggage = new …","date":-62135596800,"description":"","dir":"projects/sofa-tracer/utils/","fuzzywordcount":500,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"d40318a5bd3ee5e1573f8770ea649dba","permalink":"/en/projects/sofa-tracer/utils/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/en/projects/sofa-tracer/utils/","summary":"SOFATracer Tools Get Span through SOFATracer context In the process of a distributed link call, the component that integrates SOFATracer generates a Span and caches it in the SOFATracer context. And the context is cached in ThreadLocal. You can get the current SOFATracer context in the following way:\nSofaTraceContext sofaTraceContext = SofaTraceContextHolder.getSofaTraceContext(); Through the SOFATracer context SofaTraceContext, you can add, delete, modify, check, and empty the cached Spans. As the developers responsible for integrating components, we will add, delete, modify and check the SOFATracer context to integrate distributed link tracking.","tags":null,"title":"SOFATracer Tools","type":"projects","url":"/en/projects/sofa-tracer/utils/","wordcount":443},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-tracer/overview/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"e8d6bf5eec6c5ce1e41d461743f2c4f1","permalink":"/projects/sofa-tracer/overview/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-tracer/overview/","summary":"","tags":null,"title":"SOFATracer 介绍","type":"projects","url":"/projects/sofa-tracer/overview/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-tracer/utils/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"d40318a5bd3ee5e1573f8770ea649dba","permalink":"/projects/sofa-tracer/utils/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-tracer/utils/","summary":"","tags":null,"title":"SOFATracer 工具类","type":"projects","url":"/projects/sofa-tracer/utils/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-tracer/configuration/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"1a6bf2b7aa168440544f8d0d69358869","permalink":"/projects/sofa-tracer/configuration/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-tracer/configuration/","summary":"","tags":null,"title":"SOFATracer 配置项","type":"projects","url":"/projects/sofa-tracer/configuration/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-rpc/sofatracer-usage/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"dde9dc7a759b7c0c272d67bac1b315d4","permalink":"/projects/sofa-rpc/sofatracer-usage/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-rpc/sofatracer-usage/","summary":"","tags":null,"title":"SOFATracer 链路追踪","type":"projects","url":"/projects/sofa-rpc/sofatracer-usage/","wordcount":0},{"author":null,"categories":null,"content":"SOFATracer is a distributed link tracing system based on OpenTracing specification developed by Ant Financial. Its core concept is to concatenate the same request distributed on each service node with a global TraceId. By the unified TraceId, it can record the various network call information in the call link in logs, and can remotely report the call records to Zipkin for presentation, thus implementing perspective network call.\nFeatures Distributed link tracing solution based on OpenTracing specification SOFATracer is a solution that provides link tracing based on and improved from the OpenTracing specification. Based on this implementation, each framework or component can provide the ability to link tracking by burying points.\nProvide asynchronous log printing to disks Based on high-performance lock-free loop queue of Disruptor, SOFATracer provides the ability to print logs asynchronously to local disk. The introduced framework or component can customize the output format of the log file under the premise of asynchronous log printing. SOFATracer provides two types of logs, digest log and statistical log. Digest log: logs that are printed to disk upon each call. Statistical log: logs that are printed at regular intervals.\nSupport automatic log cleanup and scrolling Asynchronous SOFATracer log supports automatic cleanup and scrolling, and supports cleaning by day and scrolling by hour or day.\nExtended based on SLF4J MDC SLF4J provides MDC (Mapped Diagnostic Contexts), which supports user to define and modify the output log format and content. SOFATracer integrates the SLF4J MDC function, which allows user to output the TraceId and SpanId of the current Tracer context by simply modifying the log configuration file.\nInterface presentation SOFATracer can remotely report link tracing data to the open-source product Zipkin for distributed link tracing presentation.\nUnified configuration The profile file provides various configuration options for you to customize the individual requirements of the application.\nScenario SOFATracer solves the problem of link tracing when implementing large-scale microservice architecture, achieves perspective network call, and can be used to rapidly Failures Discovery, Service Governance, and so on.\nComponent event tracking At present, SOFATracer supports Spring MVC, database connection pool (DBCP, Druid, c3p0, tomcat, HikariCP, BoneCP) acheived by standard JDBC interface, HttpClient and other open-source components. Event tracking for other open-source components (such as MQ, Redis) is still in development.\n   Component Document Version     Spring MVC doc link 2.1.0   DBCP doc link 2.2.0   Druid doc link 2.2.0   C3p0 doc link 2.2.0   HikariCP doc link 2.2.0   HttpClient doc link 2.2.0   RestTemplate doc link 2.3.0   OkHttp doc link 2.3.2   Dubbo doc link 2.4.0   OpenFeign doc link 3.0.4   Redis TODO    MQ TODO     ","date":-62135596800,"description":"","dir":"projects/sofa-tracer/overview/","fuzzywordcount":500,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"e8d6bf5eec6c5ce1e41d461743f2c4f1","permalink":"/en/projects/sofa-tracer/overview/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/en/projects/sofa-tracer/overview/","summary":"SOFATracer is a distributed link tracing system based on OpenTracing specification developed by Ant Financial. Its core concept is to concatenate the same request distributed on each service node with a global TraceId. By the unified TraceId, it can record the various network call information in the call link in logs, and can remotely report the call records to Zipkin for presentation, thus implementing perspective network call.\nFeatures Distributed link tracing solution based on OpenTracing specification SOFATracer is a solution that provides link tracing based on and improved from the OpenTracing specification.","tags":null,"title":"SOFATracker overview","type":"projects","url":"/en/projects/sofa-tracer/overview/","wordcount":421},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-boot/bean-async-init/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"1b7c2d94076ffb7ac96f64a557067917","permalink":"/projects/sofa-boot/bean-async-init/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-boot/bean-async-init/","summary":"","tags":null,"title":"Spring Bean 异步初始化","type":"projects","url":"/projects/sofa-boot/bean-async-init/","wordcount":0},{"author":null,"categories":null,"content":"In this document will demonstrate how to use SOFATracer to track of SpringMVC, this example address.\nAssuming you have built a simple Spring Web project based on SOFABoot, Then you can be operated by the following steps:\nIntroduce dependency \u0026amp;lt;dependency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;com.alipay.sofa\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;tracer-sofa-boot-starter\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;/dependency\u0026amp;gt; Project Configuration Then, add the parameters to be used by SOFATracer in the project\u0026amp;rsquo;s application.properties file, including spring.application.name that indicates the name of the current application and logging.path that specifies the log output directory.\n# Application Name spring.application.name=SOFATracerSpringMVC # logging path logging.path=./logs Add a simple Controller In the project code, add a simple Controller, for example:\n@RestController public class SampleRestController { private static final String TEMPLATE = \u0026amp;#34;Hello, %s!\u0026amp;#34;; private final AtomicLong counter = new AtomicLong(); /** * http://localhost:8080/springmvc * @param name name * @return map */ @RequestMapping(\u0026amp;#34;/springmvc\u0026amp;#34;) public Map\u0026amp;lt;String, Object\u0026amp;gt; springmvc(@RequestParam(value = \u0026amp;#34;name\u0026amp;#34;, defaultValue = \u0026amp;#34;SOFATracer SpringMVC DEMO\u0026amp;#34;) String name) { Map\u0026amp;lt;String, Object\u0026amp;gt; resultMap = new HashMap\u0026amp;lt;String, Object\u0026amp;gt;(); resultMap.put(\u0026amp;#34;success\u0026amp;#34;, true); resultMap.put(\u0026amp;#34;id\u0026amp;#34;, counter.incrementAndGet()); resultMap.put(\u0026amp;#34;content\u0026amp;#34;, String.format(TEMPLATE, name)); return resultMap; } } Run the project Start Current SOFABoot Application. You will see the log about startup in the console:\n2018-05-11 11:55:11.932 INFO 66490 --- [ost-startStop-1] o.s.b.w.servlet.FilterRegistrationBean : Mapping filter: \u0026#39;SpringMvcOpenTracingFilter\u0026#39; to urls: [/*] 2018-05-11 11:55:13.961 INFO 66490 --- [ main] s.b.c.e.t.TomcatEmbeddedServletContainer : Tomcat started on port(s): 8080 (http) 2018-05-11 11:55:13.970 INFO 66490 --- [ main] c.a.s.t.e.springmvc.DemoApplication : Started DemoApplication in 8.361 seconds (JVM running for 9.34) You can access the REST service by visiting http://localhost:8080/springmvc in your browser. You can see the result similar to the followings:\n{ content: \u0026amp;#34;Hello, SOFATracer SpringMVC DEMO!\u0026amp;#34;, id: 1, success: true } View log In the application.properties, the log printing directory we configured is ./logs, which is the root directory of the current application (we can configure it based on actual situation). In the root directory, you can see log files in the structure similar to the followings:\n./logs ├── spring.log └── tracelog ├── spring-mvc-digest.log ├── spring-mvc-stat.log ├── static-info.log └── tracer-self.log Every time you visit http://localhost:8080/springmvc, SOFATracer will log the digest log. You can open the spring-mvc-digest.log file to see the specific log content. As for the meaning of each output field, you can refer to here.\n{\u0026amp;#34;time\u0026amp;#34;:\u0026amp;#34;2018-05-17 …","date":-62135596800,"description":"","dir":"projects/sofa-tracer/usage-of-mvc/","fuzzywordcount":400,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"6c6389a6f994f43f08cbdf4a49d1755a","permalink":"/en/projects/sofa-tracer/usage-of-mvc/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/en/projects/sofa-tracer/usage-of-mvc/","summary":"In this document will demonstrate how to use SOFATracer to track of SpringMVC, this example address.\nAssuming you have built a simple Spring Web project based on SOFABoot, Then you can be operated by the following steps:\nIntroduce dependency \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.alipay.sofa\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;tracer-sofa-boot-starter\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; Project Configuration Then, add the parameters to be used by SOFATracer in the project\u0026rsquo;s application.properties file, including spring.application.name that indicates the name of the current application and logging.","tags":null,"title":"Spring MVC Integration","type":"projects","url":"/en/projects/sofa-tracer/usage-of-mvc/","wordcount":356},{"author":null,"categories":null,"content":"SpringMVC Log Format After integrating SpringMVC, SOFATracer will output the link data format of the MVC requests, which is JSON by default.\nSpring MVC digest log (spring-mvc-digest.log) Data is ouput in JSON format. The meaning of each key is as follows:\n   Key Meaning     Time Log printing time   Local.app Current application name   traceId TraceId   spanId SpanId   Request.url Request URL   Method Request HTTP method   Result.code HTTP return status code   req.size.bytes Request body size   resp.size.bytes Response body size   Time.cost.milliseconds Request time (ms)   Current.thread.name Current thread name   Baggage Transparently transmitted baggage data    Example:\n{\u0026amp;#34;time\u0026amp;#34;:\u0026amp;#34;2018-06-03 16:44:05.829\u0026amp;#34;,\u0026amp;#34;local.app\u0026amp;#34;:\u0026amp;#34;SpringMvcJsonOutput\u0026amp;#34;,\u0026amp;#34;traceId\u0026amp;#34;:\u0026amp;#34;c0a80d9e1528015445828101064625\u0026amp;#34;,\u0026amp;#34;spanId\u0026amp;#34;:\u0026amp;#34;0\u0026amp;#34;,\u0026amp;#34;request.url\u0026amp;#34;:\u0026amp;#34;http://localhost:63933/greeting\u0026amp;#34;,\u0026amp;#34;method\u0026amp;#34;:\u0026amp;#34;GET\u0026amp;#34;,\u0026amp;#34;result.code\u0026amp;#34;:\u0026amp;#34;200\u0026amp;#34;,\u0026amp;#34;req.size.bytes\u0026amp;#34;:0,\u0026amp;#34;resp.size.bytes\u0026amp;#34;:50,\u0026amp;#34;time.cost.milliseconds\u0026amp;#34;:1,\u0026amp;#34;current.thread.name\u0026amp;#34;:\u0026amp;#34;http-nio-auto-1-exec-10\u0026amp;#34;,\u0026amp;#34;baggage\u0026amp;#34;:\u0026amp;#34;\u0026amp;#34;} Spring MVC statistical log (spring-mvc-stat.log) stat.key is a collection of statistical keywords in this period., which uniquely determines a set of statistical data, including local.app, request.url, and method field.\nExample:\n{\u0026amp;#34;time\u0026amp;#34;:\u0026amp;#34;2018-06-03 16:44:02.473\u0026amp;#34;,\u0026amp;#34;stat.key\u0026amp;#34;:{\u0026amp;#34;request.url\u0026amp;#34;:\u0026amp;#34;http://localhost:63933/greeting\u0026amp;#34;,\u0026amp;#34;local.app\u0026amp;#34;:\u0026amp;#34;SpringMvcJsonOutput\u0026amp;#34;,\u0026amp;#34;method\u0026amp;#34;:\u0026amp;#34;GET\u0026amp;#34;},\u0026amp;#34;count\u0026amp;#34;:5,\u0026amp;#34;total.cost.milliseconds\u0026amp;#34;:149,\u0026amp;#34;success\u0026amp;#34;:\u0026amp;#34;Y\u0026amp;#34;,\u0026amp;#34;load.test\u0026amp;#34;:\u0026amp;#34;F\u0026amp;#34;} ","date":-62135596800,"description":"","dir":"projects/sofa-tracer/log-format-springmvc/","fuzzywordcount":200,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"af13acf5aee90a32f0fa143996063a91","permalink":"/en/projects/sofa-tracer/log-format-springmvc/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/en/projects/sofa-tracer/log-format-springmvc/","summary":"SpringMVC Log Format After integrating SpringMVC, SOFATracer will output the link data format of the MVC requests, which is JSON by default.\nSpring MVC digest log (spring-mvc-digest.log) Data is ouput in JSON format. The meaning of each key is as follows:\n   Key Meaning     Time Log printing time   Local.app Current application name   traceId TraceId   spanId SpanId   Request.","tags":null,"title":"Spring MVC log","type":"projects","url":"/en/projects/sofa-tracer/log-format-springmvc/","wordcount":123},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-tracer/usage-of-mvc/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"6c6389a6f994f43f08cbdf4a49d1755a","permalink":"/projects/sofa-tracer/usage-of-mvc/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-tracer/usage-of-mvc/","summary":"","tags":null,"title":"Spring MVC 埋点接入","type":"projects","url":"/projects/sofa-tracer/usage-of-mvc/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-tracer/log-format-springmvc/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"af13acf5aee90a32f0fa143996063a91","permalink":"/projects/sofa-tracer/log-format-springmvc/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-tracer/log-format-springmvc/","summary":"","tags":null,"title":"Spring MVC 日志","type":"projects","url":"/projects/sofa-tracer/log-format-springmvc/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-boot/sofa-ark-ark-telnet/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"f23d585e5439569b47ed83f7bc955b22","permalink":"/projects/sofa-boot/sofa-ark-ark-telnet/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-boot/sofa-ark-ark-telnet/","summary":"","tags":null,"title":"Telnet 指令","type":"projects","url":"/projects/sofa-boot/sofa-ark-ark-telnet/","wordcount":0},{"author":null,"categories":null,"content":"Ark package The Executed Fat Jar that meets the specific directory format requirements can use the officially provided Maven plug-in (sofa-Ark-maven-plugin) to package the engineering application into a standard-format Ark package. Start the application on top of the SOFAArk container with the java -jar command. The Ark package usually contains the Ark Container, Ark Plugin dependency (if any), merged deployed Ark Biz (if any), and the Ark Biz of the application itself. For details, refer to the Ark package；\nArk Container The Ark container (Ark Plugin and Ark Biz) runs on top of the SOFAArk container. The container has the ability to manage multiple plug-ins and applications. After successful start, the container will resolve the configuration of Ark Plugin and Ark Biz, complete loading of the isolation and start them in turn based on their priorities. For details, refer to SOFAArk container startup；\nArk Plugin The Ark plug-in, which meets the specific fat jar directory format requirements, can use the officially provided Maven plug-in (sofa-Ark-plugin-maven-plugin) to package one or multiple common Java Jar packages into a standard-format Ark Plugin. Ark Plugin will contain a configuration file that usually contains the import and export configuration of plug-in classes and resources and the priority of plug-in startup. When running, the Ark container will use an independent PluginClassLoader to load the plug-ins, and build the index table for class loading according to the plug-in configuration, so that the plug-ins are isolated from each other and from the applications. For details, refer to Ark Plugin；\nArk Biz The Ark module, which meets the specific fat jar directory format requirements, can use the officially provided Maven plug-in (sofa-Ark-maven-plugin) to package an engineering application into a standard-format Ark Biz package. The Ark Biz package has two roles: one is to be the organizational unit of the engineering application module and its dependent packages, and the other is to be used as a common jar package dependency by other applications to start multiple Ark Biz packages in the same SOFAArk container. Multiple Ark Biz packages share the Ark Container and Ark Plugin. For details, refer to Ark Biz；\n","date":-62135596800,"description":"","dir":"projects/sofa-boot/sofa-ark-terminology/","fuzzywordcount":400,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"b6d0ed10afe9d04bc00307017ffba7c5","permalink":"/en/projects/sofa-boot/sofa-ark-terminology/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/en/projects/sofa-boot/sofa-ark-terminology/","summary":"Ark package The Executed Fat Jar that meets the specific directory format requirements can use the officially provided Maven plug-in (sofa-Ark-maven-plugin) to package the engineering application into a standard-format Ark package. Start the application on top of the SOFAArk container with the java -jar command. The Ark package usually contains the Ark Container, Ark Plugin dependency (if any), merged deployed Ark Biz (if any), and the Ark Biz of the application itself.","tags":null,"title":"Terminologies","type":"projects","url":"/en/projects/sofa-boot/sofa-ark-terminology/","wordcount":351},{"author":null,"categories":null,"content":"Explanation of Terms    Terminology Description     TraceId TraceId refers to the ID that represents the unique request in SOFATracer. This ID is generally generated by the first system in the cluster that processes the request and is passed over the network to the next requested system in distributed calls.   SpanId SpanId represents the location or level of the request in the entire call link. For example, the system A calls system B, C, and D in sequence when processing a request. Then the SpanId of the three calls are respectively: 0.1, 0.2, 0.3. If system B continues to call system E and F, the SpanIds of the two calls are: 0.1.1, 0.1.2.    For other related terminologies, see OpenTracing specification.\n","date":-62135596800,"description":"","dir":"projects/sofa-tracer/explanation/","fuzzywordcount":200,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"8ba307b0679e918f7ac68c7efb7e53f7","permalink":"/en/projects/sofa-tracer/explanation/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/en/projects/sofa-tracer/explanation/","summary":"Explanation of Terms    Terminology Description     TraceId TraceId refers to the ID that represents the unique request in SOFATracer. This ID is generally generated by the first system in the cluster that processes the request and is passed over the network to the next requested system in distributed calls.   SpanId SpanId represents the location or level of the request in the entire call link.","tags":null,"title":"Terminologies","type":"projects","url":"/en/projects/sofa-tracer/explanation/","wordcount":118},{"author":null,"categories":null,"content":"General terminology    Term Description     Service A software function provided over the network with specific business logic processing capabilities.   Service provider A computer node that provides services over the network.   Service consumer A computer node that receives services through the network. The same computer node can both be the service provider of some services and the service consumer of others.   Service discovery The process in which the service consumer obtains the network address of the service provider.   Service registry A software system that provides service discovery functions to help service consumers obtain network addresses of service providers.   Data center An independent physical area with a fixed physical location, stable power supply, and reliable network. A data center is usually an important factor that you want to consider in high availability design. Generally, deployment in the same data center features higher network quality, lower latency, but limited disaster recovery capability. However, deployment across different data centers features lower network quality, higher latency, but better disaster recovery capability.    SOFARegistry terminology    Terminology Description     SOFARegistry A registry product open sourced by Ant Financial to provide service discovery based on the \u0026amp;ldquo;publishing-subscription\u0026amp;rdquo; mode. In addition to service discovery, SOFARegistry is applicable to more general \u0026amp;ldquo;publishing-subscription\u0026amp;rdquo; scenarios.   Data In the context of service discovery, data specifically refers to the network address and some additional information of the service provider. In other circumstances, it also refers to information published to SOFARegistry.   Zone The key concept of the zone-based architecture. In the context of service discovery, a zone is a collection of publishing and subscription requests. When you publish or subscribe to a service, you need to specify the zone name. For more information, see Active geo-redundant zone-based architecture solution.   Publisher A node that publishes data to SOFARegistry. In the context of service discovery, the service provider is the publisher of the \u0026amp;ldquo;service provider\u0026amp;rsquo;s network address and additional information\u0026amp;rdquo;.   Subscriber A node that subscribes to data from SOFARegistry. In the context of service discovery, the service consumer is the subscriber of the \u0026amp;ldquo;service provider\u0026amp;rsquo;s network address and additional information\u0026amp;rdquo;.   Data ID A string that is used to identify the data. In the context of service discovery, DataId usually consists of the service port name, protocol, and version number. It is used as an identifier of the service.   Group ID A string that is used for grouping data. It can be used in conjunction with DataId and InstanceId as a namespace identifier of data. Two services may be considered one same service only when their DataIds, GroupIds, and InstanceIds are identical.   Instance ID A string …","date":-62135596800,"description":"","dir":"projects/sofa-registry/terminology/","fuzzywordcount":600,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"b678a49547c55f2a70e2d94dbce5b4a2","permalink":"/en/projects/sofa-registry/terminology/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/en/projects/sofa-registry/terminology/","summary":"General terminology    Term Description     Service A software function provided over the network with specific business logic processing capabilities.   Service provider A computer node that provides services over the network.   Service consumer A computer node that receives services through the network. The same computer node can both be the service provider of some services and the service consumer of others.   Service discovery The process in which the service consumer obtains the network address of the service provider.","tags":null,"title":"Terminology","type":"projects","url":"/en/projects/sofa-registry/terminology/","wordcount":508},{"author":null,"categories":null,"content":"Unit test Place the unit test cases in the modules developed by yourself.\nIf the cases rely on a third-party server (such as ZooKeeper), you must manually add the profile. See the registry-zookeeper module code.\nIf the cases rely on other modules and integration test is required, place them in the test/test-intergrated module.\nIf the cases also rely on a third-party server (such as ZooKeeper), place them in the test-intergrated-3rd module.\nPerformance test Close the following projects that are closed by default:\n-Dcontext.attachment.enable=false -Dserialize.blacklist.enable=false -Ddefault.tracer= -Dlogger.impl=com.alipay.sofa.rpc.log.SLF4JLoggerImpl -Dmultiple.classloader.enable=false -Devent.bus .enable=false\nA pressure test on BOLT+hessian has been done.\n  Server: 4C8G virtual machine; gigabit network; jdk1.8.0_111;\n  Client: 50 concurrent requests\n     Protocol Request Response Server TPS Average RT (ms)     bolt+hessian 1KB string 1KB string Directly return 10000 1.93   bolt+hessian 1KB string 1KB string Directly return 20000 4.13   bolt+hessian 1KB string 1KB string Directly return 30000 7.32   bolt+hessian 1KB string 1KB string Directly return 40000 15.78   bolt+hessian 1KB string 1KB string Directly return 50000 (Close to the utmost limit, error rate: 0.3%) 26.51    ","date":-62135596800,"description":"","dir":"projects/sofa-rpc/test/","fuzzywordcount":200,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"ccda7c2372a7f55d61f682b72d3b1dc2","permalink":"/en/projects/sofa-rpc/test/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/en/projects/sofa-rpc/test/","summary":"Unit test Place the unit test cases in the modules developed by yourself.\nIf the cases rely on a third-party server (such as ZooKeeper), you must manually add the profile. See the registry-zookeeper module code.\nIf the cases rely on other modules and integration test is required, place them in the test/test-intergrated module.\nIf the cases also rely on a third-party server (such as ZooKeeper), place them in the test-intergrated-3rd module.","tags":null,"title":"Test","type":"projects","url":"/en/projects/sofa-rpc/test/","wordcount":169},{"author":null,"categories":null,"content":"When using the Bolt protocol for communication, invoke timeout defaults is 3 seconds. You can configure the timeout when referencing the service, and can also configure the timeout period from the dimension of service or method respectively. SOFARPC timeout can be set in milliseconds.\nService If you need to set the timeout from the dimension of service when publishing a service, just configure the timeout parameter to the corresponding value.\nUse XML If you reference the service using XML, set the value of the timeout attribute of the \u0026amp;lt;sofa:global-attrs\u0026amp;gt; tag under the \u0026amp;lt;sofa:binding.bolt\u0026amp;gt; tag:\n\u0026amp;lt;sofa:reference interface=\u0026amp;#34;com.example.demo.SampleService\u0026amp;#34; id=\u0026amp;#34;sampleService\u0026amp;#34;\u0026amp;gt; \u0026amp;lt;sofa:binding.bolt\u0026amp;gt; \u0026amp;lt;sofa:global-attrs timeout=\u0026amp;#34;2000\u0026amp;#34;/\u0026amp;gt; \u0026amp;lt;/sofa:binding.bolt\u0026amp;gt; \u0026amp;lt;/sofa:reference\u0026amp;gt; Use Annotation If you reference the service using Annotation, set the value of the timeout attribute of @SofaReferenceBinding:\n@SofaReference(binding = @SofaReferenceBinding(bindingType = \u0026amp;#34;bolt\u0026amp;#34;, timeout = 2000)) private SampleService sampleService; Use API in Spring environment If you reference the service in Spring or Spring Boot environment, just set the value of timeout attribute of BoltBindingParam:\nBoltBindingParam boltBindingParam = new BoltBindingParam(); boltBindingParam.setTimeout(2000) Use API in non-Spring environment If you reference service using the bare API of SOFARPC directly in non-Spring environment, just set the timeout attribute of ConsumerConfig:\nConsumerConfig\u0026amp;lt;SampleService\u0026amp;gt; consumerConfig = new ConsumerConfig\u0026amp;lt;SampleService\u0026amp;gt;() .setInterfaceId(SampleService.class.getName()) .setRegistry(registryConfig) .setProtocol(\u0026amp;#34;bolt\u0026amp;#34;) .setTimeout(2000); Method If you want to adjust the timeout for a certain method in a service individually, you can set the timeout period from the dimension of method.\nFor a method, the timeout period of the method is prioritized. If not set, the timeout period of the service will be used.\nUse XML If you reference service using XML, just set the timeout attribute of the corresponding \u0026amp;lt;sofa: method\u0026amp;gt;:\n\u0026amp;lt;Sofa: Reference interface = \u0026amp;#34;com.example.demo .SampleService\u0026amp;#34; id=\u0026amp;#34;sampleService\u0026amp;#34;\u0026amp;gt; \u0026amp;lt;sofa:binding.bolt\u0026amp;gt; \u0026amp;lt;sofa:method name=\u0026amp;#34;hello\u0026amp;#34; timeout=\u0026amp;#34;2000\u0026amp;#34;/\u0026amp;gt; \u0026amp;lt;/sofa:binding.bolt\u0026amp;gt; \u0026amp;lt;/sofa:reference\u0026amp;gt; Use Annotation No method is available for setting the method-level timeout with Annotation currenty.\nUse API in Spring environment To reference a service in Spring or Spring Boot environment, you can just set the value of timeout attribute of RpcBindingMethodInfo\nBoltBindingParam boltBindingParam = new BoltBindingParam(); RpcBindingMethodInfo rpcBindingMethodInfo = new RpcBindingMethodInfo(); rpcBindingMethodInfo.setName(\u0026amp;#34;hello\u0026amp;#34;); rpcBindingMethodInfo.setTimeout(2000); List\u0026amp;lt;RpcBindingMethodInfo\u0026amp;gt; rpcBindingMethodInfos = new ArrayList\u0026amp;lt;\u0026amp;gt;(); rpcBindingMethodInfos.add(rpcBindingMethodInfo); …","date":-62135596800,"description":"","dir":"projects/sofa-rpc/bolt-timeout/","fuzzywordcount":400,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"cf14f73dc0c4672a9255ef55b56de419","permalink":"/en/projects/sofa-rpc/bolt-timeout/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/en/projects/sofa-rpc/bolt-timeout/","summary":"When using the Bolt protocol for communication, invoke timeout defaults is 3 seconds. You can configure the timeout when referencing the service, and can also configure the timeout period from the dimension of service or method respectively. SOFARPC timeout can be set in milliseconds.\nService If you need to set the timeout from the dimension of service when publishing a service, just configure the timeout parameter to the corresponding value.","tags":null,"title":"Timeout control","type":"projects","url":"/en/projects/sofa-rpc/bolt-timeout/","wordcount":388},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/mosn/concept/tls/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"47ccccf9690bc65fa437463a8f5e55b6","permalink":"/projects/mosn/concept/tls/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/mosn/concept/tls/","summary":"","tags":null,"title":"TLS 安全链路","type":"projects","url":"/projects/mosn/concept/tls/","wordcount":0},{"author":null,"categories":null,"content":"TraceId generation rule SOFATracer uses TraceId to concatenate the call logs of a request on each server. The TraceId is typically generated by the first server that receives the request. The generation rule is: server IP + generated time + incremental sequence + current process ID, such as:\n0ad1348f1403169275002100356696  The first 8 digits 0ad1348f is the IP of the machine that generates TraceId. This is a hexadecimal number, in which every two digits represents a part of IP. Based on the number, we can get a common IP address like 10.209.52.143 by converting every two digits into a decimal number. According to this rule, you can also figure out the first server that the request goes through. The next 13 digits 1403169275002 is the time to generate the TraceId. The next 4 digits 1003 is an auto-incrementing sequence that increases from 1000 to 9000. After reaching 9000, it returns to 1000 and then restarts to increase. The last 5 digits 56696 is the current process ID. Its role in tracerId is to prevent the TraceId conflicts caused by multiple processes in a single machine.   Currently, TraceId\u0026amp;rsquo;s generated rules refer to Taobao\u0026amp;rsquo;s Hawkeye components.\n SpanId generation rule The SpanId in SOFATracer represents where the current call is in the entire calling link. If a Web system A receives a user request, then in the SOFATracer MVC log of this system, the recorded SpanId is 0, which means the root node of the entire call. If the system A processes this request and needs to call system B, C, and D through RPC, then the SpanIds in the SOFATracer RPC client log of system A are 0.1, 0.2, and 0.3 respectively. And in the SOFATracer RPC server logs of the system B, C, and D, the SpanIds are also 0.1, 0.2 and 0.3 respectively. If system C calls system E and F when processing the request, then in the corresponding SOFATracer RPC client log of system C, the SpanIds are 0.2.1 and 0.2.2. And the SpanIds in the SOFATracer RPC server logs of system E and F are also 0.2.1 and 0.2.2. As we can known from above, if all SpanIds in a call can be collected to compose a complete link tree.\nWe assume that the TraceId generated in a distributed call is 0a1234 (much longer in practice). Then, according to the generation process of SpanId, the call link tree is as shown in the following figure:\n Currently, SpanId\u0026amp;rsquo;s generated rules refer to Taobao\u0026amp;rsquo;s Hawkeye components.\n ","date":-62135596800,"description":"","dir":"projects/sofa-tracer/traceid-generated-rule/","fuzzywordcount":500,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"8f0ef8df65deec2a4fa6591a316aa5e8","permalink":"/en/projects/sofa-tracer/traceid-generated-rule/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/en/projects/sofa-tracer/traceid-generated-rule/","summary":"TraceId generation rule SOFATracer uses TraceId to concatenate the call logs of a request on each server. The TraceId is typically generated by the first server that receives the request. The generation rule is: server IP + generated time + incremental sequence + current process ID, such as:\n0ad1348f1403169275002100356696  The first 8 digits 0ad1348f is the IP of the machine that generates TraceId. This is a hexadecimal number, in which every two digits represents a part of IP.","tags":null,"title":"TraceId and spanId generation rule","type":"projects","url":"/en/projects/sofa-tracer/traceid-generated-rule/","wordcount":415},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-tracer/traceid-generated-rule/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"8f0ef8df65deec2a4fa6591a316aa5e8","permalink":"/projects/sofa-tracer/traceid-generated-rule/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-tracer/traceid-generated-rule/","summary":"","tags":null,"title":"TraceId 和 SpanId 生成规则","type":"projects","url":"/projects/sofa-tracer/traceid-generated-rule/","wordcount":0},{"author":null,"categories":null,"content":"By default, SOFARPC has integrated SOFATracer. Also, you can use other APM products, such as Skywalking, to achieve the corresponding functions. For details, see the relevant documents:\n SOFATracer Skywalking  If you want to disable the tracing ability of SOFARPC, you can do it in two ways.\nIf you are using rpc-sofa-boot-starter in SOFABoot or Spring Boot environment, you can add a configuration com.alipay.sofa.rpc.defaultTracer= in application.properties.\nIf you are using sofa-rpc-all directly, you can add the following code in the main method of your application before publish any SOFARPC service or create any SOFARPC reference.\nRpcConfigs.putValue(RpcOptions.DEFAULT_TRACER, \u0026amp;#34;\u0026amp;#34;); ","date":-62135596800,"description":"","dir":"projects/sofa-rpc/tracing-usage/","fuzzywordcount":100,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"5f944f87d827ae060fb0528f6715af97","permalink":"/en/projects/sofa-rpc/tracing-usage/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/en/projects/sofa-rpc/tracing-usage/","summary":"By default, SOFARPC has integrated SOFATracer. Also, you can use other APM products, such as Skywalking, to achieve the corresponding functions. For details, see the relevant documents:\n SOFATracer Skywalking  If you want to disable the tracing ability of SOFARPC, you can do it in two ways.\nIf you are using rpc-sofa-boot-starter in SOFABoot or Spring Boot environment, you can add a configuration com.alipay.sofa.rpc.defaultTracer= in application.properties.\nIf you are using sofa-rpc-all directly, you can add the following code in the main method of your application before publish any SOFARPC service or create any SOFARPC reference.","tags":null,"title":"Tracing","type":"projects","url":"/en/projects/sofa-rpc/tracing-usage/","wordcount":96},{"author":null,"categories":null,"content":"Use annotation for service publishing/reference In addition to the regular xml mode, it is also supported to publish and reference services with annotation in the SOFABoot environment. Similar to xml, we provide @SofaService and @SofaReference as well as @SofaServiceBinding and @SofaReferenceBinding annotation for multi-protocol.\nService publishing To publish an RPC service, you only need to add a @SofaService annotation on the bean to specify the interface and protocol type.\n@SofaService(interfaceType = AnnotationService.class, bindings = { @SofaServiceBinding(bindingType = \u0026amp;#34;bolt\u0026amp;#34;) }) @Component public class AnnotationServiceImpl implements AnnotationService { @Override public String sayAnnotation(String stirng) { return stirng; } } Service reference For a bean that needs to reference a remote service, you only need to add the Reference annotation on the attribute or method. This supports the bolt, dubbo, rest protocol.\n@Component public class AnnotationClientImpl { @SofaReference(interfaceType = AnnotationService.class, binding = @SofaReferenceBinding(bindingType = \u0026amp;#34;bolt\u0026amp;#34;)) private AnnotationService annotationService; public String sayClientAnnotation(String str) { String result = annotationService.sayAnnotation(str); return result; } } Use the demo You can test in the annotation subproject of the sample project.\n","date":-62135596800,"description":"","dir":"projects/sofa-rpc/programing-sofa-boot-annotation/","fuzzywordcount":200,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"2c3afd33cbce4f5aa2473716b3afe5a6","permalink":"/en/projects/sofa-rpc/programing-sofa-boot-annotation/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/en/projects/sofa-rpc/programing-sofa-boot-annotation/","summary":"Use annotation for service publishing/reference In addition to the regular xml mode, it is also supported to publish and reference services with annotation in the SOFABoot environment. Similar to xml, we provide @SofaService and @SofaReference as well as @SofaServiceBinding and @SofaReferenceBinding annotation for multi-protocol.\nService publishing To publish an RPC service, you only need to add a @SofaService annotation on the bean to specify the interface and protocol type.\n@SofaService(interfaceType = AnnotationService.","tags":null,"title":"Use annotation in SOFABoot","type":"projects","url":"/en/projects/sofa-rpc/programing-sofa-boot-annotation/","wordcount":171},{"author":null,"categories":null,"content":"Use client API In the design of SOFALookout client, API is decoupled from the implementation. If you need to log the events based on the SOFALookout API, you only need to add the lookout-api Maven dependency to the pom.xml file in your application/project. If the dependencies (such as client dependencies or SOFABoot (Spring Boot) Starter) do not exist, the API package uses NoopRegistry automatically, to replace all the locations of which the events are logged.\n1.Introduce API dependency \u0026amp;lt;dependency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;com.alipay.sofa.lookout\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;lookout-api\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;version\u0026amp;gt;${lookout.client.version}\u0026amp;lt;/version\u0026amp;gt; \u0026amp;lt;/dependency\u0026amp;gt; 2.About ID Compared to the traditional metrics library\u0026amp;rsquo;s single-dimensional information description, Lookout metrics provides tag capability that supports multi-dimensional descriptions. ID class, the unique identification of Lookout metrics, consists of name and tags.\nId basicId = registry.createId(\u0026amp;#34;rpc.provider.service.stats\u0026amp;#34;); id = basicId.withTag(\u0026amp;#34;service\u0026amp;#34;, \u0026amp;#34;com.alipay.demo.demoService\u0026amp;#34;) .withTag(\u0026amp;#34;method\u0026amp;#34;, \u0026amp;#34;sayHi\u0026amp;#34;) .withTag(\u0026amp;#34;protocol\u0026amp;#34;, \u0026amp;#34;tr\u0026amp;#34;) .withTag(\u0026amp;#34;alias\u0026amp;#34;, \u0026amp;#34;group1\u0026amp;#34;); The above is a simple example of ID introducing how to create ID and how to tag. Note that every time you tag, a new ID object is generated and returned.\n Do not proactively cache Id or the specific Metric object, since Lookout\u0026amp;rsquo;s Registry has already recorded. When using a same Id (with the same name and tags), the existing Id and its corresponding Metric object will be reused.\n 2.1 Priority tag (optional) PRIORITY enumeration level: HIGH, NORMAL, LOW.\nid.withTag(LookoutConstants.LOW_PRIORITY_TAG); It is recommended that you do not add this tag, the default level will be NORMAL. The level represents the collection interval (HIGH: 2s, NORMAL: 30s, LOW: 1min).\n2.2 About tags  General tags, such as local IP, data center, and other details, will be attached and no need to be specified separately. In a non-SOFABoot project, you must manually add tags to the client, especially the app tag which specifies the app name: app=appName. key contains only lowercase letters, numbers, and underscores. (especially the metrics at runtime, such as Counter, Timer, and DistributeSummary) The values ​​of a tag shall be within a stable finite set. Try to use as few tags as possible to prevent the number of metrics from exceeding the maximum limit. For example: In RPC service, the value of method\u0026amp;rsquo;s two tags shall be as few as possible. The counterexample is that each RPC call has a separate tag-value. Therefore, the overall principle is that there should be as few custom tags as possible, and the number of sets of the values ​​should be as small as possible. Specialized TAG name \u0026amp;ldquo;priority\u0026amp;rdquo; indicates priority. The tag key reserved by the system is _*_. Starting with an underscore and ending with an underscore (eg: …","date":-62135596800,"description":"","dir":"projects/sofa-lookout/use-guide-api/","fuzzywordcount":1000,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"76574f2435a3565fe1fc50831ff9ab0c","permalink":"/en/projects/sofa-lookout/use-guide-api/","publishdate":"0001-01-01T00:00:00Z","readingtime":5,"relpermalink":"/en/projects/sofa-lookout/use-guide-api/","summary":"Use client API In the design of SOFALookout client, API is decoupled from the implementation. If you need to log the events based on the SOFALookout API, you only need to add the lookout-api Maven dependency to the pom.xml file in your application/project. If the dependencies (such as client dependencies or SOFABoot (Spring Boot) Starter) do not exist, the API package uses NoopRegistry automatically, to replace all the locations of which the events are logged.","tags":null,"title":"Use API","type":"projects","url":"/en/projects/sofa-lookout/use-guide-api/","wordcount":911},{"author":null,"categories":null,"content":"SOFARPC Service publishing The process of service publishing involves three classes RegistryConfig, ServerConfig, ProviderConfig.\n RegistryConfig  RegistryConfig registryConfig = new RegistryConfig() .setProtocol(\u0026amp;#34;zookeeper\u0026amp;#34;) .setAddress(\u0026amp;#34;127.0.0.1:2181\u0026amp;#34;) RegistryConfig represents the registry center. As above, the address and port of the service registry center is 127.0.0.1:2181, and the protocol is Zookeeper.\nServerConfig  ServerConfig serverConfig = new ServerConfig() .setPort(8803) .setProtocol(\u0026amp;#34;bolt\u0026amp;#34;); ServerConfig represents the container where service runs. The above declares a server using the 8803 port and the bolt protocol.\nProviderConfig  ProviderConfig\u0026amp;lt;HelloWorldService\u0026amp;gt; providerConfig = new ProviderConfig\u0026amp;lt;HelloWorldService\u0026amp;gt;() .setInterfaceId(HelloWorldService.class.getName()) .setRef(new HelloWorldServiceImpl()) .setServer(serverConfig) .setRegistry(registryConfig); providerConfig.export(); ProviderConfig represents service publishing. The above declares the interface of the service, implements the server running the service, and eventually publishes the service by the export method.\nService reference Service reference involves two classes, namely RegistryConfig and ConsumerConfig.\nConsumerConfig\u0026amp;lt;HelloService\u0026amp;gt; consumerConfig = new ConsumerConfig\u0026amp;lt;HelloService\u0026amp;gt;() .setInterfaceId(HelloService.class.getName()) .setRegistry(registryConfig); HelloService helloService = consumerConfig.refer(); ConsumerConfig represents service reference. The above declares the interface and service registry center of the referenced service interface, and finally references the service by the refer method to get the proxy for the remote call of the service.\n","date":-62135596800,"description":"","dir":"projects/sofa-rpc/programing-rpc/","fuzzywordcount":200,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"ee6f74a4974c7abf72322cef108d5ef0","permalink":"/en/projects/sofa-rpc/programing-rpc/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/en/projects/sofa-rpc/programing-rpc/","summary":"SOFARPC Service publishing The process of service publishing involves three classes RegistryConfig, ServerConfig, ProviderConfig.\n RegistryConfig  RegistryConfig registryConfig = new RegistryConfig() .setProtocol(\u0026#34;zookeeper\u0026#34;) .setAddress(\u0026#34;127.0.0.1:2181\u0026#34;) RegistryConfig represents the registry center. As above, the address and port of the service registry center is 127.0.0.1:2181, and the protocol is Zookeeper.\nServerConfig  ServerConfig serverConfig = new ServerConfig() .setPort(8803) .setProtocol(\u0026#34;bolt\u0026#34;); ServerConfig represents the container where service runs. The above declares a server using the 8803 port and the bolt protocol.","tags":null,"title":"Use API in non-Spring environment","type":"projects","url":"/en/projects/sofa-rpc/programing-rpc/","wordcount":172},{"author":null,"categories":null,"content":"This topic mainly describes a JRaft-based distributed counter.\nScenario Save a distributed counter in a raft group of multiple nodes (servers). The counter can increment and be called while remaining consistent among all nodes. The counter can normally provide two external services when a minority of nodes fail:\n incrmentAndGet(delta): increments the value of delta and returns the incremented value. get(): gets the latest value.  Remote procedure calls (RPCs) JRaft adopts the Bolt communication framework at the underlayer, and defines two requests:\n IncrementAndGetRequest: used for incrementing the value  public class IncrementAndGetRequest implements Serializable { private static final long serialVersionUID = -5623664785560971849L; private long delta; public long getDelta() { return this.delta; } public void setDelta(long delta) { this.delta = delta; } }  GetValueRequest: used for getting the latest value  public class GetValueRequest implements Serializable { private static final long serialVersionUID = 9218253805003988802L; public GetValueRequest() { super(); } } ValueResponse responses include:\n success: indicates that the request was successful value: the latest value returned by a successful request errorMsg: the error message of a failed request redirect: indicates that a leader election occurred and the request needs to be sent to the new leader node  public class ValueResponse implements Serializable { private static final long serialVersionUID = -4220017686727146773L; private long value; private boolean success; /** * redirect peer id */ private String redirect; private String errorMsg; public String getErrorMsg() { return this.errorMsg; } public void setErrorMsg(String errorMsg) { this.errorMsg = errorMsg; } ...... }  IncrementAndAddClosure: used for receiving requests at the leader node IncrementAndGetRequest: used for handling callbacks of the request  public class IncrementAndAddClosure implements Closure { private CounterServer counterServer; private IncrementAndGetRequest request; private ValueResponse response; private Closure done; // The network response callback  public IncrementAndAddClosure(CounterServer counterServer, IncrementAndGetRequest request, ValueResponse response, Closure done) { super(); this.counterServer = counterServer; this.request = request; this.response = response; this.done = done; } @Override public void run(Status status) { // Return the response to the client  if (this.done != null) { done.run(status); } } public IncrementAndGetRequest getRequest() { return this.request; } public void setRequest(IncrementAndGetRequest request) { this.request = request; } public ValueResponse getResponse() { return this.response; } } Server CounterStateMachine First hold an initial value:\npublic class CounterStateMachine extends StateMachineAdapter { /** * counter value */ private AtomicLong value = new AtomicLong(0); Implement the core onApply(iterator) method, and apply the user request to the state machine:\n@Override …","date":-62135596800,"description":"","dir":"projects/sofa-jraft/counter-example/","fuzzywordcount":1900,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"f9c54b9f7883ccb1d7c259b7101f4674","permalink":"/en/projects/sofa-jraft/counter-example/","publishdate":"0001-01-01T00:00:00Z","readingtime":9,"relpermalink":"/en/projects/sofa-jraft/counter-example/","summary":"This topic mainly describes a JRaft-based distributed counter.\nScenario Save a distributed counter in a raft group of multiple nodes (servers). The counter can increment and be called while remaining consistent among all nodes. The counter can normally provide two external services when a minority of nodes fail:\n incrmentAndGet(delta): increments the value of delta and returns the incremented value. get(): gets the latest value.  Remote procedure calls (RPCs) JRaft adopts the Bolt communication framework at the underlayer, and defines two requests:","tags":null,"title":"Use case of a counter","type":"projects","url":"/en/projects/sofa-jraft/counter-example/","wordcount":1859},{"author":null,"categories":null,"content":"SOFABoot provides a class isolation framework SOFAArk, giving Spring Boot a class isolation ability to resolve class or package conflicts in the development. For detailed information, please refer to:SOFAArk\nTo use this feature in SOFABoot projects, we need only two steps: configure the sofa-ark-maven-plugin plugins for packaging and add sofa-ark-springboot-starter dependencies of the class isolation framework.\nConfigure Maven packaging plugins The Maven plugins - sofa-ark-maven-plugin are available on the Central Repository. Through simple configurations, a SpringBoot project can be wrapped into an executable Ark package in the standard format. The coordinate of sofa-ark-maven-plugin is:\n\u0026amp;lt;plugin\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;com.alipay.sofa\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;sofa-ark-maven-plugin\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;/plugin\u0026amp;gt; The configuration template is described as follows:\n\u0026amp;lt;build\u0026amp;gt; \u0026amp;lt;plugins\u0026amp;gt; \u0026amp;lt;plugin\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;com.alipay.sofa\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;sofa-ark-maven-plugin\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;executions\u0026amp;gt; \u0026amp;lt;execution\u0026amp;gt; \u0026amp;lt;id\u0026amp;gt;default-cli\u0026amp;lt;/id\u0026amp;gt; \u0026amp;lt;!--goal executed to generate executable-ark-jar --\u0026amp;gt; \u0026amp;lt;goals\u0026amp;gt; \u0026amp;lt;goal\u0026amp;gt;repackage\u0026amp;lt;/goal\u0026amp;gt; \u0026amp;lt;/goals\u0026amp;gt; \u0026amp;lt;configuration\u0026amp;gt; \u0026amp;lt;!--specify destination where executable-ark-jar will be saved, default saved to ${project.build.directory}--\u0026amp;gt; \u0026amp;lt;outputDirectory\u0026amp;gt;./target\u0026amp;lt;/outputDirectory\u0026amp;gt; \u0026amp;lt;!--default none--\u0026amp;gt; \u0026amp;lt;arkClassifier\u0026amp;gt;executable-ark\u0026amp;lt;/arkClassifier\u0026amp;gt; \u0026amp;lt;!-- all class exported by ark plugin would be resolved by ark biz in default, if configure denyImportClasses, then it would prefer to load them by ark biz itself --\u0026amp;gt; \u0026amp;lt;denyImportClasses\u0026amp;gt; \u0026amp;lt;class\u0026amp;gt;com.alipay.sofa.SampleClass1\u0026amp;lt;/class\u0026amp;gt; \u0026amp;lt;class\u0026amp;gt;com.alipay.sofa.SampleClass2\u0026amp;lt;/class\u0026amp;gt; \u0026amp;lt;/denyImportClasses\u0026amp;gt; \u0026amp;lt;!-- Corresponding to denyImportClasses, denyImportPackages is package-level --\u0026amp;gt; \u0026amp;lt;denyImportPackages\u0026amp;gt; \u0026amp;lt;package\u0026amp;gt;com.alipay.sofa\u0026amp;lt;/package\u0026amp;gt; \u0026amp;lt;package\u0026amp;gt;org.springframework\u0026amp;lt;/package\u0026amp;gt; \u0026amp;lt;/denyImportPackages\u0026amp;gt; \u0026amp;lt;!-- denyImportResources can prevent resource exported by ark plugin with accurate name to be resolved --\u0026amp;gt; \u0026amp;lt;denyImportResources\u0026amp;gt; \u0026amp;lt;resource\u0026amp;gt;META-INF/spring/test1.xml\u0026amp;lt;/resource\u0026amp;gt; \u0026amp;lt;resource\u0026amp;gt;META-INF/spring/test2.xml\u0026amp;lt;/resource\u0026amp;gt; \u0026amp;lt;/denyImportResources\u0026amp;gt; \u0026amp;lt;/configuration\u0026amp;gt; \u0026amp;lt;/execution\u0026amp;gt; \u0026amp;lt;/executions\u0026amp;gt; \u0026amp;lt;/plugin\u0026amp;gt; \u0026amp;lt;/plugins\u0026amp;gt; \u0026amp;lt;/build\u0026amp;gt; Description of plugin configuration:\n outputDirectory: Execute mvn package and then specify a directory to store the Ark package. The default directory is ${project. Build. Directory}. arkClassifier: Execute mvn docleoy, and then specify the coordinates of Maven repositories to locate the Ark package by setting the classfaulter value (the default is empty). We recommend that you configure this to give a different name from the ordinary Fat jar; denyImportClasses: By default, the application will first load …","date":-62135596800,"description":"","dir":"projects/sofa-boot/classloader-isolation/","fuzzywordcount":1200,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"e007416ab008c1dd4b886433dbf8af01","permalink":"/en/projects/sofa-boot/classloader-isolation/","publishdate":"0001-01-01T00:00:00Z","readingtime":6,"relpermalink":"/en/projects/sofa-boot/classloader-isolation/","summary":"SOFABoot provides a class isolation framework SOFAArk, giving Spring Boot a class isolation ability to resolve class or package conflicts in the development. For detailed information, please refer to:SOFAArk\nTo use this feature in SOFABoot projects, we need only two steps: configure the sofa-ark-maven-plugin plugins for packaging and add sofa-ark-springboot-starter dependencies of the class isolation framework.\nConfigure Maven packaging plugins The Maven plugins - sofa-ark-maven-plugin are available on the Central Repository.","tags":null,"title":"Use class isolation in SOFABoot","type":"projects","url":"/en/projects/sofa-boot/classloader-isolation/","wordcount":1129},{"author":null,"categories":null,"content":"This article describes how to quickly start installing and configuring Istio by using Docker Compose.\nSOFAMosn can not only support the standard Istio deployment mode, but also support the unilateral Inbound Sidecar or Outbound Sidecar deployment mode to meet the various requirements of users.\nPrerequisites  Docker Docker Compose  Install Istio   Download the latest release package.\n  Unzip the installation file and go to the decompressed path. The installation path contains:\n Sample application path samples/. The istioctl client executable file which is in the /bin path. The istioctl can be used to create routing rules and policies. Configuration file istion.VERSION.    Add the Istio\u0026amp;rsquo;s bin path to your system\u0026amp;rsquo;s PATH. For example, execute the following command in the MacOS or Linux operating system:\nexport PATH=$PWD/bin;$PATH   Pull up the Istio control plane container:\ndocker-compose -f install/zookeeper/istio.yaml up -d   Ensure that all Docker containers are running:\ndocker ps -a If the Istio pilot container terminates unexpectedly, you can run the istioctl context-create command and re-execute the previous command.\n  Configure istioctl to use the Istio API server:\nistioctl context-create -context istio-local --api-server   Deploy application Now, you can start deploying the SOFABoot demo program. The demo program includes a client and a server, which communicate with each other through Bolt protocol.\ndocker-compose up -f sofa-sample-spec.yaml up -d Uninstall Istio docker-compose up -f install/zookeeper/istio.yaml down ","date":-62135596800,"description":"","dir":"projects/sofa-mesh/pilot-setup-zookeeper-quick-start-docker/","fuzzywordcount":300,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"1de4868fa0e9c73d932343847864d7fb","permalink":"/en/projects/sofa-mesh/pilot-setup-zookeeper-quick-start-docker/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/en/projects/sofa-mesh/pilot-setup-zookeeper-quick-start-docker/","summary":"This article describes how to quickly start installing and configuring Istio by using Docker Compose.\nSOFAMosn can not only support the standard Istio deployment mode, but also support the unilateral Inbound Sidecar or Outbound Sidecar deployment mode to meet the various requirements of users.\nPrerequisites  Docker Docker Compose  Install Istio   Download the latest release package.\n  Unzip the installation file and go to the decompressed path.","tags":null,"title":"Use Docker to get started with Istio","type":"projects","url":"/en/projects/sofa-mesh/pilot-setup-zookeeper-quick-start-docker/","wordcount":217},{"author":null,"categories":null,"content":"Use API SOFABoot provides a set of programming APIs for RPC service publishing and reference. It is convenient to publish and reference RPC services directly in the code. Similar to Spring\u0026amp;rsquo;s ApplicationContextAware, in order to use the programming API, you first need to implement the ClientFactoryAware interface to get the programming component API:\npublic class ClientFactoryBean implements ClientFactoryAware { private ClientFactory clientFactory; @Override public void setClientFactory(ClientFactory clientFactory) { this.clientFactory = clientFactory; } } With DirectService as an example, see how to use the clientFactory to publish an RPC service through the programming API:\nServiceClient serviceClient = clientFactory.getClient(ServiceClient.class); ServiceParam serviceParam = new ServiceParam(); serviceParam.setInterfaceType(DirectService.class); serviceParam.setInstance(new DirectServiceImpl()); List\u0026amp;lt;BindingParam\u0026amp;gt; params = new ArrayList\u0026amp;lt;BindingParam\u0026amp;gt;(); BindingParam serviceBindingParam = new BoltBindingParam(); params.add(serviceBindingParam); serviceParam.setBindingParams(params); serviceClient.service (serviceParam); In the code above:\n First, get the ServiceClient object through the clientFactory. Then, construct the ServiceParam object, which contains the parameters required to publish the service, and use the setInstance method to set the object to be published as an RPC service, setInterfaceType to set the interface of the service. Finally, call the service method of ServiceClient to publish an RPC service.  The code that references the RPC service through the programming API is similar:\nReferenceClient referenceClient = clientFactory.getClient(ReferenceClient.class); ReferenceParam\u0026amp;lt;DirectService\u0026amp;gt; referenceParam = new ReferenceParam\u0026amp;lt;DirectService\u0026amp;gt;(); referenceParam.setInterfaceType(DirectService.class); BindingParam refBindingParam = new BoltBindingParam(); referenceParam.setBindingParam(refBindingParam); DirectService proxy = referenceClient.reference(referenceParam); proxy.sayDirect(\u0026amp;#34;hello\u0026amp;#34;); Likewise, to reference an RPC service, the code simply needs to get a ReferenceClient from the ClientFactory and then construct a ReferenceParam similar to publishing a service, next set up the service interface, and finally call the ReferenceClient\u0026amp;rsquo;s reference method.\n","date":-62135596800,"description":"","dir":"projects/sofa-rpc/programing-sofa-boot-api/","fuzzywordcount":300,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"2679388dc3459714f869d8f8a71739d7","permalink":"/en/projects/sofa-rpc/programing-sofa-boot-api/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/en/projects/sofa-rpc/programing-sofa-boot-api/","summary":"Use API SOFABoot provides a set of programming APIs for RPC service publishing and reference. It is convenient to publish and reference RPC services directly in the code. Similar to Spring\u0026rsquo;s ApplicationContextAware, in order to use the programming API, you first need to implement the ClientFactoryAware interface to get the programming component API:\npublic class ClientFactoryBean implements ClientFactoryAware { private ClientFactory clientFactory; @Override public void setClientFactory(ClientFactory clientFactory) { this.clientFactory = clientFactory; } } With DirectService as an example, see how to use the clientFactory to publish an RPC service through the programming API:","tags":null,"title":"Use dynamic API in SOFABoot","type":"projects","url":"/en/projects/sofa-rpc/programing-sofa-boot-api/","wordcount":255},{"author":null,"categories":null,"content":"Introduction This section is intended to demonstrate how to use Jarslink 2.0 to dynamically control the life cycle of the Biz package and to complete its installation, uninstallation, and query.\nDemo With reference to How to reform common Spring Boot applications, the reformed spring-boot-transform-sample project has integrated the Jarslink 2.0 component. By executing the Ark package that the application packaged and generated, you can dynamically install or uninstall the application during its running.\n  java -jar starts the spring-boot-transform-sample application Ark package.\n  telnet localhost 1234 enters the Jarslink 2.0 command interface, as follows:\n telnet localhost 1234 s Trying 127.0.0.1\u0026amp;hellip;\nConnected to localhost.\nEscape character is \u0026amp;lsquo;^]\u0026amp;rsquo;.\nsofa-ark\u0026amp;gt;\n   Execute the check -b query command, and the result is as follows:\n sofa-ark\u0026amp;gt;check -b\nBiz count=1\nbizName=\u0026amp;lsquo;spring-boot-transform-sample\u0026amp;rsquo;, bizVersion=\u0026amp;lsquo;1.0.0\u0026amp;rsquo;, bizState=\u0026amp;lsquo;activated\u0026amp;rsquo;\nsofa-ark\u0026amp;gt;\n   With reference to How to reform a common Spring Boot application, create any SOFABoot application of non-Web type, package it into a Biz package, and execute the install -b installation command, and the result is as follows:\n sofa-ark\u0026amp;gt;install -b file:///Users/qilong.zql/Desktop/test-ark-biz.jar\nBiz:\u0026amp;lsquo;test-biz:1.0.0\u0026amp;rsquo; is installing.\nsofa-ark\u0026amp;gt;\n   Execute the check -b query command again, and the result is as follows:\n sofa-ark\u0026amp;gt;check -b\nBiz count=2\nbizName=\u0026amp;lsquo;test-biz\u0026amp;rsquo;, bizVersion=\u0026amp;lsquo;1.0.0\u0026amp;rsquo;, bizState=\u0026amp;lsquo;activated\u0026amp;rsquo;\nbizName=\u0026amp;lsquo;spring-boot-transform-sample\u0026amp;rsquo;, bizVersion=\u0026amp;lsquo;1.0.0\u0026amp;rsquo;, bizState=\u0026amp;lsquo;activated\u0026amp;rsquo;\nsofa-ark\u0026amp;gt;\n   Execute the uninstall -b -n -v uninstallation command, and the result is as follows:\n sofa-ark\u0026amp;gt;uninstall -b -n test-biz -v 1.0.0\nUninstall biz:\u0026amp;lsquo;test-biz:1.0.0\u0026amp;rsquo; success.\nsofa-ark\u0026amp;gt;\n   Execute the check -b query command again, and the result is as follows:\n sofa-ark\u0026amp;gt;check -b\nBiz count=1\nbizName=\u0026amp;lsquo;spring-boot-transform-sample\u0026amp;rsquo;, bizVersion=\u0026amp;lsquo;1.0.0\u0026amp;rsquo;, bizState=\u0026amp;lsquo;activated\u0026amp;rsquo;\nsofa-ark\u0026amp;gt;\n For use of more commands, refer to Interactive Commands.\n  ","date":-62135596800,"description":"","dir":"projects/sofa-boot/sofa-jarslink-jarslink-deploy-demo/","fuzzywordcount":300,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"749f6debe73b73b4882477779008bb99","permalink":"/en/projects/sofa-boot/sofa-jarslink-jarslink-deploy-demo/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/en/projects/sofa-boot/sofa-jarslink-jarslink-deploy-demo/","summary":"Introduction This section is intended to demonstrate how to use Jarslink 2.0 to dynamically control the life cycle of the Biz package and to complete its installation, uninstallation, and query.\nDemo With reference to How to reform common Spring Boot applications, the reformed spring-boot-transform-sample project has integrated the Jarslink 2.0 component. By executing the Ark package that the application packaged and generated, you can dynamically install or uninstall the application during its running.","tags":null,"title":"Use Jarslink for multi-application dynamic deployment","type":"projects","url":"/en/projects/sofa-boot/sofa-jarslink-jarslink-deploy-demo/","wordcount":248},{"author":null,"categories":null,"content":"This article introduces how to use MOSN to build the Service Mesh development environment based on SOFAMesh framework, and verify some basic capabilities of MOSN, such as routing and load balancing. This article includes the following content:\n Relationship between MOSN and SOFAMesh Preparations Deploy SOFAMesh with source codes Bookinfo experiment  Relationship between MOSN and SOFAMesh As mentioned in MOSN introduction, MOSN is a Service Mesh data plane agent developed with Golang, and SOFAMesh is a large-scale implementation solution for Service Mesh, which is improved and extended based on Istio. Serving as a critical component of SOFAMesh, MOSN is used to complete data plane forwarding.\nThe following figure shows the workflow chart of MOSN based on the overall SOFAMesh framework.\nNote: Currently, MOSN cannot be directly used in the native Istio.\nPreparations This guide supposes you are using macOS. For other operating systems, you can install the corresponding software.\n1. Install HyperKit Install docker-for-mac, and then install driver.\n1.1 Install Docker Download the Docker software package to install it or run the following command to install it:\n$ brew cask install docker 1.2 Install driver $ curl -LO https://storage.googleapis.com/minikube/releases/latest/docker-machine-driver-hyperkit \\ \u0026amp;amp;\u0026amp;amp; chmod +x docker-machine-driver-hyperkit \\ \u0026amp;amp;\u0026amp;amp; sudo mv docker-machine-driver-hyperkit /usr/local/bin/ \\ \u0026amp;amp;\u0026amp;amp; sudo chown root:wheel /usr/local/bin/docker-machine-driver-hyperkit \\ \u0026amp;amp;\u0026amp;amp; sudo chmod u+s /usr/local/bin/docker-machine-driver-hyperkit 2. Install Minikube (or purchase the commercial version of k8s cluster) It is recommended to use Minikube V0.28 or later, see https://github.com/kubernetes/minikube.\n$ brew cask install minikube 3. Start Minikube Note that Pilot requires at least 2G memory, so you can add resources to Minikube by adding parameters at startup. If your machine has insufficient resources, it is recommended to use the commercial version of the k8s cluster.\n$ minikube start --memory=8192 --cpus=4 --kubernetes-version=v1.15.0 --vm-driver=hyperkit Create Istio namespace\n$ kubectl create namespace istio-system 4. Install kubectl command line tool kubectl is a command line interface used to run commands for k8s cluster. For how to install it, see https://kubernetes.io/docs/tasks/tools/install-kubectl.\n$ brew install kubernetes-cli 5. Install Helm Helm is a package management tool for k8s. For how to install it, see https://docs.helm.sh/using_helm/#installing-helm.\n$ brew install kubernetes-helm Deploy SOFAMesh with source codes 1. Download SOFAMesh source codes $ git clone git@github.com:sofastack/sofa-mesh.git 2. Use Helm to install SOFAMesh You should change directory to sofa-mesh source code, and then use helm template to install isito crd and istio\n``` $ cd sofa-mesh $ helm template install/kubernetes/helm/istio-init --name istio-init --namespace istio-system | kubectl apply -f - $ helm template …","date":-62135596800,"description":"","dir":"projects/mosn/quick-start-run-with-sofamesh/","fuzzywordcount":1100,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"9c6461e92180417d3a8ec4f3f2c723fe","permalink":"/en/projects/mosn/quick-start-run-with-sofamesh/","publishdate":"0001-01-01T00:00:00Z","readingtime":6,"relpermalink":"/en/projects/mosn/quick-start-run-with-sofamesh/","summary":"This article introduces how to use MOSN to build the Service Mesh development environment based on SOFAMesh framework, and verify some basic capabilities of MOSN, such as routing and load balancing. This article includes the following content:\n Relationship between MOSN and SOFAMesh Preparations Deploy SOFAMesh with source codes Bookinfo experiment  Relationship between MOSN and SOFAMesh As mentioned in MOSN introduction, MOSN is a Service Mesh data plane agent developed with Golang, and SOFAMesh is a large-scale implementation solution for Service Mesh, which is improved and extended based on Istio.","tags":null,"title":"Use MOSN to build Service Mesh platform","type":"projects","url":"/en/projects/mosn/quick-start-run-with-sofamesh/","wordcount":1078},{"author":null,"categories":null,"content":"This article introduces how to use MOSN to build the Service Mesh development environment based on SOFAMesh framework, and verify some basic capabilities of MOSN, such as routing and load balancing. This article includes the following content:\n Relationship between MOSN and SOFAMesh Preparations Deploy SOFAMesh with source codes Bookinfo experiment  Relationship between MOSN and SOFAMesh As mentioned in MOSN introduction, MOSN is a Service Mesh data plane agent developed with Golang, and SOFAMesh is a large-scale implementation solution for Service Mesh, which is improved and extended based on Istio. Serving as a critical component of SOFAMesh, MOSN is used to complete data plane forwarding.\nThe following figure shows the workflow chart of MOSN based on the overall SOFAMesh framework.\nNote: Currently, MOSN cannot be directly used in the native Istio.\nPreparations This guide supposes you are using macOS. For other operating systems, you can install the corresponding software.\n1. Install HyperKit Install docker-for-mac, and then install driver.\n1.1 Install Docker Download the Docker software package to install it or run the following command to install it:\n$ brew cask install docker 1.2 Install driver $ curl -LO https://storage.googleapis.com/minikube/releases/latest/docker-machine-driver-hyperkit \\ \u0026amp;amp;\u0026amp;amp; chmod +x docker-machine-driver-hyperkit \\ \u0026amp;amp;\u0026amp;amp; sudo mv docker-machine-driver-hyperkit /usr/local/bin/ \\ \u0026amp;amp;\u0026amp;amp; sudo chown root:wheel /usr/local/bin/docker-machine-driver-hyperkit \\ \u0026amp;amp;\u0026amp;amp; sudo chmod u+s /usr/local/bin/docker-machine-driver-hyperkit 2. Install Minikube (or purchase the commercial version of k8s cluster) It is recommended to use Minikube V0.28 or later, see https://github.com/kubernetes/minikube.\n$ brew cask install minikube 3. Start Minikube Note that Pilot requires at least 2G memory, so you can add resources to Minikube by adding parameters at startup. If your machine has insufficient resources, it is recommended to use the commercial version of the k8s cluster.\n$ minikube start --memory=8192 --cpus=4 --kubernetes-version=v1.15.0 --vm-driver=hyperkit Create Istio namespace\n$ kubectl create namespace istio-system 4. Install kubectl command line tool kubectl is a command line interface used to run commands for k8s cluster. For how to install it, see https://kubernetes.io/docs/tasks/tools/install-kubectl.\n$ brew install kubernetes-cli 5. Install Helm Helm is a package management tool for k8s. For how to install it, see https://docs.helm.sh/using_helm/#installing-helm.\n$ brew install kubernetes-helm Deploy SOFAMesh with source codes 1. Download SOFAMesh source codes $ git clone git@github.com:sofastack/sofa-mesh.git 2. Use Helm to install SOFAMesh You should change directory to sofa-mesh source code, and then use helm template to install isito crd and istio\n``` $ cd sofa-mesh $ helm template install/kubernetes/helm/istio-init --name istio-init --namespace istio-system | kubectl apply -f - $ helm template …","date":-62135596800,"description":"","dir":"projects/occlum/quick-start-run-with-sofamesh/","fuzzywordcount":1100,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"7353dfd1d668eb3e2a1c8cd26acca372","permalink":"/en/projects/occlum/quick-start-run-with-sofamesh/","publishdate":"0001-01-01T00:00:00Z","readingtime":6,"relpermalink":"/en/projects/occlum/quick-start-run-with-sofamesh/","summary":"This article introduces how to use MOSN to build the Service Mesh development environment based on SOFAMesh framework, and verify some basic capabilities of MOSN, such as routing and load balancing. This article includes the following content:\n Relationship between MOSN and SOFAMesh Preparations Deploy SOFAMesh with source codes Bookinfo experiment  Relationship between MOSN and SOFAMesh As mentioned in MOSN introduction, MOSN is a Service Mesh data plane agent developed with Golang, and SOFAMesh is a large-scale implementation solution for Service Mesh, which is improved and extended based on Istio.","tags":null,"title":"Use MOSN to build Service Mesh platform","type":"projects","url":"/en/projects/occlum/quick-start-run-with-sofamesh/","wordcount":1078},{"author":null,"categories":null,"content":"Use Registry Different Registry integrations provide different ways to access Metrics.\n1. LookoutRegistry Provides the ability to count metrics by a time window. It is divided into two modes: “active” and “passive”. The passive mode is off currently.\n(1) Active mode\n You can specify the IP address of the remote agent through [Client Configuration], that is, check when start reporting, and regularly report data.\n(2) Passive mode\n This mode can be activated through [Client Configuration], and HTTP service is provided on port 19399.\n2. Connect to Prometheus The data of SOFALookout can be shared with Prometheus. In order to connect to Prometheus, you first need to add dependencies to your project:\n\u0026amp;lt;dependency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;com.alipay.sofa.lookout\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;lookout-sofa-boot-starter\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;/dependency\u0026amp;gt; \u0026amp;lt;dependency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;com.alipay.sofa.lookout\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;lookout-reg-prometheus\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;version\u0026amp;gt;${lookout.client.version}\u0026amp;lt;/version\u0026amp;gt; \u0026amp;lt;/dependency\u0026amp;gt; After adding the dependencies, launch the application, and you can see the data by visiting http://localhost:9494, where 9494 is the default port, you can configure com.alipay.sofa.lookout.prometheus-exporter-server-port in application.properties to change the port.\nOnce you have the URL to access the data, you can edit a prometheus.yml to grab the project information. Assuming that the local IP address is 10.15.232.20, you can configure prometheus.yml as follows:\nscrape_configs: - job_name: \u0026amp;#39;lookout-client\u0026amp;#39; scrape_interval: 5s static_configs: - targets: [\u0026amp;#39;10.15.232.20:9494\u0026amp;#39;] With the above configuration file, you can start Prometheus locally via Docker:\ndocker run -d -p 9090:9090 -v $PWD/prometheus.yml:/etc/prometheus/prometheus.yml --name prom prom/prometheus:master Then visit http://localhost:9090 through the browser, and you can query the corresponding Metrics through PromQL.\nAn example of connecting to Prometheus is also available in SOFALookout, so you can go and see it as a reference.\n3. Connect to SpringBoot actuator In addition to Prometheus, SOFALookout can be integrated with the Actuator of SpringBoot 1.x by adding the following dependency:\n\u0026amp;lt;dependency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;org.springframework.boot\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;spring-boot-starter-actuator\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;/dependency\u0026amp;gt; Then, start and visit http://localhost:8080/metrics to see the data of events logged by the SOFALookout API.\n","date":-62135596800,"description":"","dir":"projects/sofa-lookout/use-guide-registry/","fuzzywordcount":300,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"3c51ba6519cee542b459a170dabcf32b","permalink":"/en/projects/sofa-lookout/use-guide-registry/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/en/projects/sofa-lookout/use-guide-registry/","summary":"Use Registry Different Registry integrations provide different ways to access Metrics.\n1. LookoutRegistry Provides the ability to count metrics by a time window. It is divided into two modes: “active” and “passive”. The passive mode is off currently.\n(1) Active mode\n You can specify the IP address of the remote agent through [Client Configuration], that is, check when start reporting, and regularly report data.\n(2) Passive mode\n This mode can be activated through [Client Configuration], and HTTP service is provided on port 19399.","tags":null,"title":"Use Registry","type":"projects","url":"/en/projects/sofa-lookout/use-guide-registry/","wordcount":297},{"author":null,"categories":null,"content":"XML mode The way to publish and reference services in xml mode is as follows. sofa:service represents publishing service, and sofa:reference represents referencing service. sofa:binding indicates the protocol for service publishing or reference.\n\u0026amp;lt;bean id=\u0026amp;#34;personServiceImpl\u0026amp;#34; class=\u0026amp;#34;com.alipay.sofa.boot.examples.demo.rpc.bean.PersonServiceImpl\u0026amp;#34;/\u0026amp;gt; \u0026amp;lt;sofa:service ref=\u0026amp;#34;personServiceImpl\u0026amp;#34; interface=\u0026amp;#34;com.alipay.sofa.boot.examples.demo.rpc.bean.PersonService\u0026amp;#34;\u0026amp;gt; \u0026amp;lt;sofa:binding.bolt/\u0026amp;gt; \u0026amp;lt;/sofa:service\u0026amp;gt; A service can also be published through multiple protocols, as follows:\n\u0026amp;lt;sofa:service ref=\u0026amp;#34;personServiceImpl\u0026amp;#34; interface=\u0026amp;#34;com.alipay.sofa.boot.examples.demo.rpc.bean.PersonService\u0026amp;#34;\u0026amp;gt; \u0026amp;lt;sofa:binding.bolt/\u0026amp;gt; \u0026amp;lt;sofa:binding.rest/\u0026amp;gt; \u0026amp;lt;sofa:binding.dubbo/\u0026amp;gt; \u0026amp;lt;/sofa:service\u0026amp;gt; Service reference\n\u0026amp;lt;sofa:reference id=\u0026amp;#34;personReferenceBolt\u0026amp;#34; interface=\u0026amp;#34;com.alipay.sofa.boot.examples.demo.rpc.bean.PersonService\u0026amp;#34;\u0026amp;gt; \u0026amp;lt;sofa:binding.bolt/\u0026amp;gt; \u0026amp;lt;/sofa:reference\u0026amp;gt; A service can also be referenced through other protocols:\n\u0026amp;lt;sofa:reference id=\u0026amp;#34;personReferenceRest\u0026amp;#34; interface=\u0026amp;#34;com.alipay.sofa.boot.examples.demo.rpc.bean.PersonService\u0026amp;#34;\u0026amp;gt; \u0026amp;lt;sofa:binding.rest/\u0026amp;gt; \u0026amp;lt;/sofa:reference\u0026amp;gt; ","date":-62135596800,"description":"","dir":"projects/sofa-rpc/programing-sofa-boot-xml/","fuzzywordcount":100,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"9192a93415bee3070a9be62c0f693949","permalink":"/en/projects/sofa-rpc/programing-sofa-boot-xml/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/en/projects/sofa-rpc/programing-sofa-boot-xml/","summary":"XML mode The way to publish and reference services in xml mode is as follows. sofa:service represents publishing service, and sofa:reference represents referencing service. sofa:binding indicates the protocol for service publishing or reference.\n\u0026lt;bean id=\u0026#34;personServiceImpl\u0026#34; class=\u0026#34;com.alipay.sofa.boot.examples.demo.rpc.bean.PersonServiceImpl\u0026#34;/\u0026gt; \u0026lt;sofa:service ref=\u0026#34;personServiceImpl\u0026#34; interface=\u0026#34;com.alipay.sofa.boot.examples.demo.rpc.bean.PersonService\u0026#34;\u0026gt; \u0026lt;sofa:binding.bolt/\u0026gt; \u0026lt;/sofa:service\u0026gt; A service can also be published through multiple protocols, as follows:\n\u0026lt;sofa:service ref=\u0026#34;personServiceImpl\u0026#34; interface=\u0026#34;com.alipay.sofa.boot.examples.demo.rpc.bean.PersonService\u0026#34;\u0026gt; \u0026lt;sofa:binding.bolt/\u0026gt; \u0026lt;sofa:binding.rest/\u0026gt; \u0026lt;sofa:binding.dubbo/\u0026gt; \u0026lt;/sofa:service\u0026gt; Service reference\n\u0026lt;sofa:reference id=\u0026#34;personReferenceBolt\u0026#34; interface=\u0026#34;com.alipay.sofa.boot.examples.demo.rpc.bean.PersonService\u0026#34;\u0026gt; \u0026lt;sofa:binding.bolt/\u0026gt; \u0026lt;/sofa:reference\u0026gt; A service can also be referenced through other protocols:","tags":null,"title":"Use XML in SOFABoot","type":"projects","url":"/en/projects/sofa-rpc/programing-sofa-boot-xml/","wordcount":80},{"author":null,"categories":null,"content":"User guide Maven coordinator \u0026amp;lt;dependency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;com.alipay.sofa\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;bolt\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;version\u0026amp;gt;${version}\u0026amp;lt;/version\u0026amp;gt; \u0026amp;lt;/dependency\u0026amp;gt;  Check release notes for the version information.\n 1. Basic functions 1.1. Implement user request processor (UserProcessor) We provide two types of user request processors: SyncUserProcessor and AsyncUserProcessor. The difference between them is that the former returns the processing result in the form of a return value in the current processor thread, while the latter has an AsyncContext stub and can call the sendResponsemethod in the current thread or an asynchronous thread to return the processing result. For examples, refer to the following two types:\n Synchronous request processor Asynchronous request processor  1.2 Implement connection event processor (ConnectionEventProcessor) We provide two connection event processors: ConnectionEventType.CONNECT and ConnectionEventType.CLOSE. You can create your own event processors and register them with the client or the server. The client side and server side can each monitor both of their connection and disconnection events.\n Process connection event Process disconnection event  1.3 Client side and server side initialization (RpcClient, RpcServer) We have provided an RpcClient and RpcServer. They can be used after going through a simple initialization of necessary functions, or after switching on the functions. The most simple example is as follows:\n Client side initialization example Server side initialization example  1.4 Basic communication model We have provided four types of communication models:\n1. Oneway calls\nThe current thread initiates a call that is not interested in the call result and is not subject to timeout control. As long as the request is sent out, the call is completed. Note: Oneway calls are not guaranteed to succeed, and the initiator of the call has no way of knowing its result. For that reason, these calls are usually used in scenarios that can be retried or that have fixed-time notifications. Network problems or machine malfunctions during the call process may result in failure. This kind of call should only be used in business scenarios that accept such exceptions. For more information, see Example.\n2. Sync calls\nThe current thread initiates a call that only completes if it receives a result within the set timeout time. If a result is not received within the timeout time, it will generate a timeout error. This is the most commonly used call type. Ensure that the timeout time is set reasonably in accordance with the opposing terminal\u0026amp;rsquo;s processing capacity. For more information, see Example.\n3. Future calls\nThe current thread initiates a call and can then move onto executing the next call after getting an RpcResponseFuture object. The get() method of the RpcResponseFuture object can be used at any time to get the result. If the response has already been returned, the result …","date":-62135596800,"description":"","dir":"projects/sofa-bolt/sofa-bolt-handbook/","fuzzywordcount":2000,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"2a0a2e3c7749dbcdceea064f6f850e33","permalink":"/en/projects/sofa-bolt/sofa-bolt-handbook/","publishdate":"0001-01-01T00:00:00Z","readingtime":10,"relpermalink":"/en/projects/sofa-bolt/sofa-bolt-handbook/","summary":"User guide Maven coordinator \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.alipay.sofa\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;bolt\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt;  Check release notes for the version information.\n 1. Basic functions 1.1. Implement user request processor (UserProcessor) We provide two types of user request processors: SyncUserProcessor and AsyncUserProcessor. The difference between them is that the former returns the processing result in the form of a return value in the current processor thread, while the latter has an AsyncContext stub and can call the sendResponsemethod in the current thread or an asynchronous thread to return the processing result.","tags":null,"title":"User guide","type":"projects","url":"/en/projects/sofa-bolt/sofa-bolt-handbook/","wordcount":1988},{"author":null,"categories":null,"content":"﻿## Version release\nVersion No. Major, minor, and revision version numbers are used. For example 2.0.0.\nRefer to: http://semver.org/lang/zh-CN/.\n Major version number: All versions within a major version number must be compatible with each other. They are not necessarily compatible with other major versions. However, it is best to be downward compatible. Minor version number: represents feature enhancement. The larger the version number, more features it has. Revision version number: represents the BugFix version. Such versions are only used for bug fixing. The larger the version number, the more stable the application.  Version maintenance At most two versions can be maintained simultaneously.\nFor example, if the current major version is 2.2.0, the BugFix version 2.1.x will be maintained and bugs in version 2.0.x will no longer be fixed and a version upgrade is recommended.\nRelease process  Daily development uses the SNAPSHOT version, such as 2.0.0-SNAPSHOT. When the modified version is officially released, the version number is revised to a formal version, such as 2.0.0. After release, the next version is pulled up, for example, 2.1.0-SNAPSHOT.  ","date":-62135596800,"description":"","dir":"projects/sofa-boot/sofa-jarslink-version/","fuzzywordcount":200,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"b82f2d74eff3937e10f15b13cb503751","permalink":"/en/projects/sofa-boot/sofa-jarslink-version/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/en/projects/sofa-boot/sofa-jarslink-version/","summary":"﻿## Version release\nVersion No. Major, minor, and revision version numbers are used. For example 2.0.0.\nRefer to: http://semver.org/lang/zh-CN/.\n Major version number: All versions within a major version number must be compatible with each other. They are not necessarily compatible with other major versions. However, it is best to be downward compatible. Minor version number: represents feature enhancement. The larger the version number, more features it has. Revision version number: represents the BugFix version.","tags":null,"title":"Version release","type":"projects","url":"/en/projects/sofa-boot/sofa-jarslink-version/","wordcount":175},{"author":null,"categories":null,"content":"Version number The system adopts a three-digit versioning scheme. The three digits respectively are major version number, minor version number, and revision number, for example: 5.1.2.\nFor more information, see the http://semver.org/lang/zh-CN/.\n Major version number: All versions in the major version number must be compatible with each other. It is not necessary to be fully compatible with other major version numbers, but it is best to have backward compatibility. Minor version number: Represents new feature enhancements. The larger the version number, the richer the feature. Revision number: Represents the BugFix version. The revision number is only for bug fixes. The larger the version number, the more stable it is.  Version maintenance You can maintain up to two versions at the same time.\nFor example, the current trunk is 5.3.0, then the bugfix branch of 5.2.x will be maintained. When any bugs arise in 5.1.x, users are prompted to upgrade the system.\nRelease process  The daily development branch uses the SNAPSHOT version, for example: 5.3.0-SNAPSHOT. When it comes to official release, you can modify the version to official version, for example: 5.3.0. Pull up the next version after release, for example: 5.3.1-SNAPSHOT.  ","date":-62135596800,"description":"","dir":"projects/sofa-rpc/version-release/","fuzzywordcount":200,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"604f113607e6815757f4d1907190c13c","permalink":"/en/projects/sofa-rpc/version-release/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/en/projects/sofa-rpc/version-release/","summary":"Version number The system adopts a three-digit versioning scheme. The three digits respectively are major version number, minor version number, and revision number, for example: 5.1.2.\nFor more information, see the http://semver.org/lang/zh-CN/.\n Major version number: All versions in the major version number must be compatible with each other. It is not necessary to be fully compatible with other major version numbers, but it is best to have backward compatibility. Minor version number: Represents new feature enhancements.","tags":null,"title":"Version release","type":"projects","url":"/en/projects/sofa-rpc/version-release/","wordcount":191},{"author":null,"categories":null,"content":"Version number Major, minor, and revision version numbers are used. For example, 1.0.0.\nFor more information, see https://semver.org/\n Major version number: All versions with the same major version number must be compatible with each other. They are not necessarily fully compatible with other major versions. However, it is best to be downward compatible. Minor version number: represents feature enhancement. The larger the version number, the more features it has. Revision version number: represents the BugFix version. Such versions are only used for bug fixing. The larger the version number, the more stable the application.  Version maintenance Up to two versions can be maintained simultaneously.\nFor example, if the current version of the master branch code is 1.2.0, the BugFix branch 1.1.x will be maintained, but bugs in branch 1.0.x will no longer be fixed. In this case, a version upgrade is recommended.\nRelease process  The develop branches use SNAPSHOT versions, for example, 1.0.0-SNAPSHOT. Upon formal release, the snapshot version is modified to the formal version, for example 1.0.0. After the formal release, the next version is pulled, for example, 1.0.1-SNAPSHOT.  ","date":-62135596800,"description":"","dir":"projects/sofa-dashboard/version-rule/","fuzzywordcount":200,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"a2093bdf478bdff0e15a2de70e522d03","permalink":"/en/projects/sofa-dashboard/version-rule/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/en/projects/sofa-dashboard/version-rule/","summary":"Version number Major, minor, and revision version numbers are used. For example, 1.0.0.\nFor more information, see https://semver.org/\n Major version number: All versions with the same major version number must be compatible with each other. They are not necessarily fully compatible with other major versions. However, it is best to be downward compatible. Minor version number: represents feature enhancement. The larger the version number, the more features it has. Revision version number: represents the BugFix version.","tags":null,"title":"Version rules","type":"projects","url":"/en/projects/sofa-dashboard/version-rule/","wordcount":180},{"author":null,"categories":null,"content":"Version number SOFARegistry uses a three-digit version number in the form of major, minor, and patch. For example, 5.2.0.\nFor more information, see https://semver.org/.\n Major version number: All versions with the same major version number must be compatible with each other. They are not necessarily fully compatible with other major versions. However, it is best to be downward compatible. Minor version number: represents feature enhancement. The larger the version number, the more features it has. Patch number: represents the BugFix version. Such versions are only used for bug fixing. The larger the version number, the more stable the application.  Version maintenance Up to two versions can be maintained simultaneously.\nFor example, if the current version of the master branch code is 5.4.0, the BugFix branch of version 5.3.x will be maintained, but bugs in branch 5.2.x will no longer be fixed. Therefore, a version upgrade for 5.2.x is recommended.\nRelease process  The develop branches use SNAPSHOT versions, for example, 5.3.0-SNAPSHOT. Upon formal release, SNAPSHOT is replaced with a formal version number, for example 5.3.0. After the formal release, the next version is pulled, for example, 5.3.1-SNAPSHOT.  ","date":-62135596800,"description":"","dir":"projects/sofa-registry/release-standard/","fuzzywordcount":200,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"71aad9cbc42aba3d9f875ae9169cf005","permalink":"/en/projects/sofa-registry/release-standard/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/en/projects/sofa-registry/release-standard/","summary":"Version number SOFARegistry uses a three-digit version number in the form of major, minor, and patch. For example, 5.2.0.\nFor more information, see https://semver.org/.\n Major version number: All versions with the same major version number must be compatible with each other. They are not necessarily fully compatible with other major versions. However, it is best to be downward compatible. Minor version number: represents feature enhancement. The larger the version number, the more features it has.","tags":null,"title":"Version rules","type":"projects","url":"/en/projects/sofa-registry/release-standard/","wordcount":186},{"author":null,"categories":null,"content":"﻿With SOFABoot, we can directly view the version of SOFA middleware and other detailed information in the browser.\nIntroducing SOFABoot Infra Dependency To view the version information of the SOFA middleware directly in the browser in SOFABoot, all you need to do is add the following to the Maven dependency:\n\u0026amp;lt;dependency\u0026amp;gt; \u0026amp;lt;groupId\u0026amp;gt;com.alipay.sofa\u0026amp;lt;/groupId\u0026amp;gt; \u0026amp;lt;artifactId\u0026amp;gt;infra-sofa-boot-starter\u0026amp;lt;/artifactId\u0026amp;gt; \u0026amp;lt;/dependency\u0026amp;gt; Version Information Viewing After an application started successfully, you can visit http://localhost:8080/sofaboot/versions in the browser to view the version information of the SOFA middleware, the response such as:\n[ { GroupId: \u0026amp;#34;com.alipay.sofa\u0026amp;#34;, Doc-Url: \u0026amp;#34;https://github.com/sofastack/sofa-boot\u0026amp;#34;, ArtifactId: \u0026amp;#34;infra-sofa-boot-starter\u0026amp;#34;, Build-Time: \u0026amp;#34;2018-04-05T20:55:22+0800\u0026amp;#34;, Commit-Time: \u0026amp;#34;2018-04-05T20:54:26+0800\u0026amp;#34;, Commit-Id: \u0026amp;#34;049bf890bb468aafe6a3e07b77df45c831076996\u0026amp;#34;, Version: \u0026amp;#34;2.4.0\u0026amp;#34; } ] ** Note: In SOFABoot 3.x, the endpoint path has been changed from sofaboot/versions to actuator/versions**.\n","date":-62135596800,"description":"","dir":"projects/sofa-boot/view-versions/","fuzzywordcount":200,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"c6b6d22e9038aa1f5e4ce74449ba1cda","permalink":"/en/projects/sofa-boot/view-versions/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/en/projects/sofa-boot/view-versions/","summary":"﻿With SOFABoot, we can directly view the version of SOFA middleware and other detailed information in the browser.\nIntroducing SOFABoot Infra Dependency To view the version information of the SOFA middleware directly in the browser in SOFABoot, all you need to do is add the following to the Maven dependency:\n\u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.alipay.sofa\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;infra-sofa-boot-starter\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; Version Information Viewing After an application started successfully, you can visit http://localhost:8080/sofaboot/versions in the browser to view the version information of the SOFA middleware, the response such as:","tags":null,"title":"View version","type":"projects","url":"/en/projects/sofa-boot/view-versions/","wordcount":115},{"author":null,"categories":null,"content":"The warm-up weight feature allows the client machine to distribute traffic based on the corresponding weight of the server. This feature is also often used in the scenario where a few machines within a cluster are being started. The server machines can be warmed up in a short time with the traffic weight function, and then continue to receive the normal traffic.\nThe operating mechanism is as follows:   When the server service starts, it pushes its own warm-up duration, weight during warm-up, and normal weight after warm-up to the Service Registry. As shown above, Service B points to Service Registry.\n  When referencing service, the client obtains the warm-up weight information of each service instance. As shown above, Service Registry points to client.\n  When calling service, the client distributes the traffic according to the warm-up weight of the address where the service is located. As shown above, the client points to Service A and Service B. Service A has completed warm-up, and its weight is 100 by default. Service B is in the warm-up period, and its weight is 10. Therefore, their traffic is 100%110 and 10%110 respectively.\n  This feature is used as follows:\nProviderConfig\u0026amp;lt;HelloWordService\u0026amp;gt; providerConfig = new ProviderConfig\u0026amp;lt;HelloWordService\u0026amp;gt;() .setWeight(100) .setParameter(ProviderInfoAttrs.ATTR_WARMUP_WEIGHT,\u0026amp;#34;10\u0026amp;#34;) .setParameter(ProviderInfoAttrs.ATTR_WARM_UP_END_TIME, \u0026amp;#34;12000\u0026amp;#34;); As above, the warm-up duration of the service is 12s, the weight is 10 during warm-up, and the normal weight after warm-up is 100. If the service is published on two machines, such as machine A and B, and the machine A is in the warm-up period with the above configuration, while B has already completed warm-up, and the normal weight is 200, then when the client calls the service, the proportion of traffic distribution is 10:200. After the machine A is warmed up, the traffic distribution ratio is 100:200.\nIn SOFABoot, the warm-up duration and the weight during and after warm-up can be configured as follows:\n\u0026amp;lt;sofa:reference id=\u0026amp;#34;sampleRestFacadeReferenceBolt\u0026amp;#34; interface=\u0026amp;#34;com.alipay.sofa.endpoint.facade.SampleFacade\u0026amp;#34;\u0026amp;gt; \u0026amp;lt;sofa:binding.bolt\u0026amp;gt; \u0026amp;lt;sofa:global-attrs weight=\u0026amp;#34;100\u0026amp;#34; warm-up-time=\u0026amp;#34;10000\u0026amp;#34; warm-up-weight=\u0026amp;#34;1000\u0026amp;#34;/\u0026amp;gt; \u0026amp;lt;/sofa:binding.bolt\u0026amp;gt; \u0026amp;lt;/sofa:reference\u0026amp;gt; ","date":-62135596800,"description":"","dir":"projects/sofa-rpc/provider-warmup-weight/","fuzzywordcount":400,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"b9e320dfaa4f9700ecdca67d76e07d54","permalink":"/en/projects/sofa-rpc/provider-warmup-weight/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/en/projects/sofa-rpc/provider-warmup-weight/","summary":"The warm-up weight feature allows the client machine to distribute traffic based on the corresponding weight of the server. This feature is also often used in the scenario where a few machines within a cluster are being started. The server machines can be warmed up in a short time with the traffic weight function, and then continue to receive the normal traffic.\nThe operating mechanism is as follows:   When the server service starts, it pushes its own warm-up duration, weight during warm-up, and normal weight after warm-up to the Service Registry.","tags":null,"title":"Warm-up weight","type":"projects","url":"/en/projects/sofa-rpc/provider-warmup-weight/","wordcount":319},{"author":null,"categories":null,"content":"X-Protocol X-Protocol is a special common protocol supported by SOFAMesh. It can access different RPC protocols in a unified manner. Because it doesn\u0026amp;rsquo;t require to parse protocols, it can not only provide higher performance, but also reduce the development cost of accessing new protocols.\n","date":-62135596800,"description":"","dir":"projects/sofa-mesh/pilot-x-protocol/","fuzzywordcount":100,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"220f4a76b277463bb1f7201519950450","permalink":"/en/projects/sofa-mesh/pilot-x-protocol/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/en/projects/sofa-mesh/pilot-x-protocol/","summary":"X-Protocol X-Protocol is a special common protocol supported by SOFAMesh. It can access different RPC protocols in a unified manner. Because it doesn\u0026rsquo;t require to parse protocols, it can not only provide higher performance, but also reduce the development cost of accessing new protocols.","tags":null,"title":"X-Protocol","type":"projects","url":"/en/projects/sofa-mesh/pilot-x-protocol/","wordcount":44},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-mesh/pilot-x-protocol/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"220f4a76b277463bb1f7201519950450","permalink":"/projects/sofa-mesh/pilot-x-protocol/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-mesh/pilot-x-protocol/","summary":"","tags":null,"title":"X-Protocol","type":"projects","url":"/projects/sofa-mesh/pilot-x-protocol/","wordcount":0},{"author":null,"categories":null,"content":"To use Zookeeper as service registry center, you only need to configure it in application.properties as follows:\ncom.alipay.sofa.rpc.registry.address=zookeeper://127.0.0.1:2181 Note: Considering the real-time nature of the service, the following features are not supported currently.\nSOFABoot RPC also provides a cache file (not supported currently), which is used for service discovery when ZooKeeper is not available. The way to configure this cache file is as follows:\ncom.alipay.sofa.rpc.registry.address=zookeeper://xxx:2181?file=/home/admin/registry Zookeeper Auth When users need to auth the providers and consumers, they can use a auth key to write or read the dictionary normally, only when they use the same key, zookeeper server will process these requests.\nSOFARPC API Usage If you use SOFARPC API directly, you can add two parameters to registry config.\nparameters.put(\u0026amp;#34;scheme\u0026amp;#34;, \u0026amp;#34;digest\u0026amp;#34;); //if there was multi auth infos, you need to set the value as user1:passwd1,user2:passwd2 parameters.put(\u0026amp;#34;addAuth\u0026amp;#34;, \u0026amp;#34;sofazk:rpc1\u0026amp;#34;); registryConfig = new RegistryConfig() .setProtocol(\u0026amp;#34;zookeeper\u0026amp;#34;) .setAddress(\u0026amp;#34;127.0.0.1:2181/authtest\u0026amp;#34;) .setParameters(parameters); then if another provider or consumer use a different auth info, they will not access these providers or consumers.\nXML Usage You only need to set it in application.properties\ncom.alipay.sofa.rpc.registry.address=zookeeper://xxx:2181?file=/home/admin/registry\u0026amp;amp;scheme=digest\u0026amp;amp;addAuth=sofazk:rpc1 ","date":-62135596800,"description":"","dir":"projects/sofa-rpc/registry-zookeeper/","fuzzywordcount":200,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"71d6486c5577cc85d84c56688cdf2af1","permalink":"/en/projects/sofa-rpc/registry-zookeeper/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/en/projects/sofa-rpc/registry-zookeeper/","summary":"To use Zookeeper as service registry center, you only need to configure it in application.properties as follows:\ncom.alipay.sofa.rpc.registry.address=zookeeper://127.0.0.1:2181 Note: Considering the real-time nature of the service, the following features are not supported currently.\nSOFABoot RPC also provides a cache file (not supported currently), which is used for service discovery when ZooKeeper is not available. The way to configure this cache file is as follows:\ncom.alipay.sofa.rpc.registry.address=zookeeper://xxx:2181?file=/home/admin/registry Zookeeper Auth When users need to auth the providers and consumers, they can use a auth key to write or read the dictionary normally, only when they use the same key, zookeeper server will process these requests.","tags":null,"title":"Zookeeper","type":"projects","url":"/en/projects/sofa-rpc/registry-zookeeper/","wordcount":174},{"author":null,"categories":null,"content":"ZooKeeper Adapter ZooKeeper Adapter is an Adapter plug-in developed in accordance with the Istio registry center extension mechanism. It is used for docking all microservices frameworks that use ZooKeeper as a registry center. Currently, ZooKeeper Adapter supports SOFARPC and will be available for Dubbo soon.\nZooKeeper Adapter uses ZooKeeper\u0026amp;rsquo;s watch mechanism to listen to the change events of service registration information, providing better real-time performance than polling.\n","date":-62135596800,"description":"","dir":"projects/sofa-mesh/pilot-zookeeper-adapter/","fuzzywordcount":100,"kind":"page","lang":"en","lastmod":1611070649,"objectID":"a174a0de8dd47df7c3043f6d49fa1b07","permalink":"/en/projects/sofa-mesh/pilot-zookeeper-adapter/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/en/projects/sofa-mesh/pilot-zookeeper-adapter/","summary":"ZooKeeper Adapter ZooKeeper Adapter is an Adapter plug-in developed in accordance with the Istio registry center extension mechanism. It is used for docking all microservices frameworks that use ZooKeeper as a registry center. Currently, ZooKeeper Adapter supports SOFARPC and will be available for Dubbo soon.\nZooKeeper Adapter uses ZooKeeper\u0026rsquo;s watch mechanism to listen to the change events of service registration information, providing better real-time performance than polling.","tags":null,"title":"ZooKeeper Adapter","type":"projects","url":"/en/projects/sofa-mesh/pilot-zookeeper-adapter/","wordcount":67},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-mesh/pilot-zookeeper-adapter/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"a174a0de8dd47df7c3043f6d49fa1b07","permalink":"/projects/sofa-mesh/pilot-zookeeper-adapter/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-mesh/pilot-zookeeper-adapter/","summary":"","tags":null,"title":"Zookeeper Adpater","type":"projects","url":"/projects/sofa-mesh/pilot-zookeeper-adapter/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-boot/sofa-ark-zk-config/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"c675734b1cb5fa546f96a31d8b9e3533","permalink":"/projects/sofa-boot/sofa-ark-zk-config/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-boot/sofa-ark-zk-config/","summary":"","tags":null,"title":"Zookeeper 配置","type":"projects","url":"/projects/sofa-boot/sofa-ark-zk-config/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-acts/usage-ide/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"697e7e6d35a2e058f3ca8b0a72032690","permalink":"/projects/sofa-acts/usage-ide/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-acts/usage-ide/","summary":"","tags":null,"title":"一站式编辑","type":"projects","url":"/projects/sofa-acts/usage-ide/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-acts/usage-model/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"65aaf62462b3b0ea142ca75a5b61eb0d","permalink":"/projects/sofa-acts/usage-model/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-acts/usage-model/","summary":"","tags":null,"title":"一键模型化","type":"projects","url":"/projects/sofa-acts/usage-model/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-acts/usage-script/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"0d20739dedad1f11277bd02ed65329c3","permalink":"/projects/sofa-acts/usage-script/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-acts/usage-script/","summary":"","tags":null,"title":"一键脚本化","type":"projects","url":"/projects/sofa-acts/usage-script/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-tracer/report-to-zipkin/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"d28d192386829452262116de9c32b570","permalink":"/projects/sofa-tracer/report-to-zipkin/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-tracer/report-to-zipkin/","summary":"","tags":null,"title":"上报数据至 Zipkin","type":"projects","url":"/projects/sofa-tracer/report-to-zipkin/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-rpc/graceful-shutdown/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"53af179e23ba184b01eb8234c055b15d","permalink":"/projects/sofa-rpc/graceful-shutdown/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-rpc/graceful-shutdown/","summary":"","tags":null,"title":"优雅关闭","type":"projects","url":"/projects/sofa-rpc/graceful-shutdown/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"使用该指南您可以快速部署应用到 CloudMesh ，对服务进行访问，通过监控查看流量，体验服务治理、Sidecar管理和对服务的新版本进行灰度发布等实用功能。","dir":"guides/kc-cloud-mesh-demo/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"e389a65e6736e909718275cd76505525","permalink":"/guides/kc-cloud-mesh-demo/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/guides/kc-cloud-mesh-demo/","summary":"","tags":null,"title":"使用 CloudMesh 轻松实践 Service Mesh","type":"guides","url":"/guides/kc-cloud-mesh-demo/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-rpc/registry-consul/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"e6b0aa843ea0ad401c3184f6ce87649b","permalink":"/projects/sofa-rpc/registry-consul/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-rpc/registry-consul/","summary":"","tags":null,"title":"使用 Consul 作为注册中心","type":"projects","url":"/projects/sofa-rpc/registry-consul/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/mosn/quick-start-run-with-sofamesh/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"9c6461e92180417d3a8ec4f3f2c723fe","permalink":"/projects/mosn/quick-start-run-with-sofamesh/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/mosn/quick-start-run-with-sofamesh/","summary":"","tags":null,"title":"使用 MOSN 搭建 Service Mesh 平台","type":"projects","url":"/projects/mosn/quick-start-run-with-sofamesh/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-rpc/registry-nacos/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"cc161f22cd2145fe309e63087581adc1","permalink":"/projects/sofa-rpc/registry-nacos/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-rpc/registry-nacos/","summary":"","tags":null,"title":"使用 Nacos 作为注册中心","type":"projects","url":"/projects/sofa-rpc/registry-nacos/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"该指南将向您展示如何使用开源分布式事务框架 Seata 的 AT 模式、TCC 模式解决业务数据的最终一致性问题。 ","dir":"guides/kc-seata-demo/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"60071a0eb44bf0901fb187eefd63ccdb","permalink":"/guides/kc-seata-demo/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/guides/kc-seata-demo/","summary":"","tags":null,"title":"使用 Seata 保障支付一致性","type":"guides","url":"/guides/kc-seata-demo/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-rpc/registry-sofa/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"65085018ce2b2b2ef452993bb79a69de","permalink":"/projects/sofa-rpc/registry-sofa/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-rpc/registry-sofa/","summary":"","tags":null,"title":"使用 SOFARegistry 作为注册中心","type":"projects","url":"/projects/sofa-rpc/registry-sofa/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"本指南将基于 SOFAStack 快速构建一个微服务。","dir":"guides/sofastack-quick-start/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"78bfd4806a86dc15ac86eee16fb85c82","permalink":"/guides/sofastack-quick-start/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/guides/sofastack-quick-start/","summary":"","tags":null,"title":"使用 SOFAStack 快速构建微服务","type":"guides","url":"/guides/sofastack-quick-start/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-rpc/registry-zookeeper/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"71d6486c5577cc85d84c56688cdf2af1","permalink":"/projects/sofa-rpc/registry-zookeeper/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-rpc/registry-zookeeper/","summary":"","tags":null,"title":"使用 Zookeeper 作为注册中心","type":"projects","url":"/projects/sofa-rpc/registry-zookeeper/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-rpc/registry-local/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"33bc89393392e21b3917f090313c0df5","permalink":"/projects/sofa-rpc/registry-local/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-rpc/registry-local/","summary":"","tags":null,"title":"使用本地文件作为注册中心","type":"projects","url":"/projects/sofa-rpc/registry-local/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-boot/dependency-management/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"dabdbd425f20dee4d7ab580d43574456","permalink":"/projects/sofa-boot/dependency-management/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-boot/dependency-management/","summary":"","tags":null,"title":"依赖管理","type":"projects","url":"/projects/sofa-boot/dependency-management/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-rpc/notice/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"b6c87388d5c1462f13d92012639a08b2","permalink":"/projects/sofa-rpc/notice/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-rpc/notice/","summary":"","tags":null,"title":"依赖组件版权说明","type":"projects","url":"/projects/sofa-rpc/notice/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-boot/health-check/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"a366b25125fa4aedb08a9cef572db1c8","permalink":"/projects/sofa-boot/health-check/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-boot/health-check/","summary":"","tags":null,"title":"健康检查","type":"projects","url":"/projects/sofa-boot/health-check/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-lookout/client-ext-metrics/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"c8a4fb3d904e359e99db9d4e81e60812","permalink":"/projects/sofa-lookout/client-ext-metrics/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-lookout/client-ext-metrics/","summary":"","tags":null,"title":"内置扩展 Metrics 指标","type":"projects","url":"/projects/sofa-lookout/client-ext-metrics/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-jraft/consistency-raft-jraft/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"a0e98df1bec305cca7db6fc34fc97771","permalink":"/projects/sofa-jraft/consistency-raft-jraft/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-jraft/consistency-raft-jraft/","summary":"","tags":null,"title":"分布式一致性 Raft 与 JRaft","type":"projects","url":"/projects/sofa-jraft/consistency-raft-jraft/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-rpc/test/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"ccda7c2372a7f55d61f682b72d3b1dc2","permalink":"/projects/sofa-rpc/test/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-rpc/test/","summary":"","tags":null,"title":"单元测试与性能测试","type":"projects","url":"/projects/sofa-rpc/test/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-acts/contributing/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"cd68baede6258921f83665ef0a446f1f","permalink":"/projects/sofa-acts/contributing/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-acts/contributing/","summary":"","tags":null,"title":"参与贡献","type":"projects","url":"/projects/sofa-acts/contributing/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-boot/sofa-ark-contribution/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"dbf77f98884a71c5c7a3fbb4dd189cfe","permalink":"/projects/sofa-boot/sofa-ark-contribution/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-boot/sofa-ark-contribution/","summary":"","tags":null,"title":"参与贡献","type":"projects","url":"/projects/sofa-boot/sofa-ark-contribution/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-dashboard/contribution/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"584584be9c13f2d36c85890dd192368a","permalink":"/projects/sofa-dashboard/contribution/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-dashboard/contribution/","summary":"","tags":null,"title":"参与贡献","type":"projects","url":"/projects/sofa-dashboard/contribution/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-registry/contributing/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"c08b5945719137833634c111c43a8d9e","permalink":"/projects/sofa-registry/contributing/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-registry/contributing/","summary":"","tags":null,"title":"参与贡献","type":"projects","url":"/projects/sofa-registry/contributing/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-rpc/contributing/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"448a7b9a949bd2d9e2e71ac6c237f9df","permalink":"/projects/sofa-rpc/contributing/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-rpc/contributing/","summary":"","tags":null,"title":"参与贡献","type":"projects","url":"/projects/sofa-rpc/contributing/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-lookout/plan/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"6153fc1f5e000f195d96dfdb03c5b381","permalink":"/projects/sofa-lookout/plan/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-lookout/plan/","summary":"","tags":null,"title":"发展规划","type":"projects","url":"/projects/sofa-lookout/plan/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-boot/sofa-ark-roadmap/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"c4532d11cef15d8fe3ff5e04c7b08f90","permalink":"/projects/sofa-boot/sofa-ark-roadmap/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-boot/sofa-ark-roadmap/","summary":"","tags":null,"title":"发展路线","type":"projects","url":"/projects/sofa-boot/sofa-ark-roadmap/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-rpc/roadmap/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"6064fc180911f520f6d1590b88595693","permalink":"/projects/sofa-rpc/roadmap/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-rpc/roadmap/","summary":"","tags":null,"title":"发展路线","type":"projects","url":"/projects/sofa-rpc/roadmap/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-tracer/roadmap/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"8b0a6fbe5f6ea5ae789f5186271073c3","permalink":"/projects/sofa-tracer/roadmap/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-tracer/roadmap/","summary":"","tags":null,"title":"发展路线","type":"projects","url":"/projects/sofa-tracer/roadmap/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-registry/roadmap/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"b0ab45d52ba3eb7db590a4f5e4197c9e","permalink":"/projects/sofa-registry/roadmap/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-registry/roadmap/","summary":"","tags":null,"title":"发展路线 \u0026 任务认领","type":"projects","url":"/projects/sofa-registry/roadmap/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/mosn/release-notes/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"62efb8e40401ab4612bcccaa6e942c97","permalink":"/projects/mosn/release-notes/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/mosn/release-notes/","summary":"","tags":null,"title":"发布历史","type":"projects","url":"/projects/mosn/release-notes/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-rpc/release-notes/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"ab7d46caa6906863103b77b742ec7e84","permalink":"/projects/sofa-rpc/release-notes/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-rpc/release-notes/","summary":"","tags":null,"title":"发布历史","type":"projects","url":"/projects/sofa-rpc/release-notes/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-boot/sofa-ark-release/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"994c3569ea416ee5b0dea253f08af6be","permalink":"/projects/sofa-boot/sofa-ark-release/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-boot/sofa-ark-release/","summary":"","tags":null,"title":"发布说明","type":"projects","url":"/projects/sofa-boot/sofa-ark-release/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-dashboard/release-node/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"3c8e6985123810c9692f47cc56b50081","permalink":"/projects/sofa-dashboard/release-node/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-dashboard/release-node/","summary":"","tags":null,"title":"发布说明","type":"projects","url":"/projects/sofa-dashboard/release-node/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-registry/release-notes/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"d92dddf77bbbd6078f3f96ba2224a53d","permalink":"/projects/sofa-registry/release-notes/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-registry/release-notes/","summary":"","tags":null,"title":"发布说明","type":"projects","url":"/projects/sofa-registry/release-notes/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-boot/speed-up-startup/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"ebd933894c7828948b87610d1d0ca020","permalink":"/projects/sofa-boot/speed-up-startup/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-boot/speed-up-startup/","summary":"","tags":null,"title":"启动加速","type":"projects","url":"/projects/sofa-boot/speed-up-startup/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-mesh/pilot-setup-zookeeper-quick-start-docker/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"1de4868fa0e9c73d932343847864d7fb","permalink":"/projects/sofa-mesh/pilot-setup-zookeeper-quick-start-docker/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-mesh/pilot-setup-zookeeper-quick-start-docker/","summary":"","tags":null,"title":"在 Kubernetes 中快速开始","type":"projects","url":"/projects/sofa-mesh/pilot-setup-zookeeper-quick-start-docker/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-mesh/sofa-mesh-setup/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"940d012b4883e5c91bf777916cd3c6b3","permalink":"/projects/sofa-mesh/sofa-mesh-setup/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-mesh/sofa-mesh-setup/","summary":"","tags":null,"title":"在 Kubernetes 中快速开始","type":"projects","url":"/projects/sofa-mesh/sofa-mesh-setup/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"使用该指南您可以体验到快速创建 Serveless 应用、根据业务请求秒级 0-1-N 自动伸缩、通过日志查看器快速排错、按时间触发应用等产品新功能。","dir":"guides/kc-serverless-demo/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"f355d1b598fed47b730bd74ad25f3683","permalink":"/guides/kc-serverless-demo/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/guides/kc-serverless-demo/","summary":"","tags":null,"title":"基于 Serverless 轻松构建云上应用","type":"guides","url":"/guides/kc-serverless-demo/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-boot/sofa-ark-terminology/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"b6d0ed10afe9d04bc00307017ffba7c5","permalink":"/projects/sofa-boot/sofa-ark-terminology/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-boot/sofa-ark-terminology/","summary":"","tags":null,"title":"基础术语","type":"projects","url":"/projects/sofa-boot/sofa-ark-terminology/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-registry/terminology/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"b678a49547c55f2a70e2d94dbce5b4a2","permalink":"/projects/sofa-registry/terminology/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-registry/terminology/","summary":"","tags":null,"title":"基础术语","type":"projects","url":"/projects/sofa-registry/terminology/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-tracer/explanation/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"8ba307b0679e918f7ac68c7efb7e53f7","permalink":"/projects/sofa-tracer/explanation/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-tracer/explanation/","summary":"","tags":null,"title":"基础术语","type":"projects","url":"/projects/sofa-tracer/explanation/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-rpc/common-model/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"b2cc3f7ed134408d6adc25e418e1978b","permalink":"/projects/sofa-rpc/common-model/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-rpc/common-model/","summary":"","tags":null,"title":"基础模型","type":"projects","url":"/projects/sofa-rpc/common-model/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-jraft/how-to-contribute-code-to-sofajraft/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"99034715298f73cd835672b872141609","permalink":"/projects/sofa-jraft/how-to-contribute-code-to-sofajraft/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-jraft/how-to-contribute-code-to-sofajraft/","summary":"","tags":null,"title":"如何参与 SOFAJRaft 代码贡献","type":"projects","url":"/projects/sofa-jraft/how-to-contribute-code-to-sofajraft/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-boot/sofa-ark-ark-plugin-demo/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"d8125843ced13352dd228299f222c74d","permalink":"/projects/sofa-boot/sofa-ark-ark-plugin-demo/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-boot/sofa-ark-ark-plugin-demo/","summary":"","tags":null,"title":"如何打包 Ark Plugin","type":"projects","url":"/projects/sofa-boot/sofa-ark-ark-plugin-demo/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-boot/sofa-ark-ark-demo/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"2c97c409788f41051c79836d277997be","permalink":"/projects/sofa-boot/sofa-ark-ark-demo/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-boot/sofa-ark-ark-demo/","summary":"","tags":null,"title":"如何打包 Ark 包","type":"projects","url":"/projects/sofa-boot/sofa-ark-ark-demo/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-rpc/how-to-build/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"52ad3debb35be8743c97bb4b6b77f22b","permalink":"/projects/sofa-rpc/how-to-build/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-rpc/how-to-build/","summary":"","tags":null,"title":"如何编译 SOFARPC 工程","type":"projects","url":"/projects/sofa-rpc/how-to-build/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-mesh/pilot-setup-zookeeper-installation/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"4c0bd56673dc8aebef9011a22496392d","permalink":"/projects/sofa-mesh/pilot-setup-zookeeper-installation/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-mesh/pilot-setup-zookeeper-installation/","summary":"","tags":null,"title":"安装指南","type":"projects","url":"/projects/sofa-mesh/pilot-setup-zookeeper-installation/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-rpc/configuration/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"b1a8a8c426beab292165716f1dff1ae4","permalink":"/projects/sofa-rpc/configuration/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-rpc/configuration/","summary":"","tags":null,"title":"完整配置参数","type":"projects","url":"/projects/sofa-rpc/configuration/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-lookout/use-guide-api/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"76574f2435a3565fe1fc50831ff9ab0c","permalink":"/projects/sofa-lookout/use-guide-api/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-lookout/use-guide-api/","summary":"","tags":null,"title":"客户端 API 使用指南","type":"projects","url":"/projects/sofa-lookout/use-guide-api/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-lookout/use-guide-registry/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"3c51ba6519cee542b459a170dabcf32b","permalink":"/projects/sofa-lookout/use-guide-registry/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-lookout/use-guide-registry/","summary":"","tags":null,"title":"客户端 Registry 使用指南","type":"projects","url":"/projects/sofa-lookout/use-guide-registry/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-registry/client-quick-start/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"66e300d44b2f2a903d976bf83eb7c16e","permalink":"/projects/sofa-registry/client-quick-start/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-registry/client-quick-start/","summary":"","tags":null,"title":"客户端使用","type":"projects","url":"/projects/sofa-registry/client-quick-start/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-lookout/quick-start-client-boot/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"27e057f8a8a4ac97f42ea66ca6a17fdd","permalink":"/projects/sofa-lookout/quick-start-client-boot/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-lookout/quick-start-client-boot/","summary":"","tags":null,"title":"客户端快速开始 - SOFABoot 项目","type":"projects","url":"/projects/sofa-lookout/quick-start-client-boot/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-lookout/quick-start-client-java/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"5dc476aa21ece4789859f1af598d4445","permalink":"/projects/sofa-lookout/quick-start-client-java/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-lookout/quick-start-client-java/","summary":"","tags":null,"title":"客户端快速开始 - 普通 Java 项目","type":"projects","url":"/projects/sofa-lookout/quick-start-client-java/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-rpc/client-invoke-flow/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"310d99d64b808a3b526563e92c699952","permalink":"/projects/sofa-rpc/client-invoke-flow/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-rpc/client-invoke-flow/","summary":"","tags":null,"title":"客户端调用流程","type":"projects","url":"/projects/sofa-rpc/client-invoke-flow/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-lookout/client-configuration/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"5fd84950d4d565d3fb20781337792bf1","permalink":"/projects/sofa-lookout/client-configuration/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-lookout/client-configuration/","summary":"","tags":null,"title":"客户端配置","type":"projects","url":"/projects/sofa-lookout/client-configuration/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-rpc/fault/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"e567dc5e291867e92c8dd1c4f953b768","permalink":"/projects/sofa-rpc/fault/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-rpc/fault/","summary":"","tags":null,"title":"容灾恢复","type":"projects","url":"/projects/sofa-rpc/fault/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/mosn/quick-start-run-samples/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"600c182fdee786a59e14899ba0fce8a1","permalink":"/projects/mosn/quick-start-run-samples/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/mosn/quick-start-run-samples/","summary":"","tags":null,"title":"工程示例","type":"projects","url":"/projects/mosn/quick-start-run-samples/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-lookout/use-guide-samples/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"a8a0fcd3f99ce2fb46e4d543e30797c9","permalink":"/projects/sofa-lookout/use-guide-samples/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-lookout/use-guide-samples/","summary":"","tags":null,"title":"工程示例","type":"projects","url":"/projects/sofa-lookout/use-guide-samples/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-acts/faq/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"5f89d1f5695cbe6b669a8738741529bd","permalink":"/projects/sofa-acts/faq/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-acts/faq/","summary":"","tags":null,"title":"常见问题","type":"projects","url":"/projects/sofa-acts/faq/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-boot/faq/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"56f06d32d37d8a5947d7c7ee43d6d955","permalink":"/projects/sofa-boot/faq/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-boot/faq/","summary":"","tags":null,"title":"常见问题","type":"projects","url":"/projects/sofa-boot/faq/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-lookout/faq/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"f05d40c9d503ad466634f0473a5fac40","permalink":"/projects/sofa-lookout/faq/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-lookout/faq/","summary":"","tags":null,"title":"常见问题","type":"projects","url":"/projects/sofa-lookout/faq/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-rpc/faq/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"a6ec77ce5a423c5345394f42c64a416b","permalink":"/projects/sofa-rpc/faq/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-rpc/faq/","summary":"","tags":null,"title":"常见问题","type":"projects","url":"/projects/sofa-rpc/faq/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-rpc/serialization/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"87e2faa84c2c7a7605243dc096bc4e17","permalink":"/projects/sofa-rpc/serialization/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-rpc/serialization/","summary":"","tags":null,"title":"序列化协议","type":"projects","url":"/projects/sofa-rpc/serialization/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-tracer/print-traceid-spanid/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"0d8cc680f811d1db2cffddbba269571c","permalink":"/projects/sofa-tracer/print-traceid-spanid/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-tracer/print-traceid-spanid/","summary":"","tags":null,"title":"应用日志打印 traceId 和 spanId","type":"projects","url":"/projects/sofa-tracer/print-traceid-spanid/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-dashboard/dashboard-client/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"60586c6dfee1f2afcdac88cbe7a36b83","permalink":"/projects/sofa-dashboard/dashboard-client/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-dashboard/dashboard-client/","summary":"","tags":null,"title":"应用面板","type":"projects","url":"/projects/sofa-dashboard/dashboard-client/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-lookout/development-use-guide/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"423a54ec3f5fbfc9c0e150eb853738ae","permalink":"/projects/sofa-lookout/development-use-guide/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-lookout/development-use-guide/","summary":"","tags":null,"title":"开发指南","type":"projects","url":"/projects/sofa-lookout/development-use-guide/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-acts/developer-guide/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"fcacc7e89b979f3aec8dc3333a7a3c37","permalink":"/projects/sofa-acts/developer-guide/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-acts/developer-guide/","summary":"","tags":null,"title":"开发者手册","type":"projects","url":"/projects/sofa-acts/developer-guide/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-rpc/developer-guide/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"903b9f3a5372a75d654f8eeaaf750eeb","permalink":"/projects/sofa-rpc/developer-guide/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-rpc/developer-guide/","summary":"","tags":null,"title":"开发者手册","type":"projects","url":"/projects/sofa-rpc/developer-guide/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-tracer/async/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"e755346c441115663c101638667fe4c0","permalink":"/projects/sofa-tracer/async/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-tracer/async/","summary":"","tags":null,"title":"异步线程处理","type":"projects","url":"/projects/sofa-tracer/async/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/mosn/quick-start-setup/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"d41615315adb522aa4b84762f113a574","permalink":"/projects/mosn/quick-start-setup/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/mosn/quick-start-setup/","summary":"","tags":null,"title":"快速开始","type":"projects","url":"/projects/mosn/quick-start-setup/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-acts/getting-started/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"dfc5fb9b394ea14c280568dcb881a8b0","permalink":"/projects/sofa-acts/getting-started/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-acts/getting-started/","summary":"","tags":null,"title":"快速开始","type":"projects","url":"/projects/sofa-acts/getting-started/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-boot/quick-start/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"7f582b905fde4a56791c03d4dd6b5a57","permalink":"/projects/sofa-boot/quick-start/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-boot/quick-start/","summary":"","tags":null,"title":"快速开始","type":"projects","url":"/projects/sofa-boot/quick-start/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-dashboard/quick-start/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"fa4c5f48810727f71d675255f19617a3","permalink":"/projects/sofa-dashboard/quick-start/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-dashboard/quick-start/","summary":"","tags":null,"title":"快速开始","type":"projects","url":"/projects/sofa-dashboard/quick-start/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-rpc/getting-started/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"990bb2211b02b04c3ab6e03f3ba1f74b","permalink":"/projects/sofa-rpc/getting-started/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-rpc/getting-started/","summary":"","tags":null,"title":"快速开始","type":"projects","url":"/projects/sofa-rpc/getting-started/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-tracer/component-access/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"143f2b9022161ae5a7b10d261752ae5f","permalink":"/projects/sofa-tracer/component-access/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-tracer/component-access/","summary":"","tags":null,"title":"快速开始指南","type":"projects","url":"/projects/sofa-tracer/component-access/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-tracer/flexible/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"5aaadb77e734e58428a0852d14888e92","permalink":"/projects/sofa-tracer/flexible/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-tracer/flexible/","summary":"","tags":null,"title":"手动埋点","type":"projects","url":"/projects/sofa-tracer/flexible/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-registry/scale/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"57de6dc4da1292063ff25ecea9ffbd08","permalink":"/projects/sofa-registry/scale/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-registry/scale/","summary":"","tags":null,"title":"扩容与缩容","type":"projects","url":"/projects/sofa-registry/scale/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-acts/usage-api/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"ce7e264713a6f7a3f0672e2432489f59","permalink":"/projects/sofa-acts/usage-api/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-acts/usage-api/","summary":"","tags":null,"title":"扩展功能","type":"projects","url":"/projects/sofa-acts/usage-api/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-rpc/extension-loader/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"acc5628da3a7ea2df5eb68bd8ec17159","permalink":"/projects/sofa-rpc/extension-loader/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-rpc/extension-loader/","summary":"","tags":null,"title":"扩展点设计","type":"projects","url":"/projects/sofa-rpc/extension-loader/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-rpc/publish-and-reference/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"6a78b8b84b226eaf1e6d2b1ff1d15fee","permalink":"/projects/sofa-rpc/publish-and-reference/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-rpc/publish-and-reference/","summary":"","tags":null,"title":"服务发布与引用","type":"projects","url":"/projects/sofa-rpc/publish-and-reference/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-lookout/use-guide-es/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"016a397aa24e885b5aaa32cf1cac3f35","permalink":"/projects/sofa-lookout/use-guide-es/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-lookout/use-guide-es/","summary":"","tags":null,"title":"服务器端 ES 存储使用指南","type":"projects","url":"/projects/sofa-lookout/use-guide-es/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-lookout/use-guide-grafana/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"45b8a5084ac2a151af28ff11413b13cb","permalink":"/projects/sofa-lookout/use-guide-grafana/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-lookout/use-guide-grafana/","summary":"","tags":null,"title":"服务器端 Grafana 使用指南","type":"projects","url":"/projects/sofa-lookout/use-guide-grafana/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-lookout/use-guide-storage-ext/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"b990dad82668bc22c24d4ad0468f0535","permalink":"/projects/sofa-lookout/use-guide-storage-ext/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-lookout/use-guide-storage-ext/","summary":"","tags":null,"title":"服务器端 Metrics 存储扩展机制","type":"projects","url":"/projects/sofa-lookout/use-guide-storage-ext/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-lookout/use-guide-promql-feature-enhancement/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"3bd5cd1f9d3ce3f9ba5b503ef0ba9da1","permalink":"/projects/sofa-lookout/use-guide-promql-feature-enhancement/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-lookout/use-guide-promql-feature-enhancement/","summary":"","tags":null,"title":"服务器端 PromQL 语法特性增强","type":"projects","url":"/projects/sofa-lookout/use-guide-promql-feature-enhancement/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-lookout/use-guide-other-metrics-protocol-support/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"df745d82f3f681cfd94b8187934a8477","permalink":"/projects/sofa-lookout/use-guide-other-metrics-protocol-support/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-lookout/use-guide-other-metrics-protocol-support/","summary":"","tags":null,"title":"服务器端常见数据采集协议支持","type":"projects","url":"/projects/sofa-lookout/use-guide-other-metrics-protocol-support/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-dashboard/governance/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"e547baf489fd5d125be9e67a366854b6","permalink":"/projects/sofa-dashboard/governance/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-dashboard/governance/","summary":"","tags":null,"title":"服务治理","type":"projects","url":"/projects/sofa-dashboard/governance/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-registry/server-quick-start/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"b620900b56ba04f4668838846a97698a","permalink":"/projects/sofa-registry/server-quick-start/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-registry/server-quick-start/","summary":"","tags":null,"title":"服务端部署","type":"projects","url":"/projects/sofa-registry/server-quick-start/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-jraft/engine-architecture/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"d2cc9de133aed20695229d0cde5b6ff9","permalink":"/projects/sofa-jraft/engine-architecture/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-jraft/engine-architecture/","summary":"","tags":null,"title":"核心引擎设计","type":"projects","url":"/projects/sofa-jraft/engine-architecture/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/mosn/concept/core-concept/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"5fd84bf5ceb2a4ab800cd0e2db774731","permalink":"/projects/mosn/concept/core-concept/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/mosn/concept/core-concept/","summary":"","tags":null,"title":"核心概念","type":"projects","url":"/projects/mosn/concept/core-concept/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-acts/usage-ready/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"c3a89cbf42d55c98206a08e94d05ffde","permalink":"/projects/sofa-acts/usage-ready/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-acts/usage-ready/","summary":"","tags":null,"title":"框架准备","type":"projects","url":"/projects/sofa-acts/usage-ready/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-boot/modular-development/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"95bc080787c3614bfa485d2f3cd0de4c","permalink":"/projects/sofa-boot/modular-development/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-boot/modular-development/","summary":"","tags":null,"title":"模块化开发概述","type":"projects","url":"/projects/sofa-boot/modular-development/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-boot/parallel-start/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"a6ef51b78d2a4f9af0debbc25ea45e8a","permalink":"/projects/sofa-boot/parallel-start/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-boot/parallel-start/","summary":"","tags":null,"title":"模块并行化启动","type":"projects","url":"/projects/sofa-boot/parallel-start/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-boot/sofaboot-module/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"2dbb8a536237f21afbee1e3f320b8193","permalink":"/projects/sofa-boot/sofaboot-module/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-boot/sofaboot-module/","summary":"","tags":null,"title":"模块配置","type":"projects","url":"/projects/sofa-boot/sofaboot-module/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-rpc/registry-extension-guide/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"c952ecbea16f7ae68ad095ab8baf0583","permalink":"/projects/sofa-rpc/registry-extension-guide/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-rpc/registry-extension-guide/","summary":"","tags":null,"title":"注册中心扩展指南","type":"projects","url":"/projects/sofa-rpc/registry-extension-guide/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-rpc/registry-usage/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"5a1a4619c8ac4a9fc27b8576472aed9f","permalink":"/projects/sofa-rpc/registry-usage/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-rpc/registry-usage/","summary":"","tags":null,"title":"注册中心选择","type":"projects","url":"/projects/sofa-rpc/registry-usage/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/mosn/concept/traffic-hijack/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"5845d8478a48fcddc74f0b9d28ede2c2","permalink":"/projects/mosn/concept/traffic-hijack/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/mosn/concept/traffic-hijack/","summary":"","tags":null,"title":"流量劫持","type":"projects","url":"/projects/mosn/concept/traffic-hijack/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-rpc/version-release/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"604f113607e6815757f4d1907190c13c","permalink":"/projects/sofa-rpc/version-release/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-rpc/version-release/","summary":"","tags":null,"title":"版本发布","type":"projects","url":"/projects/sofa-rpc/version-release/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-jraft/release-log/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"9e24fb74a3cda6a600252b01f8a85db9","permalink":"/projects/sofa-jraft/release-log/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-jraft/release-log/","summary":"","tags":null,"title":"版本发行日志","type":"projects","url":"/projects/sofa-jraft/release-log/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-boot/view-versions/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"c6b6d22e9038aa1f5e4ce74449ba1cda","permalink":"/projects/sofa-boot/view-versions/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-boot/view-versions/","summary":"","tags":null,"title":"版本查看","type":"projects","url":"/projects/sofa-boot/view-versions/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-dashboard/version-rule/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"a2093bdf478bdff0e15a2de70e522d03","permalink":"/projects/sofa-dashboard/version-rule/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-dashboard/version-rule/","summary":"","tags":null,"title":"版本规范","type":"projects","url":"/projects/sofa-dashboard/version-rule/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-registry/release-standard/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"71aad9cbc42aba3d9f875ae9169cf005","permalink":"/projects/sofa-registry/release-standard/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-registry/release-standard/","summary":"","tags":null,"title":"版本规范","type":"projects","url":"/projects/sofa-registry/release-standard/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-boot/notice/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"11f073a7a9965ab5690ed166fe319bbd","permalink":"/projects/sofa-boot/notice/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-boot/notice/","summary":"","tags":null,"title":"版权声明","type":"projects","url":"/projects/sofa-boot/notice/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-dashboard/notice/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"a9ebe38d245302f94ab7bfa793329926","permalink":"/projects/sofa-dashboard/notice/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-dashboard/notice/","summary":"","tags":null,"title":"版权声明","type":"projects","url":"/projects/sofa-dashboard/notice/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-registry/notice/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"c40263ffd56a2f1292756c9fafea55e2","permalink":"/projects/sofa-registry/notice/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-registry/notice/","summary":"","tags":null,"title":"版权声明","type":"projects","url":"/projects/sofa-registry/notice/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-jraft/user-stories/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"b233be7d9eed33645945293e637e28ea","permalink":"/projects/sofa-jraft/user-stories/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-jraft/user-stories/","summary":"","tags":null,"title":"用户案例","type":"projects","url":"/projects/sofa-jraft/user-stories/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-rpc/peer-to-peer/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"b1815c322f5dc9528f6429d1d5e38369","permalink":"/projects/sofa-rpc/peer-to-peer/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-rpc/peer-to-peer/","summary":"","tags":null,"title":"直连调用","type":"projects","url":"/projects/sofa-rpc/peer-to-peer/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-rpc/programming/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"9a947dae761c84aa4d95121c076ac552","permalink":"/projects/sofa-rpc/programming/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-rpc/programming/","summary":"","tags":null,"title":"编程界面","type":"projects","url":"/projects/sofa-rpc/programming/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-rpc/configuration-fault-tolerance/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"a132b54b2398534d1773489e2b0db166","permalink":"/projects/sofa-rpc/configuration-fault-tolerance/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-rpc/configuration-fault-tolerance/","summary":"","tags":null,"title":"自动故障剔除","type":"projects","url":"/projects/sofa-rpc/configuration-fault-tolerance/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-rpc/fault-tolerance/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"7501b0fac1d1d89c61de0d591e29e1d0","permalink":"/projects/sofa-rpc/fault-tolerance/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-rpc/fault-tolerance/","summary":"","tags":null,"title":"自动故障剔除","type":"projects","url":"/projects/sofa-rpc/fault-tolerance/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-tracer/reporter-custom/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"521206c7f4051c1cc8ec8232c20bab6d","permalink":"/projects/sofa-tracer/reporter-custom/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-tracer/reporter-custom/","summary":"","tags":null,"title":"自定义 Reporter","type":"projects","url":"/projects/sofa-tracer/reporter-custom/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-rpc/custom-threadpool/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"3f05f154bcb2b653ebeebb35b84d5ae1","permalink":"/projects/sofa-rpc/custom-threadpool/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-rpc/custom-threadpool/","summary":"","tags":null,"title":"自定义线程池","type":"projects","url":"/projects/sofa-rpc/custom-threadpool/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-rpc/custom-router/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"236e8d4bda3e856267a3575853aa900c","permalink":"/projects/sofa-rpc/custom-router/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-rpc/custom-router/","summary":"","tags":null,"title":"自定义路由寻址","type":"projects","url":"/projects/sofa-rpc/custom-router/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-rpc/custom-filter/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"30ff5937b52a7c2dd8028e878979a33d","permalink":"/projects/sofa-rpc/custom-filter/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-rpc/custom-filter/","summary":"","tags":null,"title":"自定义过滤器","type":"projects","url":"/projects/sofa-rpc/custom-filter/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/mosn/configuration/custom/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"cdad467fd3551e47a7585511278767cd","permalink":"/projects/mosn/configuration/custom/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/mosn/configuration/custom/","summary":"","tags":null,"title":"自定义配置说明","type":"projects","url":"/projects/mosn/configuration/custom/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-rpc/retry-invoke/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"d60b44aa8f1b49ab6c1bbc55593a91da","permalink":"/projects/sofa-rpc/retry-invoke/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-rpc/retry-invoke/","summary":"","tags":null,"title":"调用重试","type":"projects","url":"/projects/sofa-rpc/retry-invoke/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-rpc/load-balance/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"739984ca9a414429304f85010fd73ad0","permalink":"/projects/sofa-rpc/load-balance/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-rpc/load-balance/","summary":"","tags":null,"title":"负载均衡","type":"projects","url":"/projects/sofa-rpc/load-balance/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-dashboard/roadmap/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"a740c874742b504de9011b07f3a4ddb5","permalink":"/projects/sofa-dashboard/roadmap/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-dashboard/roadmap/","summary":"","tags":null,"title":"路线图及任务认领","type":"projects","url":"/projects/sofa-dashboard/roadmap/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-registry/management-api/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"2cf59ac422c84c279d73c1f7f1cd0902","permalink":"/projects/sofa-registry/management-api/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-registry/management-api/","summary":"","tags":null,"title":"运维命令","type":"projects","url":"/projects/sofa-registry/management-api/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-rpc/protocol/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"18f51cb12f7a0384a71ab22349292a08","permalink":"/projects/sofa-rpc/protocol/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-rpc/protocol/","summary":"","tags":null,"title":"通信协议","type":"projects","url":"/projects/sofa-rpc/protocol/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-registry/deployment/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"7e28583bc38be66af8d704d7fbcd9dd4","permalink":"/projects/sofa-registry/deployment/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-registry/deployment/","summary":"","tags":null,"title":"部署","type":"projects","url":"/projects/sofa-registry/deployment/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/mosn/configuration/overview/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"0aa65950d2c24e8ce86d265bea275e2a","permalink":"/projects/mosn/configuration/overview/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/mosn/configuration/overview/","summary":"","tags":null,"title":"配置概览","type":"projects","url":"/projects/mosn/configuration/overview/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-tracer/sampler/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"48856a040da01abc84213934c1c5fce4","permalink":"/projects/sofa-tracer/sampler/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-tracer/sampler/","summary":"","tags":null,"title":"采样模式","type":"projects","url":"/projects/sofa-tracer/sampler/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-rpc/invoke-chain-pass-data/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"96cfb41f07a6a2ad979b53093ff5eee9","permalink":"/projects/sofa-rpc/invoke-chain-pass-data/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-rpc/invoke-chain-pass-data/","summary":"","tags":null,"title":"链路数据透传","type":"projects","url":"/projects/sofa-rpc/invoke-chain-pass-data/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-rpc/tracing-usage/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"5f944f87d827ae060fb0528f6715af97","permalink":"/projects/sofa-rpc/tracing-usage/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-rpc/tracing-usage/","summary":"","tags":null,"title":"链路追踪","type":"projects","url":"/projects/sofa-rpc/tracing-usage/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-rpc/restful-swagger/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"d068767fe0dd2922eecef69736684be8","permalink":"/projects/sofa-rpc/restful-swagger/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-rpc/restful-swagger/","summary":"","tags":null,"title":"集成 SOFARPC RESTful 服务和 Swagger","type":"projects","url":"/projects/sofa-rpc/restful-swagger/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-rpc/programing-rpc/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"ee6f74a4974c7abf72322cef108d5ef0","permalink":"/projects/sofa-rpc/programing-rpc/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-rpc/programing-rpc/","summary":"","tags":null,"title":"非 Spring 环境 API 使用","type":"projects","url":"/projects/sofa-rpc/programing-rpc/","wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"description":"","dir":"projects/sofa-rpc/provider-warmup-weight/","fuzzywordcount":0,"kind":"page","lang":"zh","lastmod":1611070649,"objectID":"b9e320dfaa4f9700ecdca67d76e07d54","permalink":"/projects/sofa-rpc/provider-warmup-weight/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/projects/sofa-rpc/provider-warmup-weight/","summary":"","tags":null,"title":"预热权重","type":"projects","url":"/projects/sofa-rpc/provider-warmup-weight/","wordcount":0}]