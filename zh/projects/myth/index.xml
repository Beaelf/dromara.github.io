<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Myth on dromara(Open source organization)</title><link>/zh/projects/myth/</link><description>Recent content in Myth on dromara(Open source organization)</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><atom:link href="/zh/projects/myth/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>/zh/projects/myth/config/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/myth/config/</guid><description>@Myth ##### 注解源码解析 /** * myth分布式事务框架注解 */ @Retention(RetentionPolicy.RUNTIME) @Target({ElementType.METHOD}) public @interface Myth { /** * The destination name for this listener, resolved through the container-wide */ String destination(); /** * 目标接口类 * 如果是springcloud用户，需要指定目标的接口服务 * （因为springcloud是http的请求，通过反射序列化方式没办法调用，所有加了这个属性） * 如果是dubbo用户 则不需要指定 * 如果是motan用户 则不需要指定 * * @return Class */ Class target() default Object.class; /** * 目标接口方法名称 * 如果是springcloud用户，需要指定目标的方法名称 * （因为springcloud是http的请求，通过反射序列化方式没办法调用，所有加了这个属性） * 如果是dubbo用户 则不需要指定 * 如果是motan用户 则不需要指定 * * @return String */ String targetMethod() default &amp;quot;&amp;quot;; /** * 是否有事务 这里具体指的是发起方是否有进行数据库的操作（是否有事务操作） * * @return PropagationEnum */ PropagationEnum propagation() default PropagationEnum.</description></item><item><title/><link>/zh/projects/myth/dubbo-user/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/myth/dubbo-user/</guid><description>### 在dubbo api 项目引入myth-annotation jar包 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.github.myth&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;myth-annotation&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; ### 在dubbo interface 方法上加上@Myth注解 ,并设置消息队列名称,此队列就是消息中间件发消息的队列： @Myth(destination = &amp;quot;account&amp;quot;) boolean payment(AccountDTO accountDTO); 在dubbo 服务提供方（事务的参与方法，被调用方） 引入myth-dubbo 包 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.github.myth&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;myth-dubbo&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; #### 配置 MythTransactionBootstrap启动类,可以采用xml方式，或者@Bean的方式,具体配置可以参考:配置详解 &amp;lt;context:component-scan base-package=&amp;quot;com.github.myth.*&amp;quot;/&amp;gt; &amp;lt;aop:aspectj-autoproxy expose-proxy=&amp;quot;true&amp;quot;/&amp;gt; &amp;lt;bean id=&amp;quot;mythTransactionBootstrap&amp;quot; class=&amp;quot;com.github.myth.core.bootstrap.MythTransactionBootstrap&amp;quot;&amp;gt; &amp;lt;property name=&amp;quot;repositorySuffix&amp;quot; value=&amp;quot;account-service&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;serializer&amp;quot; value=&amp;quot;kryo&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;coordinatorQueueMax&amp;quot; value=&amp;quot;5000&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;coordinatorThreadMax&amp;quot; value=&amp;quot;8&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;rejectPolicy&amp;quot; value=&amp;quot;Abort&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;blockingQueueType&amp;quot; value=&amp;quot;Linked&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;repositorySupport&amp;quot; value=&amp;quot;db&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;mythDbConfig&amp;quot;&amp;gt; &amp;lt;bean class=&amp;quot;com.</description></item><item><title/><link>/zh/projects/myth/motan-user/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/myth/motan-user/</guid><description>### 在motan api 项目引入myth-annotation jar包 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.github.myth&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;myth-annotation&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; ### 在motan interface 方法上加上@Myth注解 ,并设置消息队列名称,此队列就是消息中间件发消息的队列： @Myth(destination = &amp;quot;account&amp;quot;) boolean payment(AccountDTO accountDTO); 在motan 服务提供方（事务的参与方法，被调用方） 引入myth-motan 包 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.github.myth&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;myth-motan&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; #### 配置 MythTransactionBootstrap启动类,可以采用xml方式，或者@Bean的方式,具体配置可以参考:配置详解 &amp;lt;context:component-scan base-package=&amp;quot;com.github.myth.*&amp;quot;/&amp;gt; &amp;lt;aop:aspectj-autoproxy expose-proxy=&amp;quot;true&amp;quot;/&amp;gt; &amp;lt;bean id=&amp;quot;mythTransactionBootstrap&amp;quot; class=&amp;quot;com.github.myth.core.bootstrap.MythTransactionBootstrap&amp;quot;&amp;gt; &amp;lt;property name=&amp;quot;repositorySuffix&amp;quot; value=&amp;quot;account-service&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;serializer&amp;quot; value=&amp;quot;kryo&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;coordinatorQueueMax&amp;quot; value=&amp;quot;5000&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;coordinatorThreadMax&amp;quot; value=&amp;quot;8&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;rejectPolicy&amp;quot; value=&amp;quot;Abort&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;blockingQueueType&amp;quot; value=&amp;quot;Linked&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;repositorySupport&amp;quot; value=&amp;quot;db&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;mythDbConfig&amp;quot;&amp;gt; &amp;lt;bean class=&amp;quot;com.</description></item><item><title/><link>/zh/projects/myth/quick-start-dubbo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/myth/quick-start-dubbo/</guid><description>cd https://github.com/yu199195/myth/tree/master/myth-demo/myth-demo-dubbo Modifiy application.yml on Indicator Item And Modifiy you jdbc url And choose you Message Oriented Middleware spring: datasource: driver-class-name: com.mysql.jdbc.Driver url: jdbc:mysql://192.168.1.68:3306/myth_account?useUnicode=true&amp;amp;characterEncoding=utf8 username: xiaoyu password: Wgj@555888 #activemq: # broker-url: tcp://120.76.52.162:61616 # user: happylife # password: happylifeplat01 # trust-all: true #rabbitmq: # host: localhost # port: 5672 # username: guest # password: guest rocketmq: namesrvAddr: 192.168.1.148:9876 consumerGroupName: account instanceName: account #kafka: # consumer: # bootstrap-servers: localhost:9092 # group-id: test # auto-offset-reset: earliest # enable-auto-commit: true # auto-commit-interval: 100 # key-deserializer: org.</description></item><item><title/><link>/zh/projects/myth/quick-start-motan/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/myth/quick-start-motan/</guid><description>cd https://github.com/yu199195/myth/tree/master/myth-demo/myth-demo-motan Modifiy application.yml on Indicator Item And Modifiy you jdbc url And zookeeper url And choose you Message Oriented Middleware spring: motan: zookeeper: 192.168.1.148:2181 datasource: driver-class-name: com.mysql.jdbc.Driver url: jdbc:mysql://192.168.1.68:3306/myth_account?useUnicode=true&amp;amp;characterEncoding=utf8 username: xiaoyu password: Wgj@555888 #activemq: # broker-url: tcp://120.76.52.162:61616 # user: happylife # password: happylifeplat01 # trust-all: true #rabbitmq: # host: localhost # port: 5672 # username: guest # password: guest rocketmq: namesrvAddr: 192.168.1.148:9876 consumerGroupName: account instanceName: account #kafka: # consumer: # bootstrap-servers: localhost:9092 # group-id: test # auto-offset-reset: earliest # enable-auto-commit: true # auto-commit-interval: 100 # key-deserializer: org.</description></item><item><title/><link>/zh/projects/myth/quick-start-springcloud/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/myth/quick-start-springcloud/</guid><description>cd https://github.com/yu199195/myth/tree/master/myth-demo/myth-demo-springcloud run EurekaServerApplication.java Modifiy application.yml on Indicator Item And Modifiy you jdbc url And choose you Message Oriented Middleware spring: datasource: driver-class-name: com.mysql.jdbc.Driver url: jdbc:mysql://192.168.1.68:3306/myth_account?useUnicode=true&amp;amp;characterEncoding=utf8 username: xiaoyu password: Wgj@555888 #activemq: # broker-url: tcp://120.76.52.162:61616 # user: happylife # password: happylifeplat01 # trust-all: true #rabbitmq: # host: localhost # port: 5672 # username: guest # password: guest rocketmq: namesrvAddr: 192.168.1.148:9876 consumerGroupName: account instanceName: account #kafka: # consumer: # bootstrap-servers: localhost:9092 # group-id: test # auto-offset-reset: earliest # enable-auto-commit: true # auto-commit-interval: 100 # key-deserializer: org.</description></item><item><title/><link>/zh/projects/myth/springcloud-user/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/myth/springcloud-user/</guid><description>在springcloud 服务提供方（事务的参与方法，被调用方） 引入myth-springcloud 包 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.github.myth&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;myth-springcloud&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; #### 配置 MythTransactionBootstrap启动类,可以采用xml方式，或者@Bean的方式,具体配置可以参考:配置详解 &amp;lt;context:component-scan base-package=&amp;quot;com.github.myth.*&amp;quot;/&amp;gt; &amp;lt;aop:aspectj-autoproxy expose-proxy=&amp;quot;true&amp;quot;/&amp;gt; &amp;lt;bean id=&amp;quot;mythTransactionBootstrap&amp;quot; class=&amp;quot;com.github.myth.core.bootstrap.MythTransactionBootstrap&amp;quot;&amp;gt; &amp;lt;property name=&amp;quot;repositorySuffix&amp;quot; value=&amp;quot;account-service&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;serializer&amp;quot; value=&amp;quot;kryo&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;coordinatorQueueMax&amp;quot; value=&amp;quot;5000&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;coordinatorThreadMax&amp;quot; value=&amp;quot;8&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;rejectPolicy&amp;quot; value=&amp;quot;Abort&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;blockingQueueType&amp;quot; value=&amp;quot;Linked&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;repositorySupport&amp;quot; value=&amp;quot;db&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;mythDbConfig&amp;quot;&amp;gt; &amp;lt;bean class=&amp;quot;com.github.myth.common.config.MythDbConfig&amp;quot;&amp;gt; &amp;lt;property name=&amp;quot;url&amp;quot; value=&amp;quot;jdbc:mysql://192.168.1.68:3306/myth?useUnicode=true&amp;amp;amp;characterEncoding=utf8&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;driverClassName&amp;quot; value=&amp;quot;com.mysql.jdbc.Driver&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;password&amp;quot; value=&amp;quot;Wgj@555888&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;username&amp;quot; value=&amp;quot;xiaoyu&amp;quot;/&amp;gt; &amp;lt;/bean&amp;gt; &amp;lt;/property&amp;gt; &amp;lt;/bean&amp;gt; springcloud服务的实现方法上加上 @Myth 监听消息队列（注解方法上写的消息队列名称),调用框架提供 的MythMqReceiveService.processMessage方法。列如使用jms，具体可以参考demo工程。 @JmsListener(destination = &amp;quot;account&amp;quot;,containerFactory = &amp;quot;queueListenerContainerFactory&amp;quot;) public void receiveQueue(byte[] message) { LOGGER.</description></item><item><title/><link>/zh/projects/myth/start-myth-admin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/myth/start-myth-admin/</guid><description>myth-admin 启动教程 启动前提：分布式事务项目已经部署并且运行起来，用户根据自己的RPC框架进行使用
首先用户使用的JDK必须是1.8+ 本地安装了git ,maven ，执行以下命令
git clone https://github.com/yu199195/myth.git maven clean install 使用你的开发工具打开项目，比如idea Eclipse
步骤一： 修改 myth-admin项目中的application.properties文件 server.port=8888 server.context-path=/myth-admin server.address=0.0.0.0 spring.application.name=myth-admin #激活方式 指的是存储事务日志采取的方式 同业务模块一样 spring.profiles.active=db # myth 管理后台用户名 myth.admin.userName=admin # myth 管理后台密码 myth.admin.password=admin # 各项目的事务日志存储路径的后缀，这里一定需要指定 myth.repository.suffix.list=account-service,inventory-service,order-service # 各项目支持的序列化方式 每个项目需要配置成一样的 myth.serializer.support=kryo myth.retry.max=10 #dbSuport myth.db.driver=com.mysql.jdbc.Driver myth.db.url=jdbc:mysql://192.168.1.68:3306/myth?useUnicode=true&amp;amp;amp;characterEncoding=utf8 myth.db.username=xiaoyu myth.db.password=Wgj@555888 #redis myth.redis.cluster=false myth.redis.hostName=192.168.1.68 myth.redis.port=6379 myth.redis.password= #myth.redis.clusterUrl=127.0.0.1:70001;127.0.1:7002 #mongo myth.mongo.url=192.168.1.68:27017 myth.mongo.dbName=happylife #myth.mongo.userName=xiaoyu myth.mongo.password=123456 #zookeeper myth.zookeeper.host=192.168.1.116:2181 myth.zookeeper.sessionTimeOut=200000 配置解释 关于 myth.</description></item><item><title>Myth 介绍</title><link>/zh/projects/myth/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/myth/overview/</guid><description>myth 采用消息队列解决分布式事务的开源框架, 基于java语言来开发（JDK1.8），支持dubbo，springcloud,motan等rpc框</description></item></channel></rss>